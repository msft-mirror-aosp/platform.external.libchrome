From c45037860e281700c8cf75b0ef301153929fce07 Mon Sep 17 00:00:00 2001
From: Georg Neis <neis@chromium.org>
Date: Fri, 29 Nov 2024 06:12:29 +0000
Subject: [PATCH] Revert "Make CHECK() failures understood as [[noreturn]]"

This reverts commit b37a2c2574209e3e86d67ff6733ab9bb42972722.
---
 base/check.cc          | 86 +++++++++++++-----------------------------
 base/check.h           | 57 +++++++++++-----------------
 base/check_op.h        |  5 +--
 base/check_unittest.cc | 41 +++-----------------
 base/notreached.h      |  2 +-
 5 files changed, 56 insertions(+), 135 deletions(-)

diff --git a/base/check.cc b/base/check.cc
index 4c30de5cb3..75b23d186c 100644
--- a/base/check.cc
+++ b/base/check.cc
@@ -291,6 +291,24 @@ CheckError CheckError::DumpWillBeCheckOp(char* log_message_str,
   return CheckError(log_message);
 }
 
+CheckError CheckError::PCheck(const char* condition,
+                              const base::Location& location) {
+  SystemErrorCode err_code = logging::GetLastSystemErrorCode();
+#if BUILDFLAG(IS_WIN)
+  auto* const log_message = new Win32ErrorLogMessage(
+      location.file_name(), location.line_number(), LOGGING_FATAL, err_code);
+#elif BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)
+  auto* const log_message = new ErrnoLogMessage(
+      location.file_name(), location.line_number(), LOGGING_FATAL, err_code);
+#endif
+  log_message->stream() << "Check failed: " << condition << ". ";
+  return CheckError(log_message);
+}
+
+CheckError CheckError::PCheck(const base::Location& location) {
+  return PCheck("", location);
+}
+
 CheckError CheckError::DPCheck(const char* condition,
                                const base::Location& location) {
   SystemErrorCode err_code = logging::GetLastSystemErrorCode();
@@ -303,6 +321,15 @@ CheckError CheckError::DPCheck(const char* condition,
   return CheckError(log_message);
 }
 
+CheckError CheckError::DumpWillBeNotReachedNoreturn(
+    const base::Location& location) {
+  auto* const log_message = new NotReachedLogMessage(
+      location, GetDumpSeverity(),
+      base::NotFatalUntil::NoSpecifiedMilestoneInternal);
+  log_message->stream() << "NOTREACHED hit. ";
+  return CheckError(log_message);
+}
+
 CheckError CheckError::NotImplemented(const char* function,
                                       const base::Location& location) {
   auto* const log_message = new LogMessage(
@@ -337,56 +364,6 @@ CheckError::~CheckError() {
 
 CheckError::CheckError(LogMessage* log_message) : log_message_(log_message) {}
 
-// Note: This function ends up in crash stack traces. If its full name changes,
-// the crash server's magic signature logic needs to be updated. See
-// cl/306632920.
-CheckNoreturnError::~CheckNoreturnError() {
-  // Reset before `ImmediateCrash()` to ensure the message is flushed.
-  log_message_.reset();
-
-  // Make sure we die if we haven't.
-  // TODO(crbug.com/40254046): Replace this with NOTREACHED() once LOG(FATAL) is
-  // [[noreturn]].
-  base::ImmediateCrash();
-}
-
-CheckNoreturnError CheckNoreturnError::Check(const char* condition,
-                                             const base::Location& location) {
-  auto* const log_message =
-      new CheckLogMessage(location, LOGGING_FATAL,
-                          base::NotFatalUntil::NoSpecifiedMilestoneInternal);
-  log_message->stream() << "Check failed: " << condition << ". ";
-  return CheckNoreturnError(log_message);
-}
-
-CheckNoreturnError CheckNoreturnError::CheckOp(char* log_message_str,
-                                               const base::Location& location) {
-  auto* const log_message =
-      new CheckLogMessage(location, LOGGING_FATAL,
-                          base::NotFatalUntil::NoSpecifiedMilestoneInternal);
-  log_message->stream() << log_message_str;
-  free(log_message_str);
-  return CheckNoreturnError(log_message);
-}
-
-CheckNoreturnError CheckNoreturnError::PCheck(const char* condition,
-                                              const base::Location& location) {
-  SystemErrorCode err_code = logging::GetLastSystemErrorCode();
-#if BUILDFLAG(IS_WIN)
-  auto* const log_message = new Win32ErrorLogMessage(
-      location.file_name(), location.line_number(), LOGGING_FATAL, err_code);
-#elif BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)
-  auto* const log_message = new ErrnoLogMessage(
-      location.file_name(), location.line_number(), LOGGING_FATAL, err_code);
-#endif
-  log_message->stream() << "Check failed: " << condition << ". ";
-  return CheckNoreturnError(log_message);
-}
-
-CheckNoreturnError CheckNoreturnError::PCheck(const base::Location& location) {
-  return PCheck("", location);
-}
-
 NotReachedError NotReachedError::NotReached(base::NotFatalUntil fatal_milestone,
                                             const base::Location& location) {
   auto* const log_message = new NotReachedLogMessage(
@@ -398,15 +375,6 @@ NotReachedError NotReachedError::NotReached(base::NotFatalUntil fatal_milestone,
   return NotReachedError(log_message);
 }
 
-NotReachedError NotReachedError::DumpWillBeNotReached(
-    const base::Location& location) {
-  auto* const log_message = new NotReachedLogMessage(
-      location, GetDumpSeverity(),
-      base::NotFatalUntil::NoSpecifiedMilestoneInternal);
-  log_message->stream() << "NOTREACHED hit. ";
-  return NotReachedError(log_message);
-}
-
 NotReachedError::~NotReachedError() = default;
 
 NotReachedNoreturnError::NotReachedNoreturnError(const base::Location& location)
diff --git a/base/check.h b/base/check.h
index aaf866282e..dcdd59354d 100644
--- a/base/check.h
+++ b/base/check.h
@@ -77,13 +77,15 @@ class BASE_EXPORT CheckError {
  public:
   static CheckError Check(
       const char* condition,
-      base::NotFatalUntil fatal_milestone,
+      base::NotFatalUntil fatal_milestone =
+          base::NotFatalUntil::NoSpecifiedMilestoneInternal,
       const base::Location& location = base::Location::Current());
   // Takes ownership over (free()s after using) `log_message_str`, for use with
   // CHECK_op macros.
   static CheckError CheckOp(
       char* log_message_str,
-      base::NotFatalUntil fatal_milestone,
+      base::NotFatalUntil fatal_milestone =
+          base::NotFatalUntil::NoSpecifiedMilestoneInternal,
       const base::Location& location = base::Location::Current());
 
   static CheckError DCheck(
@@ -104,10 +106,19 @@ class BASE_EXPORT CheckError {
       char* log_message_str,
       const base::Location& location = base::Location::Current());
 
+  static CheckError PCheck(
+      const char* condition,
+      const base::Location& location = base::Location::Current());
+  static CheckError PCheck(
+      const base::Location& location = base::Location::Current());
+
   static CheckError DPCheck(
       const char* condition,
       const base::Location& location = base::Location::Current());
 
+  static CheckError DumpWillBeNotReachedNoreturn(
+      const base::Location& location = base::Location::Current());
+
   static CheckError NotImplemented(
       const char* function,
       const base::Location& location = base::Location::Current());
@@ -134,40 +145,15 @@ class BASE_EXPORT CheckError {
   std::unique_ptr<LogMessage> log_message_;
 };
 
-// Used for NOTREACHED(), its destructor is importantly [[noreturn]].
-class BASE_EXPORT CheckNoreturnError : public CheckError {
- public:
-  [[noreturn]] NOMERGE NOINLINE NOT_TAIL_CALLED ~CheckNoreturnError();
-
-  static CheckNoreturnError Check(
-      const char* condition,
-      const base::Location& location = base::Location::Current());
-  // Takes ownership over (free()s after using) `log_message_str`, for use with
-  // CHECK_op macros.
-  static CheckNoreturnError CheckOp(
-      char* log_message_str,
-      const base::Location& location = base::Location::Current());
-
-  static CheckNoreturnError PCheck(
-      const char* condition,
-      const base::Location& location = base::Location::Current());
-  static CheckNoreturnError PCheck(
-      const base::Location& location = base::Location::Current());
-
- private:
-  using CheckError::CheckError;
-};
-
-// Used for NOTREACHED(base::NotFatalUntil) and DUMP_WILL_BE_NOTREACHED().
+// Used for NOTREACHED(base::NotFatalUntil).
+// TODO(pbos): Reconsider the name of this + NotReachedNoreturnError to be less
+// confusing.
 class BASE_EXPORT NotReachedError : public CheckError {
  public:
   static NotReachedError NotReached(
       base::NotFatalUntil fatal_milestone,
       const base::Location& location = base::Location::Current());
 
-  static NotReachedError DumpWillBeNotReached(
-      const base::Location& location = base::Location::Current());
-
   NOMERGE NOINLINE NOT_TAIL_CALLED ~NotReachedError();
 
  private:
@@ -246,7 +232,7 @@ class BASE_EXPORT NotReachedNoreturnError : public CheckError {
 #define CHECK_WILL_STREAM() true
 
 #define CHECK_INTERNAL_IMPL(cond) \
-  LOGGING_CHECK_FUNCTION_IMPL(::logging::CheckNoreturnError::Check(#cond), cond)
+  LOGGING_CHECK_FUNCTION_IMPL(::logging::CheckError::Check(#cond), cond)
 
 #endif
 
@@ -256,11 +242,10 @@ class BASE_EXPORT NotReachedNoreturnError : public CheckError {
               logging::CheckError::Check(#cond, __VA_ARGS__), cond))
 
 // Strip the conditional string based on CHECK_WILL_STREAM()
-#define PCHECK(cond)                                        \
-  LOGGING_CHECK_FUNCTION_IMPL(                              \
-      BASE_IF(CHECK_WILL_STREAM(),                          \
-              ::logging::CheckNoreturnError::PCheck(#cond), \
-              ::logging::CheckNoreturnError::PCheck()),     \
+#define PCHECK(cond)                                                     \
+  LOGGING_CHECK_FUNCTION_IMPL(                                           \
+      BASE_IF(CHECK_WILL_STREAM(), ::logging::CheckError::PCheck(#cond), \
+              ::logging::CheckError::PCheck()),                          \
       cond)
 
 #if DCHECK_IS_ON()
diff --git a/base/check_op.h b/base/check_op.h
index 76c3d7f12b..5c934ab1fa 100644
--- a/base/check_op.h
+++ b/base/check_op.h
@@ -184,9 +184,8 @@ BASE_EXPORT char* CreateCheckOpLogMessageString(const char* expr_str,
 
 #else
 
-#define CHECK_OP_INTERNAL_IMPL(name, op, val1, val2)                       \
-  CHECK_OP_FUNCTION_IMPL(::logging::CheckNoreturnError::CheckOp, name, op, \
-                         val1, val2)
+#define CHECK_OP_INTERNAL_IMPL(name, op, val1, val2) \
+  CHECK_OP_FUNCTION_IMPL(::logging::CheckError::CheckOp, name, op, val1, val2)
 
 #endif
 
diff --git a/base/check_unittest.cc b/base/check_unittest.cc
index ed8d7305c9..4d6aa14aa1 100644
--- a/base/check_unittest.cc
+++ b/base/check_unittest.cc
@@ -541,51 +541,20 @@ TEST(CheckDeathTest, OstreamVsToString) {
                CHECK_EQ(g, h));
 }
 
-TEST(CheckDeathTest, NotReached) {
-  // Expect to be CHECK fatal but with a different error message.
-  EXPECT_CHECK("NOTREACHED hit. foo", NOTREACHED() << "foo");
-}
-
-// These non-void functions are here to make sure that CHECK failures and
-// NOTREACHED() are properly annotated as [[noreturn]] by not requiring a return
-// statement.
+// This non-void function is here to make sure that NOTREACHED() is properly
+// annotated as [[noreturn]] and does not require a return statement.
 int NotReachedInFunction() {
   NOTREACHED();
   // No return statement here.
 }
 
-int CheckFailureInFunction() {
-  constexpr int kFalse = false;
-  CHECK(kFalse);
-
-  // No return statement here.
-}
-
-int PCheckFailureInFunction() {
-  constexpr int kFalse = false;
-  PCHECK(kFalse);
-
-  // No return statement here.
-}
-
-TEST(CheckDeathTest, CheckFailuresAreNoreturn) {
+TEST(CheckDeathTest, NotReached) {
+  // Expect to be CHECK fatal but with a different error message.
+  EXPECT_CHECK("NOTREACHED hit. foo", NOTREACHED() << "foo");
   // This call can't use EXPECT_CHECK as the NOTREACHED happens on a different
   // line.
   EXPECT_DEATH_IF_SUPPORTED(NotReachedInFunction(),
                             CHECK_WILL_STREAM() ? "NOTREACHED hit. " : "");
-
-  // This call can't use EXPECT_CHECK as the CHECK failure happens on a
-  // different line.
-  EXPECT_DEATH_IF_SUPPORTED(CheckFailureInFunction(),
-                            CHECK_WILL_STREAM() ? "Check failed: " : "");
-
-  // This call can't use EXPECT_CHECK as the PCHECK failure happens on a
-  // different line.
-  EXPECT_DEATH_IF_SUPPORTED(PCheckFailureInFunction(),
-                            CHECK_WILL_STREAM() ? "Check failed: " : "");
-
-  // TODO(crbug.com/40122554): Make sure CHECK_LT(1, 1) is [[noreturn]]. That
-  // doesn't work in the current developer build.
 }
 
 TEST(CheckDeathTest, DumpWillBeCheck) {
diff --git a/base/notreached.h b/base/notreached.h
index d8f5b9d211..1fef9ab3d7 100644
--- a/base/notreached.h
+++ b/base/notreached.h
@@ -43,7 +43,7 @@ namespace logging {
 // non-fatally dump in official builds if ever hit. See DUMP_WILL_BE_CHECK for
 // suggested usage.
 #define DUMP_WILL_BE_NOTREACHED() \
-  ::logging::NotReachedError::DumpWillBeNotReached()
+  ::logging::CheckError::DumpWillBeNotReachedNoreturn()
 
 }  // namespace logging
 
-- 
2.47.0.338.g60cca15819-goog

