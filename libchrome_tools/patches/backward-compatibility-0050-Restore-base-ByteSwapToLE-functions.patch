From 28ec1e924e7cd7d5766e42e675b51a3ef972ee4f Mon Sep 17 00:00:00 2001
From: Georg Neis <neis@chromium.org>
Date: Tue, 26 Mar 2024 06:51:16 +0000
Subject: [PATCH] Restore base::ByteSwapToLE* functions

They got removed in [1] but are still used by some libchrome clients.

[1]https://chromium-review.googlesource.com/c/chromium/src/+/5370942

Change-Id: Ibd51ccdeb877fe2347a232681f8242fdbbdd6367
---
 base/sys_byteorder.h           | 24 ++++++++++++++++++++++++
 base/sys_byteorder_unittest.cc | 27 +++++++++++++++++++++++++++
 2 files changed, 51 insertions(+)

diff --git a/base/sys_byteorder.h b/base/sys_byteorder.h
index 0157d83723..02de1f4e82 100644
--- a/base/sys_byteorder.h
+++ b/base/sys_byteorder.h
@@ -22,6 +22,30 @@
 
 namespace base {
 
+// Converts the bytes in |x| from host order (endianness) to little endian, and
+// returns the result.
+inline constexpr uint16_t ByteSwapToLE16(uint16_t x) {
+#if defined(ARCH_CPU_LITTLE_ENDIAN)
+  return x;
+#else
+  return numerics::ByteSwap(x);
+#endif
+}
+inline constexpr uint32_t ByteSwapToLE32(uint32_t x) {
+#if defined(ARCH_CPU_LITTLE_ENDIAN)
+  return x;
+#else
+  return numerics::ByteSwap(x);
+#endif
+}
+inline constexpr uint64_t ByteSwapToLE64(uint64_t x) {
+#if defined(ARCH_CPU_LITTLE_ENDIAN)
+  return x;
+#else
+  return numerics::ByteSwap(x);
+#endif
+}
+
 // Converts the bytes in |x| from network to host order (endianness), and
 // returns the result.
 inline constexpr uint16_t NetToHost16(uint16_t x) {
diff --git a/base/sys_byteorder_unittest.cc b/base/sys_byteorder_unittest.cc
index 095f0562b5..fe9bf2671d 100644
--- a/base/sys_byteorder_unittest.cc
+++ b/base/sys_byteorder_unittest.cc
@@ -20,6 +20,33 @@ const uint64_t k64BitSwappedTestData = 0x11223344ddccbbaa;
 
 }  // namespace
 
+TEST(ByteOrderTest, ByteSwapToLE16) {
+  uint16_t le = base::ByteSwapToLE16(k16BitTestData);
+#if defined(ARCH_CPU_LITTLE_ENDIAN)
+  EXPECT_EQ(k16BitTestData, le);
+#else
+  EXPECT_EQ(k16BitSwappedTestData, le);
+#endif
+}
+
+TEST(ByteOrderTest, ByteSwapToLE32) {
+  uint32_t le = base::ByteSwapToLE32(k32BitTestData);
+#if defined(ARCH_CPU_LITTLE_ENDIAN)
+  EXPECT_EQ(k32BitTestData, le);
+#else
+  EXPECT_EQ(k32BitSwappedTestData, le);
+#endif
+}
+
+TEST(ByteOrderTest, ByteSwapToLE64) {
+  uint64_t le = base::ByteSwapToLE64(k64BitTestData);
+#if defined(ARCH_CPU_LITTLE_ENDIAN)
+  EXPECT_EQ(k64BitTestData, le);
+#else
+  EXPECT_EQ(k64BitSwappedTestData, le);
+#endif
+}
+
 TEST(ByteOrderTest, NetToHost16) {
   uint16_t h = base::NetToHost16(k16BitTestData);
 #if defined(ARCH_CPU_LITTLE_ENDIAN)
-- 
2.44.0.396.g6e790dbe36-goog

