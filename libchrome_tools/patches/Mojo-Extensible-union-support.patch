From 8b96dc22b0ec3f3eee74b48f7f12fdab07e22f1c Mon Sep 17 00:00:00 2001
From: Ken Rockot <rockot@google.com>
Date: Fri, 15 Apr 2022 16:02:32 -0700
Subject: [PATCH 3/3] Mojo: [Extensible] union support

Adds support for the [Extensible] attribute on mojom union definitions.
An extensible union must specify exactly one [Default] field of nullable
or scalar type.

When an extensible union is deserialized with an unknown tag value, it
is no longer a validation error. Instead the union takes on the default
(null or zero) value of the default field.

NOTE: Presubmit bypassed because stability checker parses the mojom
before and after a change, but the mojom before this change can no
longer be parsed without failure due to the new constraints on
[Extensible] unions.

NOPRESUBMIT=True

Bug: 1261313
Change-Id: I61af2ab6074bfb9d17f79f08b9c052eba848c531
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3582787
Reviewed-by: Daniel Cheng <dcheng@chromium.org>
Commit-Queue: Ken Rockot <rockot@google.com>
Cr-Commit-Position: refs/heads/main@{#993092}


CrOS-Libchrome-Original-Commit: 7118b07be37669a56e02526de9fd42855d9530d1
---
 .../cpp/bindings/tests/union_unittest.cc      | 66 +++++++++++++++++
 .../bindings/tests/union_unittest.test-mojom  | 72 +++++++++++++++++++
 mojo/public/tools/bindings/README.md          | 37 ++++++----
 .../cpp_templates/union_definition.tmpl       |  4 ++
 .../union_traits_definition.tmpl              |  5 ++
 .../tools/mojom/mojom/generate/module.py      | 20 +++++-
 .../tools/mojom/mojom/generate/translate.py   | 14 ++++
 mojo/public/tools/mojom/union_unittest.py     | 44 ++++++++++++
 8 files changed, 249 insertions(+), 13 deletions(-)
 create mode 100644 mojo/public/cpp/bindings/tests/union_unittest.test-mojom
 create mode 100644 mojo/public/tools/mojom/union_unittest.py

diff --git a/mojo/public/cpp/bindings/tests/union_unittest.cc b/mojo/public/cpp/bindings/tests/union_unittest.cc
index 7ffe019b02..9cd2b90a36 100644
--- a/mojo/public/cpp/bindings/tests/union_unittest.cc
+++ b/mojo/public/cpp/bindings/tests/union_unittest.cc
@@ -19,6 +19,7 @@
 #include "mojo/public/cpp/bindings/message.h"
 #include "mojo/public/cpp/bindings/receiver.h"
 #include "mojo/public/cpp/bindings/remote.h"
+#include "mojo/public/cpp/bindings/tests/union_unittest.test-mojom.h"
 #include "mojo/public/cpp/test_support/test_utils.h"
 #include "mojo/public/interfaces/bindings/tests/test_structs.mojom.h"
 #include "mojo/public/interfaces/bindings/tests/test_unions.mojom.h"
@@ -26,6 +27,7 @@
 
 namespace mojo {
 namespace test {
+namespace union_unittest {
 
 template <typename InputType, typename DataType>
 size_t SerializeStruct(InputType& input,
@@ -1143,5 +1145,69 @@ TEST(UnionTest, InlineUnionAllocationWithNonPODFirstField) {
   u = UnionWithStringForFirstField::NewS("hey");
 }
 
+class ExtensibleTestUnionExchange
+    : public mojom::ExtensibleTestUnionExchangeV1 {
+ public:
+  explicit ExtensibleTestUnionExchange(
+      PendingReceiver<mojom::ExtensibleTestUnionExchangeV2> receiver) {
+    // Coerce the V2 interface receiver into a V1 receiver. This is OK per
+    // comments on the ExtensibleTestUnionExchangeV2 mojom definition.
+    receiver_.Bind(PendingReceiver<mojom::ExtensibleTestUnionExchangeV1>(
+        receiver.PassPipe()));
+  }
+
+  // mojom::ExtensibleTestUnionExchangeV1:
+  void ExchangeWithBoolDefault(
+      mojom::ExtensibleTestUnionV1WithBoolDefaultPtr u,
+      ExchangeWithBoolDefaultCallback callback) override {
+    std::move(callback).Run(std::move(u));
+  }
+  void ExchangeWithIntDefault(
+      mojom::ExtensibleTestUnionV1WithIntDefaultPtr u,
+      ExchangeWithIntDefaultCallback callback) override {
+    std::move(callback).Run(std::move(u));
+  }
+  void ExchangeWithNullableDefault(
+      mojom::ExtensibleTestUnionV1WithNullableDefaultPtr u,
+      ExchangeWithNullableDefaultCallback callback) override {
+    std::move(callback).Run(std::move(u));
+  }
+
+ private:
+  Receiver<mojom::ExtensibleTestUnionExchangeV1> receiver_{this};
+};
+
+TEST(UnionTest, ExtensibleUnion) {
+  base::test::SingleThreadTaskEnvironment task_environment;
+  Remote<mojom::ExtensibleTestUnionExchangeV2> remote;
+  ExtensibleTestUnionExchange exchange(remote.BindNewPipeAndPassReceiver());
+
+  {
+    mojom::ExtensibleTestUnionV1WithBoolDefaultPtr result;
+    remote->ExchangeWithBoolDefault(mojom::TestUnionV2::NewBlob({}), &result);
+    ASSERT_TRUE(result);
+    EXPECT_TRUE(result->is_flag());
+    EXPECT_FALSE(result->get_flag());
+  }
+
+  {
+    mojom::ExtensibleTestUnionV1WithIntDefaultPtr result;
+    remote->ExchangeWithIntDefault(mojom::TestUnionV2::NewBlob({}), &result);
+    ASSERT_TRUE(result);
+    EXPECT_TRUE(result->is_integer());
+    EXPECT_EQ(0u, result->get_integer());
+  }
+
+  {
+    mojom::ExtensibleTestUnionV1WithNullableDefaultPtr result;
+    remote->ExchangeWithNullableDefault(mojom::TestUnionV2::NewBlob({}),
+                                        &result);
+    ASSERT_TRUE(result);
+    EXPECT_TRUE(result->is_name());
+    EXPECT_FALSE(result->get_name().has_value());
+  }
+}
+
+}  // namespace union_unittest
 }  // namespace test
 }  // namespace mojo
diff --git a/mojo/public/cpp/bindings/tests/union_unittest.test-mojom b/mojo/public/cpp/bindings/tests/union_unittest.test-mojom
new file mode 100644
index 0000000000..2fe7555cef
--- /dev/null
+++ b/mojo/public/cpp/bindings/tests/union_unittest.test-mojom
@@ -0,0 +1,72 @@
+// Copyright 2022 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+module mojo.test.union_unittest.mojom;
+
+union TestUnionV1 {
+  bool flag@0;
+  uint32 integer@1;
+  string? name@2;
+};
+
+// Equivalent to TestUnionV1, but extensible with the bool field as a default.
+[Extensible]
+union ExtensibleTestUnionV1WithBoolDefault {
+  [Default] bool flag@0;
+  uint32 integer@1;
+  string? name@2;
+};
+
+// Equivalent to TestUnionV1, but extensible with the uint32 field as a default.
+[Extensible]
+union ExtensibleTestUnionV1WithIntDefault {
+  bool flag@0;
+  [Default] uint32 integer@1;
+  string? name@2;
+};
+
+// Equivalent to TestUnionV1, but extensible with the nullable string field as a
+// default.
+[Extensible]
+union ExtensibleTestUnionV1WithNullableDefault {
+  bool flag@0;
+  uint32 integer@1;
+  [Default] string? name@2;
+};
+
+// An equivalent to the above TestUnionV1, but with an additional field which is
+// unknown to the original.
+union TestUnionV2 {
+  bool flag@0;
+  uint32 integer@1;
+  string? name@2;
+  array<uint8> blob@3;
+};
+
+// An interface used to reflect extensible variants of TestUnionV1.
+interface ExtensibleTestUnionExchangeV1 {
+  [Sync] ExchangeWithBoolDefault@0(ExtensibleTestUnionV1WithBoolDefault u)
+      => (ExtensibleTestUnionV1WithBoolDefault u);
+  [Sync] ExchangeWithIntDefault@1(ExtensibleTestUnionV1WithIntDefault u)
+      => (ExtensibleTestUnionV1WithIntDefault u);
+  [Sync] ExchangeWithNullableDefault@2(
+      ExtensibleTestUnionV1WithNullableDefault u)
+      => (ExtensibleTestUnionV1WithNullableDefault u);
+};
+
+// An interface used to reflect TestUnionV2 values back as one of the various
+// extensible TestUnionV1 variants. For tests, we use a Remote for this
+// interface to communicate with a Receiver for the above interface.
+//
+// For such tests to provide useful coverage, these interfaces must be
+// identical, except that outgoing references to ExtensibleTestUnionV1* types in
+// the above interface are replaced with references to TestUnionV2 here.
+interface ExtensibleTestUnionExchangeV2 {
+  [Sync] ExchangeWithBoolDefault@0(TestUnionV2 u)
+      => (ExtensibleTestUnionV1WithBoolDefault u);
+  [Sync] ExchangeWithIntDefault@1(TestUnionV2 u)
+      => (ExtensibleTestUnionV1WithIntDefault u);
+  [Sync] ExchangeWithNullableDefault@2(TestUnionV2 u)
+      => (ExtensibleTestUnionV1WithNullableDefault u);
+};
diff --git a/mojo/public/tools/bindings/README.md b/mojo/public/tools/bindings/README.md
index 36afb677d1..4ca7693fc9 100644
--- a/mojo/public/tools/bindings/README.md
+++ b/mojo/public/tools/bindings/README.md
@@ -399,20 +399,33 @@ interesting attributes supported today.
   extreme caution, because it can lead to deadlocks otherwise.
 
 * **`[Default]`**:
-  The `Default` attribute may be used to specify an enumerator value that
-  will be used if an `Extensible` enumeration does not deserialize to a known
-  value on the receiver side, i.e. the sender is using a newer version of the
-  enum. This allows unknown values to be mapped to a well-defined value that can
-  be appropriately handled.
+  The `Default` attribute may be used to specify an enumerator value or union
+  field that will be used if an `Extensible` enumeration or union does not
+  deserialize to a known value on the receiver side, i.e. the sender is using a
+  newer version of the enum or union. This allows unknown values to be mapped to
+  a well-defined value that can be appropriately handled.
 
-* **`[Extensible]`**:
-  The `Extensible` attribute may be specified for any enum definition. This
-  essentially disables builtin range validation when receiving values of the
-  enum type in a message, allowing older bindings to tolerate unrecognized
-  values from newer versions of the enum.
+  Note: The `Default` field for a union must be of nullable or integral type.
+  When a union is defaulted to this field, the field takes on the default value
+  for its type: null for nullable types, and zero/false for integral types.
 
-  Note: in the future, an `Extensible` enumeration will require that a `Default`
-  enumerator value also be specified.
+* **`[Extensible]`**:
+  The `Extensible` attribute may be specified for any enum or union definition.
+  For enums, this essentially disables builtin range validation when receiving
+  values of the enum type in a message, allowing older bindings to tolerate
+  unrecognized values from newer versions of the enum.
+
+  If an enum value within an extensible enum definition is affixed with the
+  `Default` attribute, out-of-range values for the enum will deserialize to that
+  default value. Only one enum value may be designated as the `Default`.
+
+  Similarly, a union marked `Extensible` will deserialize to its `Default` field
+  when an unrecognized field is received. Extensible unions MUST specify exactly
+  one `Default` field, and the field must be of nullable or integral type. When
+  defaulted to this field, the value is always null/zero/false as appropriate.
+
+  Note: in the future, an `Extensible` enumeration will also REQUIRE that a
+  `Default` value be specified, so all new extensible enums should specify one.
 
 * **`[Native]`**:
   The `Native` attribute may be specified for an empty struct declaration to
diff --git a/mojo/public/tools/bindings/generators/cpp_templates/union_definition.tmpl b/mojo/public/tools/bindings/generators/cpp_templates/union_definition.tmpl
index feff2298f0..8924feb8cf 100644
--- a/mojo/public/tools/bindings/generators/cpp_templates/union_definition.tmpl
+++ b/mojo/public/tools/bindings/generators/cpp_templates/union_definition.tmpl
@@ -37,11 +37,15 @@ bool {{class_name}}::Validate(
     }
 {%- endfor %}
     default: {
+{%  if union.extensible %}
+      return true;
+{%- else %}
       ReportValidationError(
           validation_context,
           mojo::internal::VALIDATION_ERROR_UNKNOWN_UNION_TAG,
           "unknown tag in {{union.name}}");
       return false;
+{%- endif %}
     }
   }
 }
diff --git a/mojo/public/tools/bindings/generators/cpp_templates/union_traits_definition.tmpl b/mojo/public/tools/bindings/generators/cpp_templates/union_traits_definition.tmpl
index f402142460..bcabf7b64e 100644
--- a/mojo/public/tools/bindings/generators/cpp_templates/union_traits_definition.tmpl
+++ b/mojo/public/tools/bindings/generators/cpp_templates/union_traits_definition.tmpl
@@ -41,7 +41,12 @@ bool UnionTraits<{{mojom_type}}::DataView, {{mojom_type}}Ptr>::Read(
     }
 {%- endfor %}
     default:
+{%  if union.extensible %}
+      *output = UnionType::New{{union.default_field.name|under_to_camel}}({});
+      return true;
+{%- else %}
       return false;
+{%- endif %}
   }
   return true;
 }
diff --git a/mojo/public/tools/mojom/mojom/generate/module.py b/mojo/public/tools/mojom/mojom/generate/module.py
index 2fde9fcd75..46a848411a 100644
--- a/mojo/public/tools/mojom/mojom/generate/module.py
+++ b/mojo/public/tools/mojom/mojom/generate/module.py
@@ -415,7 +415,18 @@ class StructField(Field):
 
 
 class UnionField(Field):
-  pass
+  def __init__(self,
+               mojom_name=None,
+               kind=None,
+               ordinal=None,
+               default=None,
+               attributes=None):
+    Field.__init__(self, mojom_name, kind, ordinal, default, attributes)
+
+  @property
+  def is_default(self):
+    return self.attributes.get(ATTRIBUTE_DEFAULT, False) \
+        if self.attributes else False
 
 
 def _IsFieldBackwardCompatible(new_field, old_field, checker):
@@ -607,6 +618,7 @@ class Union(ReferenceKind):
   ReferenceKind.AddSharedProperty('name')
   ReferenceKind.AddSharedProperty('fields')
   ReferenceKind.AddSharedProperty('attributes')
+  ReferenceKind.AddSharedProperty('default_field')
 
   def __init__(self, mojom_name=None, module=None, attributes=None):
     if mojom_name is not None:
@@ -618,6 +630,7 @@ class Union(ReferenceKind):
     self.name = None
     self.fields = []
     self.attributes = attributes
+    self.default_field = None
 
   def Repr(self, as_ref=True):
     if as_ref:
@@ -685,6 +698,11 @@ class Union(ReferenceKind):
 
     return True
 
+  @property
+  def extensible(self):
+    return self.attributes.get(ATTRIBUTE_EXTENSIBLE, False) \
+        if self.attributes else False
+
   @property
   def stable(self):
     return self.attributes.get(ATTRIBUTE_STABLE, False) \
diff --git a/mojo/public/tools/mojom/mojom/generate/translate.py b/mojo/public/tools/mojom/mojom/generate/translate.py
index 78ee70630b..3b42f832e2 100644
--- a/mojo/public/tools/mojom/mojom/generate/translate.py
+++ b/mojo/public/tools/mojom/mojom/generate/translate.py
@@ -447,6 +447,11 @@ def _UnionField(module, parsed_field, union):
   field.ordinal = parsed_field.ordinal.value if parsed_field.ordinal else None
   field.default = None
   field.attributes = _AttributeListToDict(module, parsed_field.attribute_list)
+  if field.is_default and not mojom.IsNullableKind(field.kind) and \
+     not mojom.IsIntegralKind(field.kind):
+    raise Exception(
+        '[Default] field for union %s must be nullable or integral type.' %
+        union.mojom_name)
   return field
 
 
@@ -855,8 +860,17 @@ def _Module(tree, path, imports):
     union.fields = list(
         map(lambda field: _UnionField(module, field, union), union.fields_data))
     _AssignDefaultOrdinals(union.fields)
+    for field in union.fields:
+      if field.is_default:
+        if union.default_field is not None:
+          raise Exception('Multiple [Default] fields in union %s.' %
+                          union.mojom_name)
+        union.default_field = field
     del union.fields_data
     all_defined_kinds[union.spec] = union
+    if union.extensible and union.default_field is None:
+      raise Exception('Extensible union %s must specify a [Default] field' %
+                      union.mojom_name)
 
   for interface in module.interfaces:
     interface.methods = list(
diff --git a/mojo/public/tools/mojom/union_unittest.py b/mojo/public/tools/mojom/union_unittest.py
new file mode 100644
index 0000000000..e0cee1bd54
--- /dev/null
+++ b/mojo/public/tools/mojom/union_unittest.py
@@ -0,0 +1,44 @@
+# Copyright 2022 The Chromium Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+from mojom_parser_test_case import MojomParserTestCase
+
+
+class UnionTest(MojomParserTestCase):
+  """Tests union parsing behavior."""
+
+  def testExtensibleMustHaveDefault(self):
+    """Verifies that extensible unions must have a default field."""
+    mojom = 'foo.mojom'
+    self.WriteFile(mojom, 'module foo; [Extensible] union U { bool x; };')
+    with self.assertRaisesRegexp(Exception, 'must specify a \[Default\]'):
+      self.ParseMojoms([mojom])
+
+  def testExtensibleSingleDefault(self):
+    """Verifies that extensible unions must not have multiple default fields."""
+    mojom = 'foo.mojom'
+    self.WriteFile(
+        mojom, """\
+               module foo;
+               [Extensible] union U {
+                 [Default] bool x;
+                 [Default] bool y;
+               };
+               """)
+    with self.assertRaisesRegexp(Exception, 'Multiple \[Default\] fields'):
+      self.ParseMojoms([mojom])
+
+  def testExtensibleDefaultTypeValid(self):
+    """Verifies that an extensible union's default field must be nullable or
+    integral type."""
+    mojom = 'foo.mojom'
+    self.WriteFile(
+        mojom, """\
+               module foo;
+               [Extensible] union U {
+                 [Default] handle<message_pipe> p;
+               };
+               """)
+    with self.assertRaisesRegexp(Exception, 'must be nullable or integral'):
+      self.ParseMojoms([mojom])
-- 
2.31.0

