From 6a5c5a3c2912b5ca5de5b1706fa101d19664f079 Mon Sep 17 00:00:00 2001
From: Jae Hoon Kim <kimjae@chromium.org>
Date: Wed, 24 May 2023 08:25:13 +0000
Subject: [PATCH] Restore base::Value::[Set|Find]{Type}[Key|Path]

This restores base::Value::[Set|Find]{String, List}[Key|Path] for
packages which are still using the deprecated functions.

---
 base/values.cc | 96 ++++++++++++++++++++++++++++++++++++++++++++++++++
 base/values.h  | 78 ++++++++++++++++++++++++++++++++++++++++
 2 files changed, 174 insertions(+)

diff --git a/base/values.cc b/base/values.cc
index 9b25c55d63..e750e119a2 100644
--- a/base/values.cc
+++ b/base/values.cc
@@ -1152,10 +1152,106 @@ bool operator>=(const Value::List& lhs, const Value::List& rhs) {
   return !(lhs < rhs);
 }
 
+absl::optional<int> Value::FindIntKey(StringPiece key) const {
+  return GetDict().FindInt(key);
+}
+
+const std::string* Value::FindStringKey(StringPiece key) const {
+  return GetDict().FindString(key);
+}
+
+std::string* Value::FindStringKey(StringPiece key) {
+  return GetDict().FindString(key);
+}
+
+const Value* Value::FindListKey(StringPiece key) const {
+  const Value* result = GetDict().Find(key);
+  if (!result || result->type() != Type::LIST) {
+    return nullptr;
+  }
+  return result;
+}
+
+Value* Value::FindListKey(StringPiece key) {
+  return const_cast<Value*>(std::as_const(*this).FindListKey(key));
+}
+
 Value* Value::SetKey(StringPiece key, Value&& value) {
   return GetDict().Set(key, std::move(value));
 }
 
+Value* Value::SetStringKey(StringPiece key, StringPiece value) {
+  return GetDict().Set(key, value);
+}
+
+Value* Value::SetStringKey(StringPiece key, StringPiece16 value) {
+  return GetDict().Set(key, value);
+}
+
+Value* Value::SetStringKey(StringPiece key, const char* value) {
+  return GetDict().Set(key, value);
+}
+
+Value* Value::SetStringKey(StringPiece key, std::string&& value) {
+  return GetDict().Set(key, std::move(value));
+}
+
+bool Value::RemoveKey(StringPiece key) {
+  return GetDict().Remove(key);
+}
+
+Value* Value::FindPath(StringPiece path) {
+  return GetDict().FindByDottedPath(path);
+}
+
+const Value* Value::FindPath(StringPiece path) const {
+  return GetDict().FindByDottedPath(path);
+}
+
+absl::optional<bool> Value::FindBoolPath(StringPiece path) const {
+  return GetDict().FindBoolByDottedPath(path);
+}
+
+absl::optional<int> Value::FindIntPath(StringPiece path) const {
+  return GetDict().FindIntByDottedPath(path);
+}
+
+absl::optional<double> Value::FindDoublePath(StringPiece path) const {
+  return GetDict().FindDoubleByDottedPath(path);
+}
+
+const std::string* Value::FindStringPath(StringPiece path) const {
+  return GetDict().FindStringByDottedPath(path);
+}
+
+std::string* Value::FindStringPath(StringPiece path) {
+  return GetDict().FindStringByDottedPath(path);
+}
+
+const Value* Value::FindDictPath(StringPiece path) const {
+  const Value* cur = GetDict().FindByDottedPath(path);
+  if (!cur || cur->type() != Type::DICT) {
+    return nullptr;
+  }
+  return cur;
+}
+
+Value* Value::FindDictPath(StringPiece path) {
+  return const_cast<Value*>(std::as_const(*this).FindDictPath(path));
+}
+
+const Value* Value::FindListPath(StringPiece path) const {
+  const Value* cur = GetDict().FindByDottedPath(path);
+  if (!cur || cur->type() != Type::LIST) {
+    return nullptr;
+  }
+  return cur;
+}
+
+Value* Value::FindListPath(StringPiece path) {
+  return const_cast<Value*>(std::as_const(*this).FindListPath(path));
+}
+
 bool operator==(const Value& lhs, const Value& rhs) {
   return lhs.data_ == rhs.data_;
 }
diff --git a/base/values.h b/base/values.h
index ca91b5d840..5f04df35b3 100644
--- a/base/values.h
+++ b/base/values.h
@@ -757,6 +757,20 @@ class BASE_EXPORT GSL_OWNER Value {
   };
 
   // ===== DEPRECATED methods that require `type() == Type::DICT` =====
+
+  // These are convenience forms of `FindKey`. They return `absl::nullopt` or
+  // `nullptr` if the value is not found or doesn't have the type specified in
+  // the function's name.
+  //
+  // DEPRECATED: prefer `Value::Dict::FindInt()`.
+  absl::optional<int> FindIntKey(StringPiece key) const;
+  // DEPRECATED: prefer `Value::Dict::FindString()`.
+  const std::string* FindStringKey(StringPiece key) const;
+  std::string* FindStringKey(StringPiece key);
+  // DEPRECATED: prefer `Value::Dict::FindList()`.
+  const Value* FindListKey(StringPiece key) const;
+  Value* FindListKey(StringPiece key);
+
   // `SetKey` looks up `key` in the underlying dictionary and sets the mapped
   // value to `value`. If `key` could not be found, a new element is inserted.
   // A pointer to the modified item is returned.
@@ -766,6 +780,70 @@ class BASE_EXPORT GSL_OWNER Value {
   // DEPRECATED: Prefer `Value::Dict::Set()`.
   Value* SetKey(StringPiece key, Value&& value);
 
+  // `Set<Type>Key` looks up `key` in the underlying dictionary and associates a
+  // corresponding Value() constructed from the second parameter. Compared to
+  // `SetKey()`, this avoids un-necessary temporary `Value()` creation, as well
+  // ambiguities in the value type.
+  //
+  // DEPRECATED: Prefer `Value::Dict::Set()`.
+  Value* SetStringKey(StringPiece key, StringPiece val);
+  // DEPRECATED: Prefer `Value::Dict::Set()`.
+  Value* SetStringKey(StringPiece key, StringPiece16 val);
+  // DEPRECATED: Prefer `Value::Dict::Set()`.
+  Value* SetStringKey(StringPiece key, const char* val);
+  // DEPRECATED: Prefer `Value::Dict::Set()`.
+  Value* SetStringKey(StringPiece key, std::string&& val);
+
+  // This attempts to remove the value associated with `key`. In case of
+  // failure, e.g. the key does not exist, false is returned and the underlying
+  // dictionary is not changed. In case of success, `key` is deleted from the
+  // dictionary and the method returns true.
+  //
+  // Deprecated: Prefer `Value::Dict::Remove()`.
+  bool RemoveKey(StringPiece key);
+
+  // Searches a hierarchy of dictionary values for a given value. If a path
+  // of dictionaries exist, returns the item at that path. If any of the path
+  // components do not exist or if any but the last path components are not
+  // dictionaries, returns nullptr. The type of the leaf Value is not checked.
+  //
+  // This version takes a StringPiece for the path, using dots as separators.
+  //
+  // DEPRECATED: Prefer `Value::Dict::FindByDottedPath()`.
+  Value* FindPath(StringPiece path);
+  const Value* FindPath(StringPiece path) const;
+
+  // Convenience accessors used when the expected type of a value is known.
+  // Similar to Find<Type>Key() but accepts paths instead of keys.
+  //
+  // DEPRECATED: Use `Value::Dict::FindBoolByDottedPath()`, or
+  // `Value::Dict::FindBool()` if the path only has one component, i.e. has no
+  // dots.
+  absl::optional<bool> FindBoolPath(StringPiece path) const;
+  // DEPRECATED: Use `Value::Dict::FindIntByDottedPath()`, or
+  // `Value::Dict::FindInt()` if the path only has one component, i.e. has no
+  // dots.
+  absl::optional<int> FindIntPath(StringPiece path) const;
+  // DEPRECATED: Use `Value::Dict::FindDoubleByDottedPath()`, or
+  // `Value::Dict::FindDouble()` if the path only has one component, i.e. has no
+  // dots.
+  absl::optional<double> FindDoublePath(StringPiece path) const;
+  // DEPRECATED: Use `Value::Dict::FindStringByDottedPath()`, or
+  // `Value::Dict::FindString()` if the path only has one component, i.e. has no
+  // dots.
+  const std::string* FindStringPath(StringPiece path) const;
+  std::string* FindStringPath(StringPiece path);
+  // DEPRECATED: Use `Value::Dict::FindDictByDottedPath()`, or
+  // `Value::Dict::FindDict()` if the path only has one component, i.e. has no
+  // dots.
+  Value* FindDictPath(StringPiece path);
+  const Value* FindDictPath(StringPiece path) const;
+  // DEPRECATED: Use `Value::Dict::FindListByDottedPath()`, or
+  // `Value::Dict::FindList()` if the path only has one component, i.e. has no
+  // dots.
+  Value* FindListPath(StringPiece path);
+  const Value* FindListPath(StringPiece path) const;
+
   // Note: Do not add more types. See the file-level comment above for why.
 
   // Comparison operators so that Values can easily be used with standard
-- 
2.40.1.698.g37aff9b760-goog

