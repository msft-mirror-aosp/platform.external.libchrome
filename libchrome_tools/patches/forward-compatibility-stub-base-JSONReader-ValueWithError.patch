From 00af2e720b7cbf20ae0e829506ce00157add5a79 Mon Sep 17 00:00:00 2001
From: Grace Cham <hscham@chromium.org>
Date: Fri, 22 Jul 2022 23:42:11 +0900
Subject: [PATCH] forward compatibility: stub base::JSONReader::ValueWithError

With base::expected-like functions.

r1017954 (crrev.com/c/3696611) changed return type of
base::JSONReader::ReturnValueWithError from the struct
base::JSONReader::ValueWithError to base::expected<base::Value, Error>.

To migrate callsites to use the new type, add functions to
ValueWithError so that it could be used as if it is the latter.
For example, add */-> operators to dereference a ValueWithError instance
into the actual base::Value object contained in the absl::optional
|value| (after checking it is not a nullopt).
Also, use value_with_error.error().{message,line,column} instead of
value_with_error.error_{message,line,column}, respectively.

Change-Id: I5f1ca91a30ee8fe1b56d4b92109926dc1eea9d7f
---
 base/json/json_reader.cc | 11 +++++++++
 base/json/json_reader.h  | 50 ++++++++++++++++++++++++++++++++++++++++
 2 files changed, 61 insertions(+)

diff --git a/base/json/json_reader.cc b/base/json/json_reader.cc
index ce986df7d8..2334eb1ab0 100644
--- a/base/json/json_reader.cc
+++ b/base/json/json_reader.cc
@@ -46,6 +46,9 @@ base::JSONReader::ValueWithError DecodeJSONInRust(const base::StringPiece& json,
     ret.value.reset();
     ret.error_line = error_line;
     ret.error_column = error_column;
+    ret.error.line = error_line;
+    ret.error.column = error_column;
+    ret.error.message = ret.error_message;
   }
   return ret;
 }
@@ -54,6 +57,14 @@ base::JSONReader::ValueWithError DecodeJSONInRust(const base::StringPiece& json,
 
 #endif  // BUILDFLAG(BUILD_RUST_JSON_PARSER)
 
+JSONReader::Error::Error() = default;
+
+JSONReader::Error::Error(Error&& other) = default;
+
+JSONReader::Error::~Error() = default;
+
+JSONReader::Error& JSONReader::Error::operator=(Error&& other) = default;
+
 JSONReader::ValueWithError::ValueWithError() = default;
 
 JSONReader::ValueWithError::ValueWithError(ValueWithError&& other) = default;
diff --git a/base/json/json_reader.h b/base/json/json_reader.h
index 84b303d78d..b0d58a50b8 100644
--- a/base/json/json_reader.h
+++ b/base/json/json_reader.h
@@ -86,6 +86,21 @@ enum JSONParserOptions {
 
 class BASE_EXPORT JSONReader {
  public:
+  struct BASE_EXPORT Error {
+    Error();
+    Error(Error&& other);
+    Error& operator=(Error&& other);
+
+    Error(const Error&) = delete;
+    Error& operator=(const Error&) = delete;
+
+    ~Error();
+
+    std::string message;
+    int line = 0;
+    int column = 0;
+  };
+
   struct BASE_EXPORT ValueWithError {
     ValueWithError();
     ValueWithError(ValueWithError&& other);
@@ -98,11 +113,46 @@ class BASE_EXPORT JSONReader {
 
     absl::optional<Value> value;
 
+    constexpr Error& error() {
+      CHECK(!value);
+      return error_;
+    }
+
+    constexpr bool has_value() const noexcept { return value.has_value(); }
+
+    constexpr Value* operator->() noexcept {
+      CHECK(value);
+      return std::addressof(*value);
+    }
+    constexpr const Value* operator->() const noexcept {
+      CHECK(value);
+      return std::addressof(*value);
+    }
+
+    constexpr Value& operator*() & noexcept {
+      CHECK(value);
+      return *value;
+    }
+    constexpr const Value& operator*() const& noexcept {
+      CHECK(value);
+      return *value;
+    }
+    constexpr Value&& operator*() && noexcept {
+      CHECK(value);
+      return std::move(*value);
+    }
+    constexpr const Value&& operator*() const&& noexcept {
+      CHECK(value);
+      return std::move(*value);
+    }
+
     // Contains default values if |value| exists, or the error status if |value|
     // is absl::nullopt.
     std::string error_message;
     int error_line = 0;
     int error_column = 0;
+
+    Error error_;
   };
 
   // This class contains only static methods.
-- 
2.37.1.359.gd136c6c3e2-goog

