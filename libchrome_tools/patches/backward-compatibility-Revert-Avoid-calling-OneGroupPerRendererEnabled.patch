From 687031e484b315aa0ccf447e36376e8fbd95ae26 Mon Sep 17 00:00:00 2001
From: Grace Cham <hscham@chromium.org>
Date: Mon, 12 Sep 2022 17:36:37 +0900
Subject: [PATCH 2/3] Revert "Avoid calling OneGroupPerRendererEnabled where
 blocking is not allowed"

This reverts commit 8545891a4b0e6b6bec131471af786fc24c54998d.
---
 base/process/process.h           |  6 ++++--
 base/process/process_linux.cc    | 13 +++----------
 base/process/process_unittest.cc | 12 ++++++------
 3 files changed, 13 insertions(+), 18 deletions(-)

diff --git a/base/process/process.h b/base/process/process.h
index 2e112b577c6a..619374c01101 100644
--- a/base/process/process.h
+++ b/base/process/process.h
@@ -229,8 +229,10 @@ class BASE_EXPORT Process {
 #endif
 
 #if BUILDFLAG(IS_CHROMEOS)
-  // Exposes OneGroupPerRendererEnabled() to unit tests.
-  static bool OneGroupPerRendererEnabledForTesting();
+  // Returns true if the 'OneGroupPerRenderer' feature is enabled. The feature
+  // is enabled if the kOneGroupPerRenderer feature flag is enabled and the
+  // system supports the chrome cgroups.
+  static bool OneGroupPerRendererEnabled();
 
   // If OneGroupPerRenderer is enabled, runs at process startup to clean up
   // any stale cgroups that were left behind from any unclean exits of the
diff --git a/base/process/process_linux.cc b/base/process/process_linux.cc
index eae3a21094b1..3d916bd3e57d 100644
--- a/base/process/process_linux.cc
+++ b/base/process/process_linux.cc
@@ -148,13 +148,6 @@ struct CGroups {
   }
 };
 
-// Returns true if the 'OneGroupPerRenderer' feature is enabled. The feature
-// is enabled if the kOneGroupPerRenderer feature flag is enabled and the
-// system supports the chrome cgroups. Will block if this is the first call
-// that will read the cgroup configs.
-bool OneGroupPerRendererEnabled() {
-  return FeatureList::IsEnabled(kOneGroupPerRenderer) && CGroups::Get().enabled;
-}
 #else
 const int kBackgroundPriority = 5;
 #endif  // BUILDFLAG(IS_CHROMEOS)
@@ -295,8 +288,8 @@ ProcessId Process::GetPidInNamespace() const {
 
 #if BUILDFLAG(IS_CHROMEOS)
 // static
-bool Process::OneGroupPerRendererEnabledForTesting() {
-  return OneGroupPerRendererEnabled();
+bool Process::OneGroupPerRendererEnabled() {
+  return CGroups::Get().enabled && FeatureList::IsEnabled(kOneGroupPerRenderer);
 }
 
 // On Chrome OS, each renderer runs in its own cgroup when running in the
@@ -348,7 +341,7 @@ void Process::CleanUpProcessScheduled(Process process, int remaining_retries) {
 }
 
 void Process::CleanUpProcessAsync() const {
-  if (!FeatureList::IsEnabled(kOneGroupPerRenderer) || unique_token_.empty()) {
+  if (!OneGroupPerRendererEnabled() || unique_token_.empty()) {
     return;
   }
 
diff --git a/base/process/process_unittest.cc b/base/process/process_unittest.cc
index ce90ceff0d91..261cbee80583 100644
--- a/base/process/process_unittest.cc
+++ b/base/process/process_unittest.cc
@@ -475,7 +475,7 @@ TEST_F(ProcessTest, InitializePriorityEmptyProcess) {
   // TODO(b/172213843): base::Process is used by base::TestSuite::Initialize
   // before we can use ScopedFeatureList here. Update the test to allow the
   // use of ScopedFeatureList before base::TestSuite::Initialize runs.
-  if (!Process::OneGroupPerRendererEnabledForTesting())
+  if (!Process::OneGroupPerRendererEnabled())
     return;
 
   Process process;
@@ -485,7 +485,7 @@ TEST_F(ProcessTest, InitializePriorityEmptyProcess) {
 }
 
 TEST_F(ProcessTest, SetProcessBackgroundedOneCgroupPerRender) {
-  if (!Process::OneGroupPerRendererEnabledForTesting())
+  if (!Process::OneGroupPerRendererEnabled())
     return;
 
   base::test::TaskEnvironment task_env;
@@ -513,7 +513,7 @@ TEST_F(ProcessTest, SetProcessBackgroundedOneCgroupPerRender) {
 }
 
 TEST_F(ProcessTest, CleanUpBusyProcess) {
-  if (!Process::OneGroupPerRendererEnabledForTesting())
+  if (!Process::OneGroupPerRendererEnabled())
     return;
 
   base::test::TaskEnvironment task_env;
@@ -556,7 +556,7 @@ TEST_F(ProcessTest, CleanUpBusyProcess) {
 }
 
 TEST_F(ProcessTest, SetProcessBackgroundedEmptyToken) {
-  if (!Process::OneGroupPerRendererEnabledForTesting())
+  if (!Process::OneGroupPerRendererEnabled())
     return;
 
   Process process(SpawnChild("SimpleChildProcess"));
@@ -572,7 +572,7 @@ TEST_F(ProcessTest, SetProcessBackgroundedEmptyToken) {
 }
 
 TEST_F(ProcessTest, CleansUpStaleGroups) {
-  if (!Process::OneGroupPerRendererEnabledForTesting())
+  if (!Process::OneGroupPerRendererEnabled())
     return;
 
   base::test::TaskEnvironment task_env;
@@ -616,7 +616,7 @@ TEST_F(ProcessTest, CleansUpStaleGroups) {
 }
 
 TEST_F(ProcessTest, OneCgroupDoesNotCleanUpGroupsWithWrongPrefix) {
-  if (!Process::OneGroupPerRendererEnabledForTesting())
+  if (!Process::OneGroupPerRendererEnabled())
     return;
 
   base::test::TaskEnvironment task_env;
-- 
2.37.2.789.g6183377224-goog

