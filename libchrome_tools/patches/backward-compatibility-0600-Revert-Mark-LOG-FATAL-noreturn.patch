From c9f3cf8ffc000be125ac0f89c9d90ce0836459e0 Mon Sep 17 00:00:00 2001
From: Ren-Pei Zeng <kamesan@chromium.org>
Date: Wed, 17 Jan 2024 17:13:10 +0000
Subject: [PATCH] Revert "Mark LOG(FATAL) [[noreturn]]"

This reverts commit cd0e77341ce8f050f0e3d44a417b12ad83a561d0.
---
 base/logging.h                 | 17 +++++------------
 base/logging_nocompile.nc      | 24 ------------------------
 mojo/core/node_channel.cc      |  1 +
 mojo/public/c/system/thunks.cc |  1 +
 4 files changed, 7 insertions(+), 36 deletions(-)
 delete mode 100644 base/logging_nocompile.nc

diff --git a/base/logging.h b/base/logging.h
index ceebc5ae99..9226831a69 100644
--- a/base/logging.h
+++ b/base/logging.h
@@ -420,11 +420,10 @@ constexpr LogSeverity LOGGING_0 = LOGGING_ERROR;
 // As special cases, we can assume that LOG_IS_ON(FATAL) always holds. Also,
 // LOG_IS_ON(DFATAL) always holds in debug mode. In particular, CHECK()s will
 // always fire if they fail.
-// FATAL is always enabled and required to be resolved in compile time for
-// LOG(FATAL) to be properly understood as [[noreturn]].
-#define LOG_IS_ON(severity)                                     \
-  (::logging::LOGGING_##severity == ::logging::LOGGING_FATAL || \
-   ::logging::ShouldCreateLogMessage(::logging::LOGGING_##severity))
+// TODO(crbug.com/1409729): Make sure LOG(FATAL) is understood as [[noreturn]]
+// by making sure the compiler knowns that it's unconditionally ON.
+#define LOG_IS_ON(severity) \
+  (::logging::ShouldCreateLogMessage(::logging::LOGGING_##severity))
 
 // Define a default ENABLED_VLOG_LEVEL if it is not defined. The macros allows
 // code to enable vlog level at build time without the need of --vmodule
@@ -534,13 +533,7 @@ BASE_EXPORT extern std::ostream* g_swallow_stream;
 
 #if DCHECK_IS_ON()
 
-// This inlines ShouldCreateLogMessage instead of using LOG_IS_ON as DLOG(FATAL)
-// can't be [[noreturn]].
-// TODO(pbos): Is there a better way for us to avoid DLOG(FATAL) being
-// [[noreturn]]?
-#define DLOG_IS_ON(severity) \
-  (::logging::ShouldCreateLogMessage(::logging::LOGGING_##severity))
-
+#define DLOG_IS_ON(severity) LOG_IS_ON(severity)
 #define DLOG_IF(severity, condition) LOG_IF(severity, condition)
 #define DLOG_ASSERT(condition) LOG_ASSERT(condition)
 #define DPLOG_IF(severity, condition) PLOG_IF(severity, condition)
diff --git a/base/logging_nocompile.nc b/base/logging_nocompile.nc
deleted file mode 100644
index 9114fda1a8..0000000000
--- a/base/logging_nocompile.nc
+++ /dev/null
@@ -1,24 +0,0 @@
-// Copyright 2023 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-// This is a "No Compile Test" suite.
-// https://dev.chromium.org/developers/testing/no-compile-tests
-
-#include "base/logging.h"
-
-// LOG(FATAL) must be understood as [[noreturn]].
-int Foo() {
-  LOG(FATAL) << "I am [[noreturn]]!";
-  return 42;  // expected-error {{'return' will never be executed}}
-}
-
-// It's important that our logging macros agree on [[noreturn]] in all build
-// configurations (or dead-code warnings become impossible to satisfy). As such
-// neither LOG(DFATAL) or DLOG(FATAL) may be understood as [[noreturn]]. This
-// non-void function not returning a value after LOG(DFATAL) and DLOG(FATAL)
-// should always be a compile error due to a missing return statement.
-int Bar() {
-  LOG(DFATAL) << "I am not [[noreturn]]!";
-  DLOG(FATAL) << "I am not [[noreturn]]!";
-}  // expected-error {{non-void function does not return a value}}
diff --git a/mojo/core/node_channel.cc b/mojo/core/node_channel.cc
index afd65da19e..bdf06bf7c5 100644
--- a/mojo/core/node_channel.cc
+++ b/mojo/core/node_channel.cc
@@ -255,6 +255,7 @@ scoped_refptr<NodeChannel> NodeChannel::Create(
     const ProcessErrorCallback& process_error_callback) {
 #if BUILDFLAG(IS_NACL)
   LOG(FATAL) << "Multi-process not yet supported on NaCl-SFI";
+  return nullptr;
 #else
   return new NodeChannel(delegate, std::move(connection_params),
                          channel_handle_policy, io_task_runner,
diff --git a/mojo/public/c/system/thunks.cc b/mojo/public/c/system/thunks.cc
index 4467e130e3..bf6c3a46dd 100644
--- a/mojo/public/c/system/thunks.cc
+++ b/mojo/public/c/system/thunks.cc
@@ -49,6 +49,7 @@ MojoResult NotImplemented(const char* name) {
       << "Mojo has not been initialized in this process. You must call "
       << "either mojo::core::Init() as an embedder, or |MojoInitialize()| if "
       << "using the mojo_core shared library.";
+  return MOJO_RESULT_UNIMPLEMENTED;
 }
 
 }  // namespace
-- 
2.43.0.381.gb435a96ce8-goog

