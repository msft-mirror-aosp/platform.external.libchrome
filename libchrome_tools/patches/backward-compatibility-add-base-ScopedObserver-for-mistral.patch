From 88922f79a4c7b7f5a568e69191e0a433b8f5e287 Mon Sep 17 00:00:00 2001
From: hscham <hscham@chromium.org>
Date: Mon, 8 Nov 2021 13:31:00 +0900
Subject: [PATCH] Add base::ScopedObserver for mistral ap-daemons

The class is removed in r890208.

Change-Id: I00dc3bedb867d6b97aad72397c248557195ac1f3
---
 base/scoped_multi_source_observation.h |  1 +
 base/scoped_observation.h              |  3 +-
 base/scoped_observer.h                 | 89 ++++++++++++++++++++++++++
 3 files changed, 92 insertions(+), 1 deletion(-)
 create mode 100644 base/scoped_observer.h

diff --git a/base/scoped_multi_source_observation.h b/base/scoped_multi_source_observation.h
index 44e656af1..8e304173b 100644
--- a/base/scoped_multi_source_observation.h
+++ b/base/scoped_multi_source_observation.h
@@ -19,6 +19,7 @@ namespace base {
 // e.g. where an observer observes more than a single source.
 //
 // Use base::ScopedObservation for objects that observe only a single source.
+// This class and base::ScopedObservation replace ScopedObserver.
 //
 // When ScopedMultiSourceObservation is destroyed, it removes the object as an
 // observer from all sources it has been added to.
diff --git a/base/scoped_observation.h b/base/scoped_observation.h
index 305c99c57..909aafa09 100644
--- a/base/scoped_observation.h
+++ b/base/scoped_observation.h
@@ -15,7 +15,8 @@ namespace base {
 // where an observer observes a single source only.
 //
 // Use base::ScopedMultiSourceObservation for objects that observe multiple
-// sources.
+// sources. This class and base::ScopedMultiSourceObservation replace
+// ScopedObserver.
 //
 // When ScopedObservation is destroyed, it removes the registered observation,
 // if any. Basic example (as a member variable):
diff --git a/base/scoped_observer.h b/base/scoped_observer.h
new file mode 100644
index 000000000..2909a1873
--- /dev/null
+++ b/base/scoped_observer.h
@@ -0,0 +1,89 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef BASE_SCOPED_OBSERVER_H_
+#define BASE_SCOPED_OBSERVER_H_
+
+#include <stddef.h>
+
+#include <vector>
+
+#include "base/check.h"
+#include "base/containers/contains.h"
+#include "base/ranges/algorithm.h"
+
+// This class is DEPRECATED. Instead please use one of:
+// - base::ScopedObservation for observing a single source.
+// - base::ScopedMultiSourceObservation for observing multiple sources.
+//
+// ScopedObserver is used to keep track of the set of sources an object has
+// attached itself to as an observer. When ScopedObserver is destroyed it
+// removes the object as an observer from all sources it has been added to.
+// Basic example (as a member variable):
+//
+//   class MyFooObserver : public FooObserver {
+//     ...
+//    private:
+//     ScopedObserver<Foo, FooObserver> observed_foo_{this};
+//   };
+//
+// For cases with methods not named AddObserver/RemoveObserver:
+//
+//   class MyFooStateObserver : public FooStateObserver {
+//     ...
+//    private:
+//     ScopedObserver<Foo,
+//                    FooStateObserver,
+//                    &Foo::AddStateObserver,
+//                    &Foo::RemoveStateObserver>
+//       observed_foo_{this};
+//   };
+template <class Source,
+          class Observer,
+          void (Source::*AddObsFn)(Observer*) = &Source::AddObserver,
+          void (Source::*RemoveObsFn)(Observer*) = &Source::RemoveObserver>
+class ScopedObserver {
+ public:
+  explicit ScopedObserver(Observer* observer) : observer_(observer) {}
+  ScopedObserver(const ScopedObserver&) = delete;
+  ScopedObserver& operator=(const ScopedObserver&) = delete;
+  ~ScopedObserver() {
+    RemoveAll();
+  }
+
+  // Adds the object passed to the constructor as an observer on |source|.
+  void Add(Source* source) {
+    sources_.push_back(source);
+    (source->*AddObsFn)(observer_);
+  }
+
+  // Remove the object passed to the constructor as an observer from |source|.
+  void Remove(Source* source) {
+    auto it = base::ranges::find(sources_, source);
+    DCHECK(it != sources_.end());
+    sources_.erase(it);
+    (source->*RemoveObsFn)(observer_);
+  }
+
+  void RemoveAll() {
+    for (size_t i = 0; i < sources_.size(); ++i)
+      (sources_[i]->*RemoveObsFn)(observer_);
+    sources_.clear();
+  }
+
+  bool IsObserving(Source* source) const {
+    return base::Contains(sources_, source);
+  }
+
+  bool IsObservingSources() const { return !sources_.empty(); }
+
+  size_t GetSourcesCount() const { return sources_.size(); }
+
+ private:
+  Observer* observer_;
+
+  std::vector<Source*> sources_;
+};
+
+#endif  // BASE_SCOPED_OBSERVER_H_
-- 
2.34.0.rc0.344.g81b53c2807-goog

