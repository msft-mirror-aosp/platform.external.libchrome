From 07b3b78eb8f9f16b13aa028f57d30178f0f81646 Mon Sep 17 00:00:00 2001
From: Ren-Pei Zeng <kamesan@chromium.org>
Date: Thu, 20 Jul 2023 14:58:29 +0000
Subject: [PATCH] Revert "base/threading: Split out NACL/AIX code out of Linux"

This reverts commit 0d36fb171fe024c2323ace19f43aa4b73a86c04f.
---
 base/threading/platform_thread.cc            |  6 ---
 base/threading/platform_thread.h             |  3 --
 base/threading/platform_thread_android.cc    |  2 +-
 base/threading/platform_thread_linux.cc      | 50 +++++++++++++++++++-
 base/threading/platform_thread_linux_base.cc | 31 ------------
 5 files changed, 50 insertions(+), 42 deletions(-)
 delete mode 100644 base/threading/platform_thread_linux_base.cc

diff --git a/base/threading/platform_thread.cc b/base/threading/platform_thread.cc
index 1bc5ee15bf..c246fecb15 100644
--- a/base/threading/platform_thread.cc
+++ b/base/threading/platform_thread.cc
@@ -3,7 +3,6 @@
 // found in the LICENSE file.
 
 #include "base/threading/platform_thread.h"
-#include "base/threading/thread_id_name_manager.h"
 
 #include "base/task/current_thread.h"
 #include "third_party/abseil-cpp/absl/base/attributes.h"
@@ -53,11 +52,6 @@ absl::optional<TimeDelta> PlatformThreadBase::GetThreadLeewayOverride() {
   return absl::nullopt;
 }
 
-// static
-void PlatformThreadBase::SetNameCommon(const std::string& name) {
-  ThreadIdNameManager::GetInstance()->SetName(name);
-}
-
 namespace internal {
 
 void SetCurrentThreadType(ThreadType thread_type,
diff --git a/base/threading/platform_thread.h b/base/threading/platform_thread.h
index 701475bce5..38cdaa3c94 100644
--- a/base/threading/platform_thread.h
+++ b/base/threading/platform_thread.h
@@ -269,9 +269,6 @@ class BASE_EXPORT PlatformThreadBase {
   static size_t GetDefaultThreadStackSize();
 
   static ThreadPriorityForTest GetCurrentThreadPriorityForTest();
-
-  protected:
-  static void SetNameCommon(const std::string& name);
 };
 
 #if BUILDFLAG(IS_APPLE)
diff --git a/base/threading/platform_thread_android.cc b/base/threading/platform_thread_android.cc
index 0d0609966b..594bae9f6d 100644
--- a/base/threading/platform_thread_android.cc
+++ b/base/threading/platform_thread_android.cc
@@ -87,7 +87,7 @@ GetCurrentThreadPriorityForPlatformForTest() {
 }  // namespace internal
 
 void PlatformThread::SetName(const std::string& name) {
-  SetNameCommon(name);
+  ThreadIdNameManager::GetInstance()->SetName(name);
 
   // Like linux, on android we can get the thread names to show up in the
   // debugger by setting the process name for the LWP.
diff --git a/base/threading/platform_thread_linux.cc b/base/threading/platform_thread_linux.cc
index 053756ba7d..f1e8e886c1 100644
--- a/base/threading/platform_thread_linux.cc
+++ b/base/threading/platform_thread_linux.cc
@@ -28,12 +28,14 @@
 #include "build/build_config.h"
 #include "third_party/abseil-cpp/absl/types/optional.h"
 
+#if !BUILDFLAG(IS_NACL) && !BUILDFLAG(IS_AIX)
 #include <pthread.h>
 #include <sys/prctl.h>
 #include <sys/resource.h>
 #include <sys/time.h>
 #include <sys/types.h>
 #include <unistd.h>
+#endif
 
 namespace base {
 
@@ -45,7 +47,9 @@ BASE_FEATURE(kSchedUtilHints,
 
 namespace {
 
+#if !BUILDFLAG(IS_NACL)
 ThreadTypeDelegate* g_thread_type_delegate = nullptr;
+#endif
 
 #if BUILDFLAG(IS_CHROMEOS)
 std::atomic<bool> g_use_sched_util(true);
@@ -64,6 +68,8 @@ int g_scheduler_boost_adj;
 int g_scheduler_limit_adj;
 bool g_scheduler_use_latency_tune_adj;
 
+#if !BUILDFLAG(IS_NACL) && !BUILDFLAG(IS_AIX)
+
 // Defined by linux uclamp ABI of sched_setattr().
 const uint32_t kSchedulerUclampMin = 0;
 const uint32_t kSchedulerUclampMax = 1024;
@@ -130,8 +136,10 @@ long sched_setattr(pid_t pid,
                    unsigned int flags) {
   return syscall(__NR_sched_setattr, pid, attr, flags);
 }
+#endif  // !BUILDFLAG(IS_NACL) && !BUILDFLAG(IS_AIX)
 #endif  // BUILDFLAG(IS_CHROMEOS)
 
+#if !BUILDFLAG(IS_NACL)
 const FilePath::CharType kCgroupDirectory[] =
     FILE_PATH_LITERAL("/sys/fs/cgroup");
 
@@ -299,12 +307,15 @@ void SetThreadCgroupsForThreadType(PlatformThreadId thread_id,
       thread_id, cgroup_filepath.Append(FILE_PATH_LITERAL("schedtune")),
       thread_type);
 }
+#endif
 }  // namespace
 
 namespace internal {
 
 namespace {
+#if !BUILDFLAG(IS_NACL)
 const struct sched_param kRealTimePrio = {8};
+#endif
 }  // namespace
 
 const ThreadPriorityToNiceValuePairForTest
@@ -329,14 +340,19 @@ const ThreadTypeToNiceValuePair kThreadTypeToNiceValueMap[7] = {
 };
 
 bool CanSetThreadTypeToRealtimeAudio() {
+#if !BUILDFLAG(IS_NACL)
   // A non-zero soft-limit on RLIMIT_RTPRIO is required to be allowed to invoke
   // pthread_setschedparam in SetCurrentThreadTypeForPlatform().
   struct rlimit rlim;
   return getrlimit(RLIMIT_RTPRIO, &rlim) != 0 && rlim.rlim_cur != 0;
+#else
+  return false;
+#endif
 }
 
 bool SetCurrentThreadTypeForPlatform(ThreadType thread_type,
                                      MessagePumpType pump_type_hint) {
+#if !BUILDFLAG(IS_NACL)
   const PlatformThreadId tid = PlatformThread::CurrentId();
 
   if (g_thread_type_delegate &&
@@ -355,10 +371,14 @@ bool SetCurrentThreadTypeForPlatform(ThreadType thread_type,
 
   return thread_type == ThreadType::kRealtimeAudio &&
          pthread_setschedparam(pthread_self(), SCHED_RR, &kRealTimePrio) == 0;
+#else
+  return false;
+#endif
 }
 
 absl::optional<ThreadPriorityForTest>
 GetCurrentThreadPriorityForPlatformForTest() {
+#if !BUILDFLAG(IS_NACL)
   int maybe_sched_rr = 0;
   struct sched_param maybe_realtime_prio = {0};
   if (pthread_getschedparam(pthread_self(), &maybe_sched_rr,
@@ -367,14 +387,17 @@ GetCurrentThreadPriorityForPlatformForTest() {
       maybe_realtime_prio.sched_priority == kRealTimePrio.sched_priority) {
     return absl::make_optional(ThreadPriorityForTest::kRealtimeAudio);
   }
+#endif
   return absl::nullopt;
 }
 
 }  // namespace internal
 
+// static
 void PlatformThreadBase::SetName(const std::string& name) {
-  SetNameCommon(name);
+  ThreadIdNameManager::GetInstance()->SetName(name);
 
+#if !BUILDFLAG(IS_NACL) && !BUILDFLAG(IS_AIX)
   // On linux we can get the thread names to show up in the debugger by setting
   // the process name for the LWP.  We don't want to do this for the main
   // thread because that would rename the process, causing tools like killall
@@ -391,8 +414,10 @@ void PlatformThreadBase::SetName(const std::string& name) {
   // We expect EPERM failures in sandboxed processes, just ignore those.
   if (err < 0 && errno != EPERM)
     DPLOG(ERROR) << "prctl(PR_SET_NAME)";
+#endif  //  !BUILDFLAG(IS_NACL) && !BUILDFLAG(IS_AIX)
 }
 
+#if !BUILDFLAG(IS_NACL)
 // static
 void PlatformThreadLinux::SetThreadTypeDelegate(ThreadTypeDelegate* delegate) {
   // A component cannot override a delegate set by another component, thus
@@ -401,7 +426,9 @@ void PlatformThreadLinux::SetThreadTypeDelegate(ThreadTypeDelegate* delegate) {
 
   g_thread_type_delegate = delegate;
 }
+#endif
 
+#if !BUILDFLAG(IS_NACL) && !BUILDFLAG(IS_AIX)
 // static
 void PlatformThreadLinux::SetThreadType(ProcessId process_id,
                                         PlatformThreadId thread_id,
@@ -421,6 +448,7 @@ void PlatformThreadLinux::SetThreadType(ProcessId process_id,
               << nice_setting;
   }
 }
+#endif  //  !BUILDFLAG(IS_NACL) && !BUILDFLAG(IS_AIX)
 
 #if BUILDFLAG(IS_CHROMEOS)
 void PlatformThread::InitFeaturesPostFieldTrial() {
@@ -458,4 +486,24 @@ void PlatformThread::InitFeaturesPostFieldTrial() {
 }
 #endif
 
+void InitThreading() {}
+
+void TerminateOnThread() {}
+
+size_t GetDefaultThreadStackSize(const pthread_attr_t& attributes) {
+#if !defined(THREAD_SANITIZER) && defined(__GLIBC__)
+  // Generally glibc sets ample default stack sizes, so use the default there.
+  return 0;
+#elif !defined(THREAD_SANITIZER)
+  // Other libcs (uclibc, musl, etc) tend to use smaller stacks, often too small
+  // for chromium. Make sure we have enough space to work with here. Note that
+  // for comparison glibc stacks are generally around 8MB.
+  return 2 * (1 << 20);
+#else
+  // ThreadSanitizer bloats the stack heavily. Evidence has been that the
+  // default stack size isn't enough for some browser tests.
+  return 2 * (1 << 23);  // 2 times 8192K (the default stack size on Linux).
+#endif
+}
+
 }  // namespace base
diff --git a/base/threading/platform_thread_linux_base.cc b/base/threading/platform_thread_linux_base.cc
deleted file mode 100644
index ea94e6237c..0000000000
--- a/base/threading/platform_thread_linux_base.cc
+++ /dev/null
@@ -1,31 +0,0 @@
-// Copyright 2023 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-// Description: Common functions for NACL and all Linux and
-// Linux-derivatives.
-
-#include "base/threading/platform_thread.h"
-
-namespace base {
-
-size_t GetDefaultThreadStackSize(const pthread_attr_t& attributes) {
-#if !defined(THREAD_SANITIZER) && defined(__GLIBC__)
-  // Generally glibc sets ample default stack sizes, so use the default there.
-  return 0;
-#elif !defined(THREAD_SANITIZER)
-  // Other libcs (uclibc, musl, etc) tend to use smaller stacks, often too small
-  // for chromium. Make sure we have enough space to work with here. Note that
-  // for comparison glibc stacks are generally around 8MB.
-  return 2 * (1 << 20);
-#else
-  // ThreadSanitizer bloats the stack heavily. Evidence has been that the
-  // default stack size isn't enough for some browser tests.
-  return 2 * (1 << 23);  // 2 times 8192K (the default stack size on Linux).
-#endif
-}
-
-void InitThreading() {}
-
-void TerminateOnThread() {}
-
-}  // namespace base
\ No newline at end of file
-- 
2.41.0.255.g8b1d071c50-goog

