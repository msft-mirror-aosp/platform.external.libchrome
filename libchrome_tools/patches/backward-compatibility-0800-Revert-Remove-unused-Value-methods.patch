From a6b21d45a4c9e643bcef3c11845610586117e0ba Mon Sep 17 00:00:00 2001
From: Ren-Pei Zeng <kamesan@chromium.org>
Date: Thu, 2 Feb 2023 22:29:42 +0800
Subject: [PATCH] Revert "Remove unused Value methods"

This reverts commit 44e73d581acaac76554d2f40c55733a30241384a.
---
 base/values.cc | 16 ++++++++++++++++
 base/values.h  | 12 +++++++++++-
 2 files changed, 27 insertions(+), 1 deletion(-)

diff --git a/base/values.cc b/base/values.cc
index 76470320d5..45a4c3c402 100644
--- a/base/values.cc
+++ b/base/values.cc
@@ -1031,6 +1031,18 @@ bool operator>=(const Value::List& lhs, const Value::List& rhs) {
   return !(lhs < rhs);
 }
 
+void Value::Append(bool value) {
+  GetList().Append(value);
+}
+
+void Value::Append(int value) {
+  GetList().Append(value);
+}
+
+void Value::Append(double value) {
+  GetList().Append(value);
+}
+
 void Value::Append(const char* value) {
   GetList().Append(value);
 }
@@ -1043,6 +1055,10 @@ void Value::Append(std::string&& value) {
   GetList().Append(std::move(value));
 }
 
+void Value::Append(StringPiece16 value) {
+  GetList().Append(value);
+}
+
 void Value::Append(Value&& value) {
   GetList().Append(std::move(value));
 }
diff --git a/base/values.h b/base/values.h
index 15f299fc4d..b30ad89894 100644
--- a/base/values.h
+++ b/base/values.h
@@ -679,8 +679,18 @@ class BASE_EXPORT GSL_OWNER Value {
   // DEPRECATED: prefer `Value::List::Append()`.
   void Append(Value&& value);
   // DEPRECATED: prefer `Value::List::Append()`.
+  void Append(bool value);
+  template <typename T>
+  void Append(const T* ptr) = delete;
+  // DEPRECATED: prefer `Value::List::Append()`.
+  void Append(int value);
+  // DEPRECATED: prefer `Value::List::Append()`.
+  void Append(double value);
+  // DEPRECATED: prefer `Value::List::Append()`.
   void Append(StringPiece value);
   // DEPRECATED: prefer `Value::List::Append()`.
+  void Append(StringPiece16 value);
+  // DEPRECATED: prefer `Value::List::Append()`.
   void Append(const char* value);
   // DEPRECATED: prefer `Value::List::Append()`.
   void Append(std::string&& value);
@@ -736,7 +746,7 @@ class BASE_EXPORT GSL_OWNER Value {
   // DEPRECATED: Prefer `Value::Dict::Set()`.
   Value* SetKey(StringPiece key, Value&& value);
 
-  // `Set<Type>Key` looks up `key` in the underlying dictionary and associates a
+  // `Set`Type>Key` looks up `key` in the underlying dictionary and associates a
   // corresponding Value() constructed from the second parameter. Compared to
   // `SetKey()`, this avoids un-necessary temporary `Value()` creation, as well
   // ambiguities in the value type.
-- 
2.39.1.456.gfc5497dd1b-goog

