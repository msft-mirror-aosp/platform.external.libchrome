From dd7208c6fb6ddea23a862cd4bb5eddaced15a74a Mon Sep 17 00:00:00 2001
From: Wei-Luan Wang <weiluanwang@google.com>
Date: Tue, 27 Feb 2024 04:44:00 +0000
Subject: [PATCH] Revert "[BRP] Add BUILDFLAG that allows disabling optional
 OOB checks"

It causes unused parameter error for |is_in_pointer_modification| in
raw_ptr_noop_impl.h when building some packages (for example,
dev-util/puffin).

This reverts commit 7fc5dcad3d72e9b8789059e2a25d3100b0877ae9.
---
 .../partition_allocator/partition_alloc.gni   | 22 ++++--------
 .../src/partition_alloc/pointers/raw_ptr.h    | 32 +++++++----------
 .../pointers/raw_ptr_asan_unowned_impl.h      |  6 ++--
 .../pointers/raw_ptr_backup_ref_impl.h        | 34 ++++---------------
 .../pointers/raw_ptr_hookable_impl.h          |  6 ++--
 .../pointers/raw_ptr_nocompile.nc             | 14 ++++----
 .../pointers/raw_ptr_noop_impl.h              |  6 ++--
 .../pointers/raw_ptr_unittest.cc              |  4 ---
 8 files changed, 39 insertions(+), 85 deletions(-)

diff --git a/base/allocator/partition_allocator/partition_alloc.gni b/base/allocator/partition_allocator/partition_alloc.gni
index 6ef76f9f5c..e0b304cab0 100644
--- a/base/allocator/partition_allocator/partition_alloc.gni
+++ b/base/allocator/partition_allocator/partition_alloc.gni
@@ -216,14 +216,10 @@ declare_args() {
   # to go through build_overrides
   enable_dangling_raw_ptr_perf_experiment = false
 
-  enable_backup_ref_ptr_instance_tracer = false
-
-  backup_ref_ptr_extra_oob_checks = enable_backup_ref_ptr_support
-}
+  # Set to `enable_backup_ref_ptr_support && has_64_bit_pointers` when enabling.
+  backup_ref_ptr_poison_oob_ptr = false
 
-declare_args() {
-  backup_ref_ptr_poison_oob_ptr =
-      false && backup_ref_ptr_extra_oob_checks && has_64_bit_pointers
+  enable_backup_ref_ptr_instance_tracer = false
 }
 
 declare_args() {
@@ -302,16 +298,12 @@ assert(
     enable_dangling_raw_ptr_checks || !enable_dangling_raw_ptr_perf_experiment,
     "Missing dangling pointer checks feature for its performance experiment")
 
-# To enable extra OOB checks for BackupRefPtr, the underlying feature must be
-# enabled, too.
-assert(enable_backup_ref_ptr_support || !backup_ref_ptr_extra_oob_checks,
-       "Can't enable extra OOB checks if BackupRefPtr isn't enabled at all")
-
 # To poison OOB pointers for BackupRefPtr, the underlying feature must be
 # enabled, too.
-assert(backup_ref_ptr_extra_oob_checks || !backup_ref_ptr_poison_oob_ptr,
-       "Can't enable poisoning for OOB pointers if OOB checks aren't enabled " +
-           "at all")
+assert(
+    enable_backup_ref_ptr_support || !backup_ref_ptr_poison_oob_ptr,
+    "Can't enable poisoning for OOB pointers if BackupRefPtr isn't enabled " +
+        "at all")
 assert(has_64_bit_pointers || !backup_ref_ptr_poison_oob_ptr,
        "Can't enable poisoning for OOB pointers if pointers are only 32-bit")
 
diff --git a/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr.h b/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr.h
index 9edee80346..845c43a6ac 100644
--- a/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr.h
+++ b/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr.h
@@ -639,14 +639,14 @@ class PA_TRIVIAL_ABI PA_GSL_POINTER raw_ptr {
     static_assert(
         raw_ptr_traits::IsPtrArithmeticAllowed(Traits),
         "cannot increment raw_ptr unless AllowPtrArithmetic trait is present.");
-    wrapped_ptr_ = Impl::Advance(wrapped_ptr_, 1, true);
+    wrapped_ptr_ = Impl::Advance(wrapped_ptr_, 1);
     return *this;
   }
   PA_ALWAYS_INLINE constexpr raw_ptr& operator--() {
     static_assert(
         raw_ptr_traits::IsPtrArithmeticAllowed(Traits),
         "cannot decrement raw_ptr unless AllowPtrArithmetic trait is present.");
-    wrapped_ptr_ = Impl::Retreat(wrapped_ptr_, 1, true);
+    wrapped_ptr_ = Impl::Retreat(wrapped_ptr_, 1);
     return *this;
   }
   PA_ALWAYS_INLINE constexpr raw_ptr operator++(int /* post_increment */) {
@@ -672,7 +672,7 @@ class PA_TRIVIAL_ABI PA_GSL_POINTER raw_ptr {
     static_assert(
         raw_ptr_traits::IsPtrArithmeticAllowed(Traits),
         "cannot increment raw_ptr unless AllowPtrArithmetic trait is present.");
-    wrapped_ptr_ = Impl::Advance(wrapped_ptr_, delta_elems, true);
+    wrapped_ptr_ = Impl::Advance(wrapped_ptr_, delta_elems);
     return *this;
   }
   template <
@@ -682,7 +682,7 @@ class PA_TRIVIAL_ABI PA_GSL_POINTER raw_ptr {
     static_assert(
         raw_ptr_traits::IsPtrArithmeticAllowed(Traits),
         "cannot decrement raw_ptr unless AllowPtrArithmetic trait is present.");
-    wrapped_ptr_ = Impl::Retreat(wrapped_ptr_, delta_elems, true);
+    wrapped_ptr_ = Impl::Retreat(wrapped_ptr_, delta_elems);
     return *this;
   }
 
@@ -698,7 +698,7 @@ class PA_TRIVIAL_ABI PA_GSL_POINTER raw_ptr {
     // Call SafelyUnwrapPtrForDereference() to simulate what GetForDereference()
     // does, but without creating a temporary.
     return *Impl::SafelyUnwrapPtrForDereference(
-        Impl::Advance(wrapped_ptr_, delta_elems, false));
+        Impl::Advance(wrapped_ptr_, delta_elems));
   }
 
   // Do not disable operator+() and operator-().
@@ -717,13 +717,10 @@ class PA_TRIVIAL_ABI PA_GSL_POINTER raw_ptr {
   template <typename Z>
   PA_ALWAYS_INLINE friend constexpr raw_ptr operator+(const raw_ptr& p,
                                                       Z delta_elems) {
-    // Don't check `is_offset_type<Z>` here, as existence of `Advance` is
-    // already gated on that, and we'd get double errors.
-    static_assert(
-        raw_ptr_traits::IsPtrArithmeticAllowed(Traits),
-        "cannot add to raw_ptr unless AllowPtrArithmetic trait is present.");
-    raw_ptr result = Impl::Advance(p.wrapped_ptr_, delta_elems, false);
-    return result;
+    // Don't check for AllowPtrArithmetic here, as operator+= already does that,
+    // and we'd get double errors.
+    raw_ptr result = p;
+    return result += delta_elems;
   }
   template <typename Z>
   PA_ALWAYS_INLINE friend constexpr raw_ptr operator+(Z delta_elems,
@@ -733,13 +730,10 @@ class PA_TRIVIAL_ABI PA_GSL_POINTER raw_ptr {
   template <typename Z>
   PA_ALWAYS_INLINE friend constexpr raw_ptr operator-(const raw_ptr& p,
                                                       Z delta_elems) {
-    // Don't check `is_offset_type<Z>` here, as existence of `Retreat` is
-    // already gated on that, and we'd get double errors.
-    static_assert(raw_ptr_traits::IsPtrArithmeticAllowed(Traits),
-                  "cannot subtract from raw_ptr unless AllowPtrArithmetic "
-                  "trait is present.");
-    raw_ptr result = Impl::Retreat(p.wrapped_ptr_, delta_elems, false);
-    return result;
+    // Don't check for AllowPtrArithmetic here, as operator-= already does that,
+    // and we'd get double errors.
+    raw_ptr result = p;
+    return result -= delta_elems;
   }
 
   // The "Do not disable operator+() and operator-()" comment above doesn't
diff --git a/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_asan_unowned_impl.h b/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_asan_unowned_impl.h
index ef5220bcaa..e3f2275ee7 100644
--- a/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_asan_unowned_impl.h
+++ b/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_asan_unowned_impl.h
@@ -88,8 +88,7 @@ struct RawPtrAsanUnownedImpl {
       typename Z,
       typename =
           std::enable_if_t<partition_alloc::internal::is_offset_type<Z>, void>>
-  PA_ALWAYS_INLINE static constexpr T*
-  Advance(T* wrapped_ptr, Z delta_elems, bool is_in_pointer_modification) {
+  PA_ALWAYS_INLINE static constexpr T* Advance(T* wrapped_ptr, Z delta_elems) {
     return wrapped_ptr + delta_elems;
   }
 
@@ -99,8 +98,7 @@ struct RawPtrAsanUnownedImpl {
       typename Z,
       typename =
           std::enable_if_t<partition_alloc::internal::is_offset_type<Z>, void>>
-  PA_ALWAYS_INLINE static constexpr T*
-  Retreat(T* wrapped_ptr, Z delta_elems, bool is_in_pointer_modification) {
+  PA_ALWAYS_INLINE static constexpr T* Retreat(T* wrapped_ptr, Z delta_elems) {
     return wrapped_ptr - delta_elems;
   }
 
diff --git a/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_backup_ref_impl.h b/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_backup_ref_impl.h
index 5ca2d04902..c89ecc12a7 100644
--- a/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_backup_ref_impl.h
+++ b/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_backup_ref_impl.h
@@ -327,55 +327,33 @@ struct RawPtrBackupRefImpl {
   }
 
   // Advance the wrapped pointer by `delta_elems`.
-  // `is_in_pointer_modification` means that the result is intended to modify
-  // the pointer (as opposed to creating a new one).
   template <
       typename T,
       typename Z,
       typename =
           std::enable_if_t<partition_alloc::internal::is_offset_type<Z>, void>>
-  PA_ALWAYS_INLINE static constexpr T*
-  Advance(T* wrapped_ptr, Z delta_elems, bool is_in_pointer_modification) {
+  PA_ALWAYS_INLINE static constexpr T* Advance(T* wrapped_ptr, Z delta_elems) {
     if (partition_alloc::internal::base::is_constant_evaluated()) {
       return wrapped_ptr + delta_elems;
     }
     T* unpoisoned_ptr = UnpoisonPtr(wrapped_ptr);
-    // When modifying the pointer, we have to make sure it doesn't migrate to a
-    // different slot, or else ref-count integrity is at risk. This isn't needed
-    // if the result will be assigned to a new pointer, as it'll do ref-counting
-    // properly. Do it anyway if extra OOB checks are enabled.
-    if (BUILDFLAG(BACKUP_REF_PTR_EXTRA_OOB_CHECKS) ||
-        is_in_pointer_modification) {
-      return VerifyAndPoisonPointerAfterAdvanceOrRetreat(
-          unpoisoned_ptr, unpoisoned_ptr + delta_elems);
-    }
-    return unpoisoned_ptr + delta_elems;
+    return VerifyAndPoisonPointerAfterAdvanceOrRetreat(
+        unpoisoned_ptr, unpoisoned_ptr + delta_elems);
   }
 
   // Retreat the wrapped pointer by `delta_elems`.
-  // `is_in_pointer_modification` means that the result is intended to modify
-  // the pointer (as opposed to creating a new one).
   template <
       typename T,
       typename Z,
       typename =
           std::enable_if_t<partition_alloc::internal::is_offset_type<Z>, void>>
-  PA_ALWAYS_INLINE static constexpr T*
-  Retreat(T* wrapped_ptr, Z delta_elems, bool is_in_pointer_modification) {
+  PA_ALWAYS_INLINE static constexpr T* Retreat(T* wrapped_ptr, Z delta_elems) {
     if (partition_alloc::internal::base::is_constant_evaluated()) {
       return wrapped_ptr - delta_elems;
     }
     T* unpoisoned_ptr = UnpoisonPtr(wrapped_ptr);
-    // When modifying the pointer, we have to make sure it doesn't migrate to a
-    // different slot, or else ref-count integrity is at risk. This isn't needed
-    // if the result will be assigned to a new pointer, as it'll do ref-counting
-    // properly. Do it anyway if extra OOB checks are enabled.
-    if (BUILDFLAG(BACKUP_REF_PTR_EXTRA_OOB_CHECKS) ||
-        is_in_pointer_modification) {
-      return VerifyAndPoisonPointerAfterAdvanceOrRetreat(
-          unpoisoned_ptr, unpoisoned_ptr - delta_elems);
-    }
-    return unpoisoned_ptr - delta_elems;
+    return VerifyAndPoisonPointerAfterAdvanceOrRetreat(
+        unpoisoned_ptr, unpoisoned_ptr - delta_elems);
   }
 
   template <typename T>
diff --git a/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_hookable_impl.h b/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_hookable_impl.h
index 4fd021da73..515ef9e487 100644
--- a/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_hookable_impl.h
+++ b/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_hookable_impl.h
@@ -132,8 +132,7 @@ struct RawPtrHookableImpl {
       typename Z,
       typename =
           std::enable_if_t<partition_alloc::internal::is_offset_type<Z>, void>>
-  PA_ALWAYS_INLINE static constexpr T*
-  Advance(T* wrapped_ptr, Z delta_elems, bool is_in_pointer_modification) {
+  PA_ALWAYS_INLINE static constexpr T* Advance(T* wrapped_ptr, Z delta_elems) {
     if (!partition_alloc::internal::base::is_constant_evaluated()) {
       if (EnableHooks) {
         GetRawPtrHooks()->advance(
@@ -150,8 +149,7 @@ struct RawPtrHookableImpl {
       typename Z,
       typename =
           std::enable_if_t<partition_alloc::internal::is_offset_type<Z>, void>>
-  PA_ALWAYS_INLINE static constexpr T*
-  Retreat(T* wrapped_ptr, Z delta_elems, bool is_in_pointer_modification) {
+  PA_ALWAYS_INLINE static constexpr T* Retreat(T* wrapped_ptr, Z delta_elems) {
     if (!partition_alloc::internal::base::is_constant_evaluated()) {
       if (EnableHooks) {
         GetRawPtrHooks()->advance(
diff --git a/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_nocompile.nc b/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_nocompile.nc
index 1e4c08b128..0415501b3b 100644
--- a/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_nocompile.nc
+++ b/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_nocompile.nc
@@ -78,14 +78,14 @@ void PointerArithmetic() {
   struct {} s;
   ptr1 += s;                           // expected-error@*:* {{no viable overloaded '+='}}
   ptr1 -= s;                           // expected-error@*:* {{no viable overloaded '-='}}
-  PtrCanDoArithmetic ptr2 = ptr1 + s;  // expected-error@*:* {{no matching function for call to 'Advance'}}
-  ptr2 = ptr1 - s;                     // expected-error@*:* {{no matching function for call to 'Retreat'}}
+  PtrCanDoArithmetic ptr2 = ptr1 + s;  // expected-error@*:* {{no viable overloaded '+='}}
+  ptr2 = ptr1 - s;                     // expected-error@*:* {{no viable overloaded '-='}}
 
 #if !BUILDFLAG(HAS_64_BIT_POINTERS)
   ptr1 += uint64_t{2};        // expected-error@*:* {{no viable overloaded '+='}}
   ptr1 -= uint64_t{2};        // expected-error@*:* {{no viable overloaded '-='}}
-  ptr2 = ptr1 + uint64_t{2};  // expected-error@*:* {{no matching function for call to 'Advance'}}
-  ptr2 = ptr1 - uint64_t{2};  // expected-error@*:* {{no matching function for call to 'Retreat'}}
+  ptr2 = ptr1 + uint64_t{2};  // expected-error@*:* {{no viable overloaded '+='}}
+  ptr2 = ptr1 - uint64_t{2};  // expected-error@*:* {{no viable overloaded '-='}}
 #endif  // !BUILDFLAG(HAS_64_BIT_POINTERS)
 }
 
@@ -96,10 +96,10 @@ void PointerArithmeticDisabled() {
   ptr_a1--;                            // expected-error@*:* {{cannot decrement raw_ptr unless AllowPtrArithmetic trait is present.}}
   ++ptr_a1;                            // expected-error@*:* {{cannot increment raw_ptr unless AllowPtrArithmetic trait is present.}}
   --ptr_a1;                            // expected-error@*:* {{cannot decrement raw_ptr unless AllowPtrArithmetic trait is present.}}
-  raw_ptr<TypeA> ptr_a2 = ptr_a1 + 1;  // expected-error@*:* {{cannot add to raw_ptr unless AllowPtrArithmetic trait is present.}}
-  ptr_a2 = ptr_a1 - 1;                 // expected-error@*:* {{cannot subtract from raw_ptr unless AllowPtrArithmetic trait is present.}}
+  raw_ptr<TypeA> ptr_a2 = ptr_a1 + 1;  // expected-error@*:* {{cannot increment raw_ptr unless AllowPtrArithmetic trait is present.}}
+  ptr_a2 = ptr_a1 - 1;                 // expected-error@*:* {{cannot decrement raw_ptr unless AllowPtrArithmetic trait is present.}}
   raw_ptr<TypeB> ptr_b1 = new TypeB();
-  raw_ptr<TypeB> ptr_b2 = 1 + ptr_b1;  // expected-error@*:* {{cannot add to raw_ptr unless AllowPtrArithmetic trait is present.}}
+  raw_ptr<TypeB> ptr_b2 = 1 + ptr_b1;  // expected-error@*:* {{cannot increment raw_ptr unless AllowPtrArithmetic trait is present.}}
   ptr_b2 - ptr_b1;                     // expected-error@*:* {{cannot subtract raw_ptrs unless AllowPtrArithmetic trait is present.}}
 }
 
diff --git a/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_noop_impl.h b/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_noop_impl.h
index 7d9f3a2691..82ae2e9765 100644
--- a/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_noop_impl.h
+++ b/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_noop_impl.h
@@ -68,8 +68,7 @@ struct RawPtrNoOpImpl {
       typename Z,
       typename =
           std::enable_if_t<partition_alloc::internal::is_offset_type<Z>, void>>
-  PA_ALWAYS_INLINE static constexpr T*
-  Advance(T* wrapped_ptr, Z delta_elems, bool is_in_pointer_modification) {
+  PA_ALWAYS_INLINE static constexpr T* Advance(T* wrapped_ptr, Z delta_elems) {
     return wrapped_ptr + delta_elems;
   }
 
@@ -79,8 +78,7 @@ struct RawPtrNoOpImpl {
       typename Z,
       typename =
           std::enable_if_t<partition_alloc::internal::is_offset_type<Z>, void>>
-  PA_ALWAYS_INLINE static constexpr T*
-  Retreat(T* wrapped_ptr, Z delta_elems, bool is_in_pointer_modification) {
+  PA_ALWAYS_INLINE static constexpr T* Retreat(T* wrapped_ptr, Z delta_elems) {
     return wrapped_ptr - delta_elems;
   }
 
diff --git a/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_unittest.cc b/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_unittest.cc
index 309b7f7e39..368df22fbd 100644
--- a/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_unittest.cc
+++ b/base/allocator/partition_allocator/src/partition_alloc/pointers/raw_ptr_unittest.cc
@@ -1750,7 +1750,6 @@ TEST_F(BackupRefPtrTest, QuarantinedBytes) {
 void RunBackupRefPtrImplAdvanceTest(
     partition_alloc::PartitionAllocator& allocator,
     size_t requested_size) {
-#if BUILDFLAG(BACKUP_REF_PTR_EXTRA_OOB_CHECKS)
   char* ptr = static_cast<char*>(allocator.root()->Alloc(requested_size));
   raw_ptr<char, AllowPtrArithmetic> protected_ptr = ptr;
   protected_ptr += 123;
@@ -1805,7 +1804,6 @@ void RunBackupRefPtrImplAdvanceTest(
 
   protected_ptr = nullptr;
   allocator.root()->Free(ptr);
-#endif  // BUILDFLAG(BACKUP_REF_PTR_EXTRA_OOB_CHECKS)
 }
 
 TEST_F(BackupRefPtrTest, Advance) {
@@ -1899,7 +1897,6 @@ TEST_F(BackupRefPtrTest, GetDeltaElems) {
 volatile char g_volatile_char_to_ignore;
 
 TEST_F(BackupRefPtrTest, IndexOperator) {
-#if BUILDFLAG(BACKUP_REF_PTR_EXTRA_OOB_CHECKS)
   size_t requested_size = GetRequestSizeThatFills512BSlot();
   char* ptr = static_cast<char*>(allocator_.root()->Alloc(requested_size));
   {
@@ -1914,7 +1911,6 @@ TEST_F(BackupRefPtrTest, IndexOperator) {
 #endif
   }
   allocator_.root()->Free(ptr);
-#endif  // BUILDFLAG(BACKUP_REF_PTR_EXTRA_OOB_CHECKS)
 }
 
 bool IsQuarantineEmpty(partition_alloc::PartitionAllocator& allocator) {
-- 
2.44.0.rc1.240.g4c46232300-goog

