From 9ffa7626d4d4c63d358da1ab2d452b7f9b78197d Mon Sep 17 00:00:00 2001
From: Grace Cham <hscham@chromium.org>
Date: Fri, 22 Jul 2022 19:06:13 +0900
Subject: [PATCH] Revert "[Cast][Mojo] Support UDS abstract namespace for
 NamedPlatformChannel"

This reverts commit c521d561d028d22e9d9c827a2644871161752089.
---
 .../cpp/platform/named_platform_channel.cc    | 10 +---
 .../cpp/platform/named_platform_channel.h     | 11 +---
 .../platform/named_platform_channel_posix.cc  | 56 ++++++++++---------
 3 files changed, 33 insertions(+), 44 deletions(-)

diff --git a/mojo/public/cpp/platform/named_platform_channel.cc b/mojo/public/cpp/platform/named_platform_channel.cc
index 7ce2d363c9ba..3ddc8ecf63c1 100644
--- a/mojo/public/cpp/platform/named_platform_channel.cc
+++ b/mojo/public/cpp/platform/named_platform_channel.cc
@@ -46,15 +46,7 @@ void NamedPlatformChannel::PassServerNameOnCommandLine(
 PlatformChannelEndpoint NamedPlatformChannel::ConnectToServer(
     const ServerName& server_name) {
   DCHECK(!server_name.empty());
-  Options options = {.server_name = server_name};
-  return CreateClientEndpoint(options);
-}
-
-// static
-PlatformChannelEndpoint NamedPlatformChannel::ConnectToServer(
-    const Options& options) {
-  DCHECK(!options.server_name.empty());
-  return CreateClientEndpoint(options);
+  return CreateClientEndpoint(server_name);
 }
 
 // static
diff --git a/mojo/public/cpp/platform/named_platform_channel.h b/mojo/public/cpp/platform/named_platform_channel.h
index 00bbd1699076..9e79ba9a81bf 100644
--- a/mojo/public/cpp/platform/named_platform_channel.h
+++ b/mojo/public/cpp/platform/named_platform_channel.h
@@ -60,9 +60,6 @@ class COMPONENT_EXPORT(MOJO_CPP_PLATFORM) NamedPlatformChannel {
     // with a random name. This controls the directory where that happens.
     // Ignored if |server_name| was set explicitly.
     base::FilePath socket_dir;
-
-    // Use an abstract socket address instead of a filesystem path.
-    bool use_abstract_namespace = false;
 #endif
   };
 
@@ -106,11 +103,6 @@ class COMPONENT_EXPORT(MOJO_CPP_PLATFORM) NamedPlatformChannel {
   [[nodiscard]] static PlatformChannelEndpoint ConnectToServer(
       const ServerName& server_name);
 
-  // Like above, but passing an Options struct instead. |options.server_name|
-  // must be a non-empty string.
-  [[nodiscard]] static PlatformChannelEndpoint ConnectToServer(
-      const Options& options);
-
   // Like above, but extracts the server name from |command_line| using the
   // common |kNamedHandleSwitch| flag.
   [[nodiscard]] static PlatformChannelEndpoint ConnectToServer(
@@ -120,7 +112,8 @@ class COMPONENT_EXPORT(MOJO_CPP_PLATFORM) NamedPlatformChannel {
   static PlatformChannelServerEndpoint CreateServerEndpoint(
       const Options& options,
       ServerName* server_name);
-  static PlatformChannelEndpoint CreateClientEndpoint(const Options& options);
+  static PlatformChannelEndpoint CreateClientEndpoint(
+      const ServerName& server_name);
 
   ServerName server_name_;
   PlatformChannelServerEndpoint server_endpoint_;
diff --git a/mojo/public/cpp/platform/named_platform_channel_posix.cc b/mojo/public/cpp/platform/named_platform_channel_posix.cc
index f0235cdf2ff1..cbedae6c3c61 100644
--- a/mojo/public/cpp/platform/named_platform_channel_posix.cc
+++ b/mojo/public/cpp/platform/named_platform_channel_posix.cc
@@ -16,8 +16,6 @@
 #include "base/posix/eintr_wrapper.h"
 #include "base/rand_util.h"
 #include "base/strings/string_number_conversions.h"
-#include "net/base/sockaddr_storage.h"
-#include "net/base/sockaddr_util_posix.h"
 
 namespace mojo {
 
@@ -30,30 +28,33 @@ NamedPlatformChannel::ServerName GenerateRandomServerName(
       .value();
 }
 
-// This function fills in |addr_storage| with the appropriate data for the
-// socket as well as the data's length. Returns true on success, or false on
-// failure (typically because |server_name| violated the naming rules). On
-// Linux and Android, setting |use_abstract_namespace| to true will return a
-// socket address for an abstract non-filesystem socket.
+// This function fills in |unix_addr| with the appropriate data for the socket,
+// and sets |unix_addr_len| to the length of the data therein.
+// Returns true on success, or false on failure (typically because |server_name|
+// violated the naming rules).
 bool MakeUnixAddr(const NamedPlatformChannel::ServerName& server_name,
-                  bool use_abstract_namespace,
-                  net::SockaddrStorage* addr_storage) {
-  DCHECK(addr_storage);
+                  struct sockaddr_un* unix_addr,
+                  size_t* unix_addr_len) {
+  DCHECK(unix_addr);
+  DCHECK(unix_addr_len);
   DCHECK(!server_name.empty());
 
   constexpr size_t kMaxSocketNameLength = 104;
 
   // We reject server_name.length() == kMaxSocketNameLength to make room for the
-  // NUL terminator at the end of the string. For the Linux abstract namespace,
-  // the path has a leading NUL character instead (with no NUL terminator
-  // required). In both cases N+1 bytes are needed to fill the server name.
+  // NUL terminator at the end of the string.
   if (server_name.length() >= kMaxSocketNameLength) {
     LOG(ERROR) << "Socket name too long: " << server_name;
     return false;
   }
 
-  return net::FillUnixAddress(server_name, use_abstract_namespace,
-                              addr_storage);
+  // Create unix_addr structure.
+  memset(unix_addr, 0, sizeof(struct sockaddr_un));
+  unix_addr->sun_family = AF_UNIX;
+  strncpy(unix_addr->sun_path, server_name.c_str(), kMaxSocketNameLength);
+  *unix_addr_len =
+      offsetof(struct sockaddr_un, sun_path) + server_name.length();
+  return true;
 }
 
 // This function creates a unix domain socket, and set it as non-blocking.
@@ -98,8 +99,9 @@ PlatformChannelServerEndpoint NamedPlatformChannel::CreateServerEndpoint(
     return PlatformChannelServerEndpoint();
   }
 
-  net::SockaddrStorage storage;
-  if (!MakeUnixAddr(name, options.use_abstract_namespace, &storage))
+  struct sockaddr_un unix_addr;
+  size_t unix_addr_len;
+  if (!MakeUnixAddr(name, &unix_addr, &unix_addr_len))
     return PlatformChannelServerEndpoint();
 
   PlatformHandle handle = CreateUnixDomainSocket();
@@ -107,7 +109,8 @@ PlatformChannelServerEndpoint NamedPlatformChannel::CreateServerEndpoint(
     return PlatformChannelServerEndpoint();
 
   // Bind the socket.
-  if (bind(handle.GetFD().get(), storage.addr, storage.addr_len) < 0) {
+  if (bind(handle.GetFD().get(), reinterpret_cast<const sockaddr*>(&unix_addr),
+           unix_addr_len) < 0) {
     PLOG(ERROR) << "bind " << name;
     return PlatformChannelServerEndpoint();
   }
@@ -125,21 +128,22 @@ PlatformChannelServerEndpoint NamedPlatformChannel::CreateServerEndpoint(
 
 // static
 PlatformChannelEndpoint NamedPlatformChannel::CreateClientEndpoint(
-    const Options& options) {
-  DCHECK(!options.server_name.empty());
+    const ServerName& server_name) {
+  DCHECK(!server_name.empty());
 
-  net::SockaddrStorage storage;
-  if (!MakeUnixAddr(options.server_name, options.use_abstract_namespace,
-                    &storage))
+  struct sockaddr_un unix_addr;
+  size_t unix_addr_len;
+  if (!MakeUnixAddr(server_name, &unix_addr, &unix_addr_len))
     return PlatformChannelEndpoint();
 
   PlatformHandle handle = CreateUnixDomainSocket();
   if (!handle.is_valid())
     return PlatformChannelEndpoint();
 
-  if (HANDLE_EINTR(
-          connect(handle.GetFD().get(), storage.addr, storage.addr_len)) < 0) {
-    PLOG(ERROR) << "connect " << options.server_name;
+  if (HANDLE_EINTR(connect(handle.GetFD().get(),
+                           reinterpret_cast<sockaddr*>(&unix_addr),
+                           unix_addr_len)) < 0) {
+    PLOG(ERROR) << "connect " << server_name;
     return PlatformChannelEndpoint();
   }
   return PlatformChannelEndpoint(std::move(handle));
-- 
2.37.1.359.gd136c6c3e2-goog

