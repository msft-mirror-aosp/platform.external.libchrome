From eacb72284f699a9ee9833edd1a81eb58631e9bb6 Mon Sep 17 00:00:00 2001
From: Jeff Lin <jeffulin@google.com>
Date: Mon, 1 Jul 2024 15:37:35 +0800
Subject: [PATCH] Do not use boringssl in base::UnguessableToken

Introduced in r930012 (crrev.com/c/3343574).
Updated in r1230523 (crrev.com/c/5075453).
Updated in r1321254 (crrev.com/c/5669584).

Change-Id: I4035f5c236b9b2ca8b3c4f6296a36786cfe85ae7
---
 base/unguessable_token.cc | 22 +++++++++++-----------
 base/unguessable_token.h  | 17 ++++++++---------
 2 files changed, 19 insertions(+), 20 deletions(-)

diff --git a/base/unguessable_token.cc b/base/unguessable_token.cc
index ea33ca66f3..dfc6bc1b6f 100644
--- a/base/unguessable_token.cc
+++ b/base/unguessable_token.cc
@@ -12,9 +12,9 @@
 #include "base/rand_util.h"
 #include "build/build_config.h"
 
-#if !BUILDFLAG(IS_NACL)
-#include "third_party/boringssl/src/include/openssl/mem.h"
-#endif
+// #if !BUILDFLAG(IS_NACL)
+// #include "third_party/boringssl/src/include/openssl/mem.h"
+// #endif
 
 namespace base {
 
@@ -57,15 +57,15 @@ std::optional<UnguessableToken> UnguessableToken::DeserializeFromString(
   return UnguessableToken(token.value());
 }
 
-bool operator==(const UnguessableToken& lhs, const UnguessableToken& rhs) {
-#if BUILDFLAG(IS_NACL)
+bool UnguessableToken::operator==(const UnguessableToken& other) const {
+// #if BUILDFLAG(IS_NACL)
   // BoringSSL is unavailable for NaCl builds so it remains timing dependent.
-  return lhs.token_ == rhs.token_;
-#else
-  auto bytes = lhs.token_.AsBytes();
-  auto other_bytes = rhs.token_.AsBytes();
-  return CRYPTO_memcmp(bytes.data(), other_bytes.data(), bytes.size()) == 0;
-#endif
+  return token_ == other.token_;
+// #else
+//   auto bytes = lhs.token_.AsBytes();
+//   auto other_bytes = rhs.token_.AsBytes();
+//   return CRYPTO_memcmp(bytes.data(), other_bytes.data(), bytes.size()) == 0;
+// #endif
 }
 
 std::ostream& operator<<(std::ostream& out, const UnguessableToken& token) {
diff --git a/base/unguessable_token.h b/base/unguessable_token.h
index 2021d4b35e..49a97f9851 100644
--- a/base/unguessable_token.h
+++ b/base/unguessable_token.h
@@ -8,7 +8,6 @@
 #include <stdint.h>
 #include <string.h>
 
-#include <compare>
 #include <iosfwd>
 #include <string_view>
 #include <tuple>
@@ -107,12 +106,15 @@ class BASE_EXPORT UnguessableToken {
 
   span<const uint8_t, 16> AsBytes() const { return token_.AsBytes(); }
 
-  friend constexpr auto operator<=>(const UnguessableToken& lhs,
-                                    const UnguessableToken& rhs) = default;
+  constexpr bool operator<(const UnguessableToken& other) const {
+     return token_ < other.token_;
+   }
 
-  // operator== uses constant-time comparison for security where available.
-  friend BASE_EXPORT bool operator==(const UnguessableToken& lhs,
-                                     const UnguessableToken& rhs);
+  bool operator==(const UnguessableToken& other) const;
+
+  bool operator!=(const UnguessableToken& other) const {
+    return !(*this == other);
+  }
 
 #if defined(UNIT_TEST)
   static UnguessableToken CreateForTesting(uint64_t high, uint64_t low) {
@@ -129,9 +131,6 @@ class BASE_EXPORT UnguessableToken {
   base::Token token_;
 };
 
-BASE_EXPORT bool operator==(const UnguessableToken& lhs,
-                            const UnguessableToken& rhs);
-
 BASE_EXPORT std::ostream& operator<<(std::ostream& out,
                                      const UnguessableToken& token);
 
-- 
2.45.2.803.g4e1b14247a-goog

