From a329f693e03a692cf56e8cd57498eb88783d2762 Mon Sep 17 00:00:00 2001
From: hscham <hscham@google.com>
Date: Wed, 15 Dec 2021 12:35:45 +0900
Subject: [PATCH] Do not use boringssl in base::UnguessableToken

boringssl is not supported in libchrome.

Change-Id: I89657abfebc86671af5e55ec6f89047fcd576652
patch-name: long-term-0700-Do-not-use-boringssl-in-base-UnguessableToken.patch
---
 base/unguessable_token.cc | 18 +++++++++---------
 1 file changed, 9 insertions(+), 9 deletions(-)

diff --git a/base/unguessable_token.cc b/base/unguessable_token.cc
index aa7423f88d..46b28b6e11 100644
--- a/base/unguessable_token.cc
+++ b/base/unguessable_token.cc
@@ -11,9 +11,9 @@
 #include "base/rand_util.h"
 #include "build/build_config.h"
 
-#if !BUILDFLAG(IS_NACL)
-#include "third_party/boringssl/src/include/openssl/mem.h"
-#endif
+// #if !BUILDFLAG(IS_NACL)
+// #include "third_party/boringssl/src/include/openssl/mem.h"
+// #endif
 
 namespace base {
 
@@ -46,14 +46,14 @@ absl::optional<UnguessableToken> UnguessableToken::Deserialize(uint64_t high,
 }
 
 bool UnguessableToken::operator==(const UnguessableToken& other) const {
-#if BUILDFLAG(IS_NACL)
+// #if BUILDFLAG(IS_NACL)
   // BoringSSL is unavailable for NaCl builds so it remains timing dependent.
   return token_ == other.token_;
-#else
-  auto bytes = token_.AsBytes();
-  auto other_bytes = other.token_.AsBytes();
-  return CRYPTO_memcmp(bytes.data(), other_bytes.data(), bytes.size()) == 0;
-#endif
+// #else
+//   auto bytes = token_.AsBytes();
+//   auto other_bytes = other.token_.AsBytes();
+//   return CRYPTO_memcmp(bytes.data(), other_bytes.data(), bytes.size()) == 0;
+// #endif
 }
 
 std::ostream& operator<<(std::ostream& out, const UnguessableToken& token) {
-- 
2.42.0.582.g8ccd20d70d-goog

