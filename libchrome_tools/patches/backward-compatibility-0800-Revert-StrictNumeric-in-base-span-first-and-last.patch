From aab24073b1ce42da927879ad7a96dcde711c3b95 Mon Sep 17 00:00:00 2001
From: Ryo Hashimoto <hashimoto@chromium.org>
Date: Wed, 7 Feb 2024 06:32:11 +0000
Subject: [PATCH] Revert "`StrictNumeric` in `base::span::first(...)` and
 `last(...)`"

This reverts commit bc35667442bd8d5cc71a0da8eefff5bfe3b460d7.
---
 base/containers/span.h | 23 ++++++++++-------------
 1 file changed, 10 insertions(+), 13 deletions(-)

diff --git a/base/containers/span.h b/base/containers/span.h
index 8beadb6a0a..1edfb81e4a 100644
--- a/base/containers/span.h
+++ b/base/containers/span.h
@@ -207,9 +207,6 @@ constexpr size_t must_not_be_dynamic_extent() {
 // - The deduction guides from a contiguous range are folded into a single one,
 //   and treat borrowed ranges correctly.
 //
-// Other differences:
-// - Using StrictNumeric<size_t> instead of size_t where possible.
-//
 // Additions beyond the C++ standard draft
 // - as_chars() function.
 // - as_writable_chars() function.
@@ -306,14 +303,14 @@ class GSL_POINTER span {
     return span<T, Count>(data() + (size() - Count), Count);
   }
 
-  constexpr span<T> first(StrictNumeric<size_t> count) const noexcept {
-    CHECK_LE(size_t{count}, size());
+  constexpr span<T> first(size_t count) const noexcept {
+    CHECK_LE(count, size());
     return {data(), count};
   }
 
-  constexpr span<T> last(StrictNumeric<size_t> count) const noexcept {
-    CHECK_LE(size_t{count}, size());
-    return {data() + (size() - size_t{count}), count};
+  constexpr span<T> last(size_t count) const noexcept {
+    CHECK_LE(count, size());
+    return {data() + (size() - count), count};
   }
 
   template <size_t Offset, size_t Count = dynamic_extent>
@@ -512,14 +509,14 @@ class GSL_POINTER span<T, dynamic_extent, InternalPtrType> {
     return span<T, Count>(data() + (size() - Count), Count);
   }
 
-  constexpr span<T> first(StrictNumeric<size_t> count) const noexcept {
-    CHECK_LE(size_t{count}, size());
+  constexpr span<T> first(size_t count) const noexcept {
+    CHECK_LE(count, size());
     return {data(), count};
   }
 
-  constexpr span<T> last(StrictNumeric<size_t> count) const noexcept {
-    CHECK_LE(size_t{count}, size());
-    return {data() + (size() - size_t{count}), count};
+  constexpr span<T> last(size_t count) const noexcept {
+    CHECK_LE(count, size());
+    return {data() + (size() - count), count};
   }
 
   template <size_t Offset, size_t Count = dynamic_extent>
-- 
2.43.0.594.gd9cf4e227d-goog

