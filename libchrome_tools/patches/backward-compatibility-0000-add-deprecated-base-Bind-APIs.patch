From fc587a45532f2c4984f3e27e30ccae7d43993a9f Mon Sep 17 00:00:00 2001
From: Grace Cham <hscham@chromium.org>
Date: Fri, 14 Oct 2022 15:46:20 +0900
Subject: [PATCH] backward compatibility: add deprecated base::Bind APIs

Adds base::Callback, base::Bind, etc as there are still many usages in
CrOS.
TODO(b/272116782): remove when they are all migrated to
Once/Repeating variants.

Change-Id: I3a02c2624ed603d2afecbdd04fb589293565ab7a
patch-name: backward-compatibility-0000-add-deprecated-base-Bind-APIs.patch
---
 base/callback_list.h               | 3 +++
 base/cancelable_callback.h         | 4 ++++
 base/functional/bind.h             | 6 ++++++
 base/functional/callback_forward.h | 4 ++++
 4 files changed, 17 insertions(+)

diff --git a/base/callback_list.h b/base/callback_list.h
index bf1c0c5f97..b4e42f66b3 100644
--- a/base/callback_list.h
+++ b/base/callback_list.h
@@ -344,6 +344,9 @@ class RepeatingCallbackList
 using OnceClosureList = OnceCallbackList<void()>;
 using RepeatingClosureList = RepeatingCallbackList<void()>;
 
+template <typename Signature>
+using CallbackList = RepeatingCallbackList<Signature>;
+
 }  // namespace base
 
 #endif  // BASE_CALLBACK_LIST_H_
diff --git a/base/cancelable_callback.h b/base/cancelable_callback.h
index 73add8ffcc..09ff55bb70 100644
--- a/base/cancelable_callback.h
+++ b/base/cancelable_callback.h
@@ -146,6 +146,10 @@ using CancelableRepeatingCallback =
     internal::CancelableCallbackImpl<RepeatingCallback<Signature>>;
 using CancelableRepeatingClosure = CancelableRepeatingCallback<void()>;
 
+template <typename Signature>
+using CancelableCallback = CancelableRepeatingCallback<Signature>;
+using CancelableClosure = CancelableRepeatingClosure;
+
 }  // namespace base
 
 #endif  // BASE_CANCELABLE_CALLBACK_H_
diff --git a/base/functional/bind.h b/base/functional/bind.h
index 999c6d5d3f..d79996db5d 100644
--- a/base/functional/bind.h
+++ b/base/functional/bind.h
@@ -112,6 +112,12 @@ struct BindFailedCheckPreviousErrors {};
 BindFailedCheckPreviousErrors BindOnce(...);
 BindFailedCheckPreviousErrors BindRepeating(...);
 
+template <typename Functor, typename... Args>
+decltype(auto) Bind(Functor &&functor, Args &&...args) {
+  return BindRepeating(std::forward<Functor>(functor),
+                       std::forward<Args>(args)...);
+}
+
 // Unretained(), UnsafeDangling() and UnsafeDanglingUntriaged() allow binding a
 // non-refcounted class, and to disable refcounting on arguments that are
 // refcounted. The main difference is whether or not the raw pointers will be
diff --git a/base/functional/callback_forward.h b/base/functional/callback_forward.h
index 923fbef6e3..9ed3bb6440 100644
--- a/base/functional/callback_forward.h
+++ b/base/functional/callback_forward.h
@@ -19,6 +19,10 @@ class RepeatingCallback;
 using OnceClosure = OnceCallback<void()>;
 using RepeatingClosure = RepeatingCallback<void()>;
 
+template <typename Signature> using Callback = RepeatingCallback<Signature>;
+
+using Closure = RepeatingClosure;
+
 }  // namespace base
 
 #endif  // BASE_FUNCTIONAL_CALLBACK_FORWARD_H_
-- 
2.42.0.582.g8ccd20d70d-goog

