From 907da395a5d66b2ef6d995910bcfba32d3733fbb Mon Sep 17 00:00:00 2001
From: Grace Cham <hscham@chromium.org>
Date: Thu, 26 Jan 2023 16:59:59 +0900
Subject: [PATCH] Revert "Capture ObserverList stacks for all DCHECK builds"

This reverts commit 698997ff6bbf258b34e66dbe447622233c321732 and commit
f9ab58cc8d9d0f99fa702ccd6af8f04ba4153015.

Change-Id: I476dfaa0aa5f658b505cbef38bd00b8bc7fa4279
---
 base/observer_list.h            |  7 ++++---
 base/observer_list_internal.h   | 14 +++++++-------
 base/observer_list_threadsafe.h |  8 ++++----
 3 files changed, 15 insertions(+), 14 deletions(-)

diff --git a/base/observer_list.h b/base/observer_list.h
index 450ec23471..4f0728cc3c 100644
--- a/base/observer_list.h
+++ b/base/observer_list.h
@@ -349,7 +349,7 @@ class ObserverList {
   }
 
   std::string GetObserversCreationStackString() const {
-#if DCHECK_IS_ON()
+#if EXPENSIVE_DCHECKS_ARE_ON()
     std::string result;
 #if BUILDFLAG(IS_IOS)
     result += "Use go/observer-list-empty to interpret.\n";
@@ -360,8 +360,9 @@ class ObserverList {
     }
     return result;
 #else
-    return "For observer stack traces, build with `dcheck_always_on=true`.";
-#endif  // DCHECK_IS_ON()
+    return "For observer stack traces, build with "
+           "`enable_expensive_dchecks=true`.";
+#endif  // EXPENSIVE_DCHECKS_ARE_ON()
   }
 
   std::vector<ObserverStorageType> observers_;
diff --git a/base/observer_list_internal.h b/base/observer_list_internal.h
index e17c3114ab..76d733a32d 100644
--- a/base/observer_list_internal.h
+++ b/base/observer_list_internal.h
@@ -16,7 +16,7 @@
 #include "base/memory/weak_ptr.h"
 #include "base/observer_list_types.h"
 
-#if DCHECK_IS_ON()
+#if EXPENSIVE_DCHECKS_ARE_ON()
 #include "base/debug/stack_trace.h"
 #endif
 
@@ -47,17 +47,17 @@ class BASE_EXPORT UncheckedObserverAdapter {
     return static_cast<ObserverType*>(adapter.ptr_);
   }
 
-#if DCHECK_IS_ON()
+#if EXPENSIVE_DCHECKS_ARE_ON()
   std::string GetCreationStackString() const {
     return "Observer created at:\n" + stack_.ToString();
   }
-#endif  // DCHECK_IS_ON()
+#endif  // EXPENSIVE_DCHECKS_ARE_ON()
 
  private:
   raw_ptr<void, DanglingAcrossTasks> ptr_;
-#if DCHECK_IS_ON()
+#if EXPENSIVE_DCHECKS_ARE_ON()
   base::debug::StackTrace stack_;
-#endif  // DCHECK_IS_ON()
+#endif  // EXPENSIVE_DCHECKS_ARE_ON()
 };
 
 // Adapter for CheckedObserver types so that they can use the same syntax as a
@@ -109,13 +109,13 @@ class BASE_EXPORT CheckedObserverAdapter {
     return static_cast<ObserverType*>(adapter.weak_ptr_.get());
   }
 
-#if DCHECK_IS_ON()
+#if EXPENSIVE_DCHECKS_ARE_ON()
   std::string GetCreationStackString() const { return stack_.ToString(); }
 #endif
 
  private:
   WeakPtr<CheckedObserver> weak_ptr_;
-#if DCHECK_IS_ON()
+#if EXPENSIVE_DCHECKS_ARE_ON()
   base::debug::StackTrace stack_;
 #endif
 };
diff --git a/base/observer_list_threadsafe.h b/base/observer_list_threadsafe.h
index 790cddc294..f3630b02e4 100644
--- a/base/observer_list_threadsafe.h
+++ b/base/observer_list_threadsafe.h
@@ -139,7 +139,7 @@ class ObserverListThreadSafe : public internal::ObserverListThreadSafeBase {
     // to avoid execution of pending posted-tasks over removed or released
     // observers.
     const size_t observer_id = ++observer_id_counter_;
-#if DCHECK_IS_ON()
+#if EXPENSIVE_DCHECKS_ARE_ON()
     ObserverTaskRunnerInfo task_info = {task_runner, base::debug::StackTrace(),
                                         observer_id};
 #else
@@ -191,7 +191,7 @@ class ObserverListThreadSafe : public internal::ObserverListThreadSafeBase {
 
   // Verifies that the list is currently empty (i.e. there are no observers).
   void AssertEmpty() const {
-#if DCHECK_IS_ON()
+#if EXPENSIVE_DCHECKS_ARE_ON()
     AutoLock auto_lock(lock_);
     bool observers_is_empty = observers_.empty();
     DUMP_WILL_BE_CHECK(observers_is_empty)
@@ -275,7 +275,7 @@ class ObserverListThreadSafe : public internal::ObserverListThreadSafeBase {
   std::string GetObserversCreationStackStringLocked() const
       EXCLUSIVE_LOCKS_REQUIRED(lock_) {
     std::string result;
-#if DCHECK_IS_ON()
+#if EXPENSIVE_DCHECKS_ARE_ON()
     for (const auto& observer : observers_) {
       StrAppend(&result,
                 {observer.second.add_observer_stack_.ToString(), "\n"});
@@ -292,7 +292,7 @@ class ObserverListThreadSafe : public internal::ObserverListThreadSafeBase {
 
   struct ObserverTaskRunnerInfo {
     scoped_refptr<SequencedTaskRunner> task_runner;
-#if DCHECK_IS_ON()
+#if EXPENSIVE_DCHECKS_ARE_ON()
     base::debug::StackTrace add_observer_stack_;
 #endif
     size_t observer_id = 0;
-- 
2.41.0.255.g8b1d071c50-goog

