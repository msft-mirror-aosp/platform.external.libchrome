From c67effc769a21fd01db70960d1d282f5e784663c Mon Sep 17 00:00:00 2001
From: Nathan Muggli <nmuggli@google.com>
Date: Mon, 8 Jul 2024 10:15:38 -0600
Subject: [PATCH] Revert "[base/allocator] Support max alloc size with
 use_allocator = "none"."

Revert of r921558
When malloc of more than (or close to) max size is called, it should
return nullptr (and handled by caller) instead of crashing as the
original patch will do.

This reverts commit 324e03c9fba0fd78a721524032eeac43c80dd1db.
This partially reverts commit e558947377db0b8e4f66687fd3c272ab6c34963e
(The UncheckedRealloc pieces).

patch-name: long-term-1100-Revert-base-allocator-Support-max-alloc-size-with-us.patch
Change-Id: If83feeb40d469d4f91e5f13255b96d5a986a459a
---
 ...llocator_shim_default_dispatch_to_glibc.cc | 51 +------------------
 1 file changed, 2 insertions(+), 49 deletions(-)

diff --git a/base/allocator/partition_allocator/src/partition_alloc/shim/allocator_shim_default_dispatch_to_glibc.cc b/base/allocator/partition_allocator/src/partition_alloc/shim/allocator_shim_default_dispatch_to_glibc.cc
index 41c532544b..df219fe16b 100644
--- a/base/allocator/partition_allocator/src/partition_alloc/shim/allocator_shim_default_dispatch_to_glibc.cc
+++ b/base/allocator/partition_allocator/src/partition_alloc/shim/allocator_shim_default_dispatch_to_glibc.cc
@@ -2,8 +2,6 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include <limits>
-
 #include "partition_alloc/oom.h"
 #include "partition_alloc/partition_alloc_base/compiler_specific.h"
 #include "partition_alloc/partition_alloc_base/numerics/checked_math.h"
@@ -28,28 +26,7 @@ namespace {
 
 using allocator_shim::AllocatorDispatch;
 
-// Strictly speaking, it would make more sense to not subtract amything, but
-// other shims limit to something lower than INT_MAX (which is 0x7FFFFFFF on
-// most platforms), and tests expect that.
-constexpr size_t kMaxAllowedSize = std::numeric_limits<int>::max() - (1 << 12);
-
 void* GlibcMalloc(const AllocatorDispatch*, size_t size, void* context) {
-  // Cannot force glibc's malloc() to crash when a large size is requested, do
-  // it in the shim instead.
-  if (PA_UNLIKELY(size >= kMaxAllowedSize)) {
-    partition_alloc::TerminateBecauseOutOfMemory(size);
-  }
-
-  return __libc_malloc(size);
-}
-
-void* GlibcUncheckedMalloc(const AllocatorDispatch*,
-                           size_t size,
-                           void* context) {
-  if (PA_UNLIKELY(size >= kMaxAllowedSize)) {
-    return nullptr;
-  }
-
   return __libc_malloc(size);
 }
 
@@ -57,11 +34,6 @@ void* GlibcCalloc(const AllocatorDispatch*,
                   size_t n,
                   size_t size,
                   void* context) {
-  const auto total = partition_alloc::internal::base::CheckMul(n, size);
-  if (PA_UNLIKELY(!total.IsValid() || total.ValueOrDie() >= kMaxAllowedSize)) {
-    partition_alloc::TerminateBecauseOutOfMemory(size * n);
-  }
-
   return __libc_calloc(n, size);
 }
 
@@ -69,21 +41,6 @@ void* GlibcRealloc(const AllocatorDispatch*,
                    void* address,
                    size_t size,
                    void* context) {
-  if (PA_UNLIKELY(size >= kMaxAllowedSize)) {
-    partition_alloc::TerminateBecauseOutOfMemory(size);
-  }
-
-  return __libc_realloc(address, size);
-}
-
-void* GlibcUncheckedRealloc(const AllocatorDispatch*,
-                            void* address,
-                            size_t size,
-                            void* context) {
-  if (PA_UNLIKELY(size >= kMaxAllowedSize)) {
-    return nullptr;
-  }
-
   return __libc_realloc(address, size);
 }
 
@@ -91,10 +48,6 @@ void* GlibcMemalign(const AllocatorDispatch*,
                     size_t alignment,
                     size_t size,
                     void* context) {
-  if (PA_UNLIKELY(size >= kMaxAllowedSize)) {
-    partition_alloc::TerminateBecauseOutOfMemory(size);
-  }
-
   return __libc_memalign(alignment, size);
 }
 
@@ -122,11 +75,11 @@ size_t GlibcGetSizeEstimate(const AllocatorDispatch*,
 
 const AllocatorDispatch AllocatorDispatch::default_dispatch = {
     &GlibcMalloc,           /* alloc_function */
-    &GlibcUncheckedMalloc,  /* alloc_unchecked_function */
+    &GlibcMalloc,           /* alloc_unchecked_function */
     &GlibcCalloc,           /* alloc_zero_initialized_function */
     &GlibcMemalign,         /* alloc_aligned_function */
     &GlibcRealloc,          /* realloc_function */
-    &GlibcUncheckedRealloc, /* realloc_unchecked_function */
+    &GlibcRealloc,          /* realloc_unchecked_function */
     &GlibcFree,             /* free_function */
     &GlibcGetSizeEstimate,  /* get_size_estimate_function */
     nullptr,                /* good_size_function */
-- 
2.45.2.803.g4e1b14247a-goog

