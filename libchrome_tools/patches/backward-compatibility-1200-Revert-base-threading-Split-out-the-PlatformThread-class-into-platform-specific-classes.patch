From 0e660b2f1d4e35cf2cb082c8a74e9a650177ce8f Mon Sep 17 00:00:00 2001
From: Ren-Pei Zeng <kamesan@chromium.org>
Date: Thu, 20 Jul 2023 03:59:36 +0000
Subject: [PATCH] Revert "base/threading: Split out the PlatformThread class
 into platform-specific classes"

This reverts commit ef5c20e13ece0d90630dcadfba668bdb74ec8fe4.
---
 base/threading/platform_thread.cc       |  6 +-
 base/threading/platform_thread.h        | 75 +++++++++----------------
 base/threading/platform_thread_linux.cc | 10 ++--
 base/threading/platform_thread_posix.cc | 28 ++++-----
 4 files changed, 48 insertions(+), 71 deletions(-)

diff --git a/base/threading/platform_thread.cc b/base/threading/platform_thread.cc
index c246fecb15..d96b2237df 100644
--- a/base/threading/platform_thread.cc
+++ b/base/threading/platform_thread.cc
@@ -21,7 +21,7 @@ ABSL_CONST_INIT thread_local ThreadType current_thread_type =
 }  // namespace
 
 // static
-void PlatformThreadBase::SetCurrentThreadType(ThreadType thread_type) {
+void PlatformThread::SetCurrentThreadType(ThreadType thread_type) {
   MessagePumpType message_pump_type = MessagePumpType::DEFAULT;
   if (CurrentIOThread::IsSet()) {
     message_pump_type = MessagePumpType::IO;
@@ -35,12 +35,12 @@ void PlatformThreadBase::SetCurrentThreadType(ThreadType thread_type) {
 }
 
 // static
-ThreadType PlatformThreadBase::GetCurrentThreadType() {
+ThreadType PlatformThread::GetCurrentThreadType() {
   return current_thread_type;
 }
 
 // static
-absl::optional<TimeDelta> PlatformThreadBase::GetThreadLeewayOverride() {
+absl::optional<TimeDelta> PlatformThread::GetThreadLeewayOverride() {
 #if BUILDFLAG(IS_FUCHSIA)
   // On Fuchsia, all audio threads run with the CPU scheduling profile that uses
   // an interval of |kAudioSchedulingPeriod|. Using the default leeway may lead
diff --git a/base/threading/platform_thread.h b/base/threading/platform_thread.h
index 38cdaa3c94..a7553e1a12 100644
--- a/base/threading/platform_thread.h
+++ b/base/threading/platform_thread.h
@@ -132,17 +132,18 @@ enum class ThreadPriorityForTest : int {
   kMaxValue = kRealtimeAudio,
 };
 
+#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
+class ThreadTypeDelegate;
+#endif
+
 // A namespace for low-level thread functions.
-class BASE_EXPORT PlatformThreadBase {
+class BASE_EXPORT PlatformThread {
  public:
   // Implement this interface to run code on a background thread.  Your
   // ThreadMain method will be called on the newly created thread.
   class BASE_EXPORT Delegate {
    public:
-    virtual void ThreadMain() = 0;
-
 #if BUILDFLAG(IS_APPLE)
-    // TODO: Move this to the PlatformThreadApple class.
     // The interval at which the thread expects to have work to do. Zero if
     // unknown. (Example: audio buffer duration for real-time audio.) Is used to
     // optimize the thread real-time behavior. Is called on the newly created
@@ -150,13 +151,15 @@ class BASE_EXPORT PlatformThreadBase {
     virtual TimeDelta GetRealtimePeriod();
 #endif
 
+    virtual void ThreadMain() = 0;
+
    protected:
     virtual ~Delegate() = default;
   };
 
-  PlatformThreadBase() = delete;
-  PlatformThreadBase(const PlatformThreadBase&) = delete;
-  PlatformThreadBase& operator=(const PlatformThreadBase&) = delete;
+  PlatformThread() = delete;
+  PlatformThread(const PlatformThread&) = delete;
+  PlatformThread& operator=(const PlatformThread&) = delete;
 
   // Gets the current thread id, which may be useful for logging purposes.
   static PlatformThreadId CurrentId();
@@ -264,32 +267,7 @@ class BASE_EXPORT PlatformThreadBase {
   // Returns the override of task leeway if any.
   static absl::optional<TimeDelta> GetThreadLeewayOverride();
 
-  // Returns the default thread stack size set by chrome. If we do not
-  // explicitly set default size then returns 0.
-  static size_t GetDefaultThreadStackSize();
-
-  static ThreadPriorityForTest GetCurrentThreadPriorityForTest();
-};
-
-#if BUILDFLAG(IS_APPLE)
-class BASE_EXPORT PlatformThreadApple : public PlatformThreadBase {
- public:
-  // Stores the period value in TLS.
-  static void SetCurrentThreadRealtimePeriodValue(TimeDelta realtime_period);
-
-  // Signals that the feature list has been initialized which allows to check
-  // the feature's value now and initialize state. This prevents race
-  // conditions where the feature is being checked while it is being
-  // initialized, which can cause a crash.
-  static void InitFeaturesPostFieldTrial();
-};
-#endif  // BUILDFLAG(IS_APPLE)
-
 #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
-class ThreadTypeDelegate;
-
-class BASE_EXPORT PlatformThreadLinux : public PlatformThreadBase {
- public:
   // Sets a delegate which handles thread type changes for this process. This
   // must be externally synchronized with any call to SetCurrentThreadType.
   static void SetThreadTypeDelegate(ThreadTypeDelegate* delegate);
@@ -306,29 +284,28 @@ class BASE_EXPORT PlatformThreadLinux : public PlatformThreadBase {
   static void SetThreadType(PlatformThreadId process_id,
                             PlatformThreadId thread_id,
                             ThreadType thread_type);
-};
-#endif  // BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
+#endif
 
-#if BUILDFLAG(IS_CHROMEOS)
-class BASE_EXPORT PlatformThreadChromeOS : public PlatformThreadLinux {
- public:
-  // Signals that the feature list has been initialized. Used for preventing
-  // race conditions and crashes, see comments in PlatformThreadApple.
+#if BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_APPLE)
+  // Signals that the feature list has been initialized which allows to check
+  // the feature's value now and initialize state. This prevents race
+  // conditions where the feature is being checked while it is being
+  // initialized, which can cause a crash.
   static void InitFeaturesPostFieldTrial();
-};
-#endif  // BUILDFLAG(IS_CHROMEOS)
+#endif
+
+  // Returns the default thread stack size set by chrome. If we do not
+  // explicitly set default size then returns 0.
+  static size_t GetDefaultThreadStackSize();
 
-// Alias to the correct platform-specific class based on preprocessor directives
 #if BUILDFLAG(IS_APPLE)
-using PlatformThread = PlatformThreadApple;
-#elif BUILDFLAG(IS_CHROMEOS)
-using PlatformThread = PlatformThreadChromeOS;
-#elif BUILDFLAG(IS_LINUX)
-using PlatformThread = PlatformThreadLinux;
-#else
-using PlatformThread = PlatformThreadBase;
+  // Stores the period value in TLS.
+  static void SetCurrentThreadRealtimePeriodValue(TimeDelta realtime_period);
 #endif
 
+  static ThreadPriorityForTest GetCurrentThreadPriorityForTest();
+};
+
 namespace internal {
 
 void SetCurrentThreadType(ThreadType thread_type,
diff --git a/base/threading/platform_thread_linux.cc b/base/threading/platform_thread_linux.cc
index f1e8e886c1..b365237cac 100644
--- a/base/threading/platform_thread_linux.cc
+++ b/base/threading/platform_thread_linux.cc
@@ -394,7 +394,7 @@ GetCurrentThreadPriorityForPlatformForTest() {
 }  // namespace internal
 
 // static
-void PlatformThreadBase::SetName(const std::string& name) {
+void PlatformThread::SetName(const std::string& name) {
   ThreadIdNameManager::GetInstance()->SetName(name);
 
 #if !BUILDFLAG(IS_NACL) && !BUILDFLAG(IS_AIX)
@@ -419,7 +419,7 @@ void PlatformThreadBase::SetName(const std::string& name) {
 
 #if !BUILDFLAG(IS_NACL)
 // static
-void PlatformThreadLinux::SetThreadTypeDelegate(ThreadTypeDelegate* delegate) {
+void PlatformThread::SetThreadTypeDelegate(ThreadTypeDelegate* delegate) {
   // A component cannot override a delegate set by another component, thus
   // disallow setting a delegate when one already exists.
   DCHECK(!g_thread_type_delegate || !delegate);
@@ -430,9 +430,9 @@ void PlatformThreadLinux::SetThreadTypeDelegate(ThreadTypeDelegate* delegate) {
 
 #if !BUILDFLAG(IS_NACL) && !BUILDFLAG(IS_AIX)
 // static
-void PlatformThreadLinux::SetThreadType(ProcessId process_id,
-                                        PlatformThreadId thread_id,
-                                        ThreadType thread_type) {
+void PlatformThread::SetThreadType(ProcessId process_id,
+                                   PlatformThreadId thread_id,
+                                   ThreadType thread_type) {
   // For legacy schedtune interface
   SetThreadCgroupsForThreadType(thread_id, thread_type);
 
diff --git a/base/threading/platform_thread_posix.cc b/base/threading/platform_thread_posix.cc
index cb3794036f..6743b44020 100644
--- a/base/threading/platform_thread_posix.cc
+++ b/base/threading/platform_thread_posix.cc
@@ -209,7 +209,7 @@ void InvalidateTidCache() {
 #endif  // BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
 
 // static
-PlatformThreadId PlatformThreadBase::CurrentId() {
+PlatformThreadId PlatformThread::CurrentId() {
   // Pthreads doesn't have the concept of a thread ID, so we have to reach down
   // into the kernel.
 #if BUILDFLAG(IS_APPLE)
@@ -269,24 +269,24 @@ PlatformThreadId PlatformThreadBase::CurrentId() {
 }
 
 // static
-PlatformThreadRef PlatformThreadBase::CurrentRef() {
+PlatformThreadRef PlatformThread::CurrentRef() {
   return PlatformThreadRef(pthread_self());
 }
 
 // static
-PlatformThreadHandle PlatformThreadBase::CurrentHandle() {
+PlatformThreadHandle PlatformThread::CurrentHandle() {
   return PlatformThreadHandle(pthread_self());
 }
 
 #if !BUILDFLAG(IS_APPLE)
 // static
-void PlatformThreadBase::YieldCurrentThread() {
+void PlatformThread::YieldCurrentThread() {
   sched_yield();
 }
 #endif  // !BUILDFLAG(IS_APPLE)
 
 // static
-void PlatformThreadBase::Sleep(TimeDelta duration) {
+void PlatformThread::Sleep(TimeDelta duration) {
   struct timespec sleep_time, remaining;
 
   // Break the duration into seconds and nanoseconds.
@@ -301,12 +301,12 @@ void PlatformThreadBase::Sleep(TimeDelta duration) {
 }
 
 // static
-const char* PlatformThreadBase::GetName() {
+const char* PlatformThread::GetName() {
   return ThreadIdNameManager::GetInstance()->GetName(CurrentId());
 }
 
 // static
-bool PlatformThreadBase::CreateWithType(size_t stack_size,
+bool PlatformThread::CreateWithType(size_t stack_size,
                                     Delegate* delegate,
                                     PlatformThreadHandle* thread_handle,
                                     ThreadType thread_type,
@@ -316,12 +316,12 @@ bool PlatformThreadBase::CreateWithType(size_t stack_size,
 }
 
 // static
-bool PlatformThreadBase::CreateNonJoinable(size_t stack_size, Delegate* delegate) {
+bool PlatformThread::CreateNonJoinable(size_t stack_size, Delegate* delegate) {
   return CreateNonJoinableWithType(stack_size, delegate, ThreadType::kDefault);
 }
 
 // static
-bool PlatformThreadBase::CreateNonJoinableWithType(size_t stack_size,
+bool PlatformThread::CreateNonJoinableWithType(size_t stack_size,
                                                Delegate* delegate,
                                                ThreadType thread_type,
                                                MessagePumpType pump_type_hint) {
@@ -333,7 +333,7 @@ bool PlatformThreadBase::CreateNonJoinableWithType(size_t stack_size,
 }
 
 // static
-void PlatformThreadBase::Join(PlatformThreadHandle thread_handle) {
+void PlatformThread::Join(PlatformThreadHandle thread_handle) {
   // Joining another thread may block the current thread for a long time, since
   // the thread referred to by |thread_handle| may still be running long-lived /
   // blocking tasks.
@@ -343,7 +343,7 @@ void PlatformThreadBase::Join(PlatformThreadHandle thread_handle) {
 }
 
 // static
-void PlatformThreadBase::Detach(PlatformThreadHandle thread_handle) {
+void PlatformThread::Detach(PlatformThreadHandle thread_handle) {
   CHECK_EQ(0, pthread_detach(thread_handle.platform_handle()));
 }
 
@@ -352,7 +352,7 @@ void PlatformThreadBase::Detach(PlatformThreadHandle thread_handle) {
 #if !BUILDFLAG(IS_APPLE) && !BUILDFLAG(IS_FUCHSIA)
 
 // static
-bool PlatformThreadBase::CanChangeThreadType(ThreadType from, ThreadType to) {
+bool PlatformThread::CanChangeThreadType(ThreadType from, ThreadType to) {
 #if BUILDFLAG(IS_NACL)
   return false;
 #else
@@ -395,7 +395,7 @@ void SetCurrentThreadTypeImpl(ThreadType thread_type,
 }  // namespace internal
 
 // static
-ThreadPriorityForTest PlatformThreadBase::GetCurrentThreadPriorityForTest() {
+ThreadPriorityForTest PlatformThread::GetCurrentThreadPriorityForTest() {
 #if BUILDFLAG(IS_NACL)
   NOTIMPLEMENTED();
   return ThreadPriorityForTest::kNormal;
@@ -415,7 +415,7 @@ ThreadPriorityForTest PlatformThreadBase::GetCurrentThreadPriorityForTest() {
 #endif  // !BUILDFLAG(IS_APPLE) && !BUILDFLAG(IS_FUCHSIA)
 
 // static
-size_t PlatformThreadBase::GetDefaultThreadStackSize() {
+size_t PlatformThread::GetDefaultThreadStackSize() {
   pthread_attr_t attributes;
   pthread_attr_init(&attributes);
   return base::GetDefaultThreadStackSize(attributes);
-- 
2.41.0.255.g8b1d071c50-goog

