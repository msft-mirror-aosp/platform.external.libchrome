From a80d406c5490e84f044cb96d74d8b7cfa1367bad Mon Sep 17 00:00:00 2001
From: Kevin Lin <kevinptt@chromium.org>
Date: Fri, 31 Mar 2023 17:49:50 +0800
Subject: [PATCH] Revert "Remove base::Value::SetPath() and
 base::Value::SetStringPath()."

This reverts commit f25e157c5763ab02ac5d24a6f39a30f761ca2215.
---
 base/values.cc          | 58 +++++++++++++++++++++++++++++++++++++++++
 base/values.h           | 31 ++++++++++++++++++++++
 base/values_unittest.cc |  2 +-
 3 files changed, 90 insertions(+), 1 deletion(-)

diff --git a/base/values.cc b/base/values.cc
index cd41f9cfe1..909d93a9c6 100644
--- a/base/values.cc
+++ b/base/values.cc
@@ -1281,6 +1281,64 @@ Value* Value::FindListPath(StringPiece path) {
   return const_cast<Value*>(std::as_const(*this).FindListPath(path));
 }
 
+Value* Value::SetPath(StringPiece path, Value&& value) {
+  return GetDict().SetByDottedPath(path, std::move(value));
+}
+
+Value* Value::SetStringPath(StringPiece path, StringPiece value) {
+  return GetDict().SetByDottedPath(path, value);
+}
+
+Value* Value::SetStringPath(StringPiece path, std::string&& value) {
+  return GetDict().SetByDottedPath(path, std::move(value));
+}
+
+Value* Value::SetStringPath(StringPiece path, const char* value) {
+  return GetDict().SetByDottedPath(path, value);
+}
+
+Value* Value::SetStringPath(StringPiece path, StringPiece16 value) {
+  return GetDict().SetByDottedPath(path, value);
+}
+
+Value* Value::SetPath(std::initializer_list<StringPiece> path, Value&& value) {
+  DCHECK_GE(path.size(), 2u) << "Use SetKey() for a path of length 1.";
+  return SetPath(make_span(path.begin(), path.size()), std::move(value));
+}
+
+Value* Value::SetPath(span<const StringPiece> path, Value&& value) {
+  DCHECK(path.begin() != path.end());  // Can't be empty path.
+
+  // Walk/construct intermediate dictionaries. The last element requires
+  // special handling so skip it in this loop.
+  Value* cur = this;
+  auto cur_path = path.begin();
+  for (; (cur_path + 1) < path.end(); ++cur_path) {
+    if (!cur->is_dict()) {
+      return nullptr;
+    }
+
+    // Use lower_bound to avoid doing the search twice for missing keys.
+    const StringPiece path_component = *cur_path;
+    auto found = cur->GetDict().storage_.lower_bound(path_component);
+    if (found == cur->GetDict().storage_.end() ||
+        found->first != path_component) {
+      // No key found, insert one.
+      auto inserted = cur->GetDict().storage_.try_emplace(
+          found, path_component, std::make_unique<Value>(Type::DICT));
+      cur = inserted->second.get();
+    } else {
+      cur = found->second.get();
+    }
+  }
+
+  // "cur" will now contain the last dictionary to insert or replace into.
+  if (!cur->is_dict()) {
+    return nullptr;
+  }
+  return cur->SetKey(*cur_path, std::move(value));
+}
+
 Value::dict_iterator_proxy Value::DictItems() {
   return dict_iterator_proxy(&GetDict().storage_);
 }
diff --git a/base/values.h b/base/values.h
index 059bd425e0..0ff64447dd 100644
--- a/base/values.h
+++ b/base/values.h
@@ -855,6 +855,37 @@ class BASE_EXPORT GSL_OWNER Value {
   Value* FindListPath(StringPiece path);
   const Value* FindListPath(StringPiece path) const;
 
+  // Sets the given path, expanding and creating dictionary keys as necessary.
+  //
+  // If the current value is not a dictionary, the function returns nullptr. If
+  // path components do not exist, they will be created. If any but the last
+  // components matches a value that is not a dictionary, the function will fail
+  // (it will not overwrite the value) and return nullptr. The last path
+  // component will be unconditionally overwritten if it exists, and created if
+  // it doesn't.
+  //
+  // Note: If there is only one component in the path, use `SetKey()` instead.
+  // Note: Using `Set<Type>Path()` might be more convenient and efficient.
+  //
+  // DEPRECATED: Use `Value::Dict::SetByDottedPath()`.
+  Value* SetPath(StringPiece path, Value&& value);
+
+  // These setters are more convenient and efficient than the corresponding
+  // SetPath(...) call.
+  //
+  // DEPRECATED: Use `Value::Dict::SetByDottedPath()`.
+  Value* SetStringPath(StringPiece path, StringPiece value);
+  // DEPRECATED: Use `Value::Dict::SetByDottedPath()`.
+  Value* SetStringPath(StringPiece path, const char* value);
+  // DEPRECATED: Use `Value::Dict::SetByDottedPath()`.
+  Value* SetStringPath(StringPiece path, std::string&& value);
+  // DEPRECATED: Use `Value::Dict::SetByDottedPath()`.
+  Value* SetStringPath(StringPiece path, StringPiece16 value);
+
+  // DEPRECATED: Use `Value::Dict::SetByDottedPath()`.
+  Value* SetPath(std::initializer_list<StringPiece> path, Value&& value);
+  Value* SetPath(span<const StringPiece> path, Value&& value);
+
   using dict_iterator_proxy = detail::dict_iterator_proxy;
   using const_dict_iterator_proxy = detail::const_dict_iterator_proxy;
 
diff --git a/base/values_unittest.cc b/base/values_unittest.cc
index 6ea72298b9..f2ae442d70 100644
--- a/base/values_unittest.cc
+++ b/base/values_unittest.cc
@@ -1126,7 +1126,7 @@ TEST(ValuesTest, FindPath) {
   EXPECT_EQ(123, found->GetInt());
 }
 
-TEST(ValuesTest, SetByDottedPath) {
+TEST(ValuesTest, SetPath) {
   Value::Dict root;
 
   Value* inserted = root.SetByDottedPath("one.two", Value(123));
-- 
2.40.0.348.gf938b09366-goog

