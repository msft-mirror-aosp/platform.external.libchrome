From fc3bcc9cda511d315525ffee7a5cb47a6b06114a Mon Sep 17 00:00:00 2001
From: Brett Brotherton <bbrotherton@google.com>
Date: Tue, 8 Nov 2022 14:01:26 -0700
Subject: [PATCH] Revert "Reland "Make CHECK() and IMMEDIATE_CRASH()
 [[noreturn]]s""

This reverts commit ddaeb64e259c041c080f6aec29d280ace74a6781 and add
base::ImmediateCrash for migration directly to the new function,
already landed on upstream crrev.com/1066781.

Change-Id: I371b830a307f1424f877d238b7f612cde8976f4e
---
 base/check.h           |  8 +------
 base/immediate_crash.h | 52 ++++++++++++++++++++++++++++++++----------
 2 files changed, 41 insertions(+), 19 deletions(-)

diff --git a/base/check.h b/base/check.h
index cedafac1ae..b7d990a947 100644
--- a/base/check.h
+++ b/base/check.h
@@ -106,19 +106,13 @@ class BASE_EXPORT CheckError {
 #if defined(OFFICIAL_BUILD) && defined(NDEBUG) && \
     !BUILDFLAG(DCHECK_IS_CONFIGURABLE)
 
-// Note that this uses IMMEDIATE_CRASH_ALWAYS_INLINE to force-inline in debug
-// mode as well. See LoggingTest.CheckCausesDistinctBreakpoints.
-[[noreturn]] IMMEDIATE_CRASH_ALWAYS_INLINE void CheckFailure() {
-  IMMEDIATE_CRASH();
-}
-
 // Discard log strings to reduce code bloat.
 //
 // This is not calling BreakDebugger since this is called frequently, and
 // calling an out-of-line function instead of a noreturn inline macro prevents
 // compiler optimizations.
 #define CHECK(condition) \
-  UNLIKELY(!(condition)) ? logging::CheckFailure() : EAT_CHECK_STREAM_PARAMS()
+  UNLIKELY(!(condition)) ? IMMEDIATE_CRASH() : EAT_CHECK_STREAM_PARAMS()
 
 #define CHECK_WILL_STREAM() false
 
diff --git a/base/immediate_crash.h b/base/immediate_crash.h
index 6f7abeb973..80421cbe2e 100644
--- a/base/immediate_crash.h
+++ b/base/immediate_crash.h
@@ -126,10 +126,45 @@
     TRAP_SEQUENCE2_();   \
   } while (false)
 
-// This version of ALWAYS_INLINE inlines even in is_debug=true.
-// TODO(pbos): See if NDEBUG can be dropped from ALWAYS_INLINE as well, and if
-// so merge. Otherwise document why it cannot inline in debug in
-// base/compiler_specific.h.
+// CHECK() and the trap sequence can be invoked from a constexpr function.
+// This could make compilation fail on GCC, as it forbids directly using inline
+// asm inside a constexpr function. However, it allows calling a lambda
+// expression including the same asm.
+// The side effect is that the top of the stacktrace will not point to the
+// calling function, but to this anonymous lambda. This is still useful as the
+// full name of the lambda will typically include the name of the function that
+// calls CHECK() and the debugger will still break at the right line of code.
+#if !defined(COMPILER_GCC) || defined(__clang__)
+
+#define WRAPPED_TRAP_SEQUENCE_() TRAP_SEQUENCE_()
+
+#else
+
+#define WRAPPED_TRAP_SEQUENCE_() \
+  do {                           \
+    [] { TRAP_SEQUENCE_(); }();  \
+  } while (false)
+
+#endif  // !defined(COMPILER_GCC) || defined(__clang__)
+
+#if defined(__clang__) || defined(COMPILER_GCC)
+
+// __builtin_unreachable() hints to the compiler that this is noreturn and can
+// be packed in the function epilogue.
+#define IMMEDIATE_CRASH()     \
+  ({                          \
+    WRAPPED_TRAP_SEQUENCE_(); \
+    __builtin_unreachable();  \
+  })
+
+#else
+
+// This is supporting non-chromium user of logging.h to build with MSVC, like
+// pdfium. On MSVC there is no __builtin_unreachable().
+#define IMMEDIATE_CRASH() WRAPPED_TRAP_SEQUENCE_()
+
+#endif  // defined(__clang__) || defined(COMPILER_GCC)
+
 #if defined(COMPILER_GCC)
 #define IMMEDIATE_CRASH_ALWAYS_INLINE inline __attribute__((__always_inline__))
 #elif defined(COMPILER_MSVC)
@@ -139,19 +174,12 @@
 #endif
 
 namespace base {
-
 [[noreturn]] IMMEDIATE_CRASH_ALWAYS_INLINE void ImmediateCrash() {
   TRAP_SEQUENCE_();
 #if defined(__clang__) || defined(COMPILER_GCC)
   __builtin_unreachable();
 #endif  // defined(__clang__) || defined(COMPILER_GCC)
 }
-
-}  // namespace base
-
-// TODO(pbos): Migrate callers to base::ImmediateCrash(). This should be done
-// within a week or two so if you see this at or after November 2022 please ping
-// me.
-#define IMMEDIATE_CRASH() base::ImmediateCrash()
+}
 
 #endif  // BASE_IMMEDIATE_CRASH_H_
-- 
2.30.2

