From e16954bdc6f23b4ae06f55911ec32f34d8139732 Mon Sep 17 00:00:00 2001
From: Byron Lee <byronlee@google.com>
Date: Mon, 27 Nov 2023 15:57:43 +0000
Subject: [PATCH] Revert "[base] Split RunOnceCb<> -> RunOnceCb<> &
 RunOnceCbRepeatedly<>"

This reverts commit fd4139837adddc04e7544f017bb9fbf06e953a64.

Change-Id: I5c3bd915fe7b6869da358c2d0d6850fb4c1fad63
---
 base/test/gmock_callback_support.h | 69 ++++++++++++++++++++++++------
 1 file changed, 56 insertions(+), 13 deletions(-)

diff --git a/base/test/gmock_callback_support.h b/base/test/gmock_callback_support.h
index 3d5638abe2..822d7411c9 100644
--- a/base/test/gmock_callback_support.h
+++ b/base/test/gmock_callback_support.h
@@ -49,6 +49,60 @@ decltype(auto) RunImpl(Callback&& cb, Tuple&& tuple) {
       std::forward<Tuple>(tuple));
 }
 
+template <typename Callback, typename Tuple, size_t... Is>
+decltype(auto) DEPRECATED_RunImpl(Callback&& cb, Tuple&& tuple,
+                                  std::index_sequence<Is...>) {
+  return std::forward<Callback>(cb).Run(
+      std::get<Is>(std::forward<Tuple>(tuple))...);
+}
+
+// Invokes `cb` with the arguments stored in `tuple`. Both `cb` and `tuple` are
+// perfectly forwarded, allowing callers to specify whether they should be
+// passed by move or copy. Needs to dispatch to the three arguments version to
+// be able to construct a `std::index_sequence` of the corresponding size.
+template <typename Callback, typename Tuple>
+decltype(auto) DEPRECATED_RunImpl(Callback&& cb, Tuple&& tuple) {
+  return DEPRECATED_RunImpl(
+      std::forward<Callback>(cb), std::forward<Tuple>(tuple),
+      std::make_index_sequence<
+          std::tuple_size_v<std::remove_reference_t<Tuple>>>());
+}
+
+// Invoked when the arguments to a OnceCallback are copy constructible. In this
+// case the returned lambda will pass the arguments to the provided callback by
+// copy, allowing it to be used multiple times.
+template <size_t I, typename Tuple,
+          std::enable_if_t<std::is_copy_constructible_v<Tuple>, int> = 0>
+auto RunOnceCallbackImpl(Tuple&& tuple) {
+  return
+      [tuple = std::forward<Tuple>(tuple)](auto&&... args) -> decltype(auto) {
+        return DEPRECATED_RunImpl(
+            std::move(::base::gmock_callback_support_internal::get<I>(args...)),
+            tuple);
+      };
+}
+
+// Invoked when the arguments to a OnceCallback are not copy constructible. In
+// this case the returned lambda will pass the arguments to the provided
+// callback by move, allowing it to be only used once.
+template <size_t I, typename Tuple,
+          std::enable_if_t<!std::is_copy_constructible_v<Tuple>, int> = 0>
+auto RunOnceCallbackImpl(Tuple&& tuple) {
+  // Mock actions need to be copyable, but `tuple` is not. Wrap it in in a
+  // `scoped_refptr` to allow it to be copied.
+  auto tuple_ptr = base::MakeRefCounted<base::RefCountedData<Tuple>>(
+      std::forward<Tuple>(tuple));
+  return [tuple_ptr =
+              std::move(tuple_ptr)](auto&&... args) mutable -> decltype(auto) {
+    // Since running the action will move out of the arguments, `tuple_ptr` is
+    // nulled out, so that attempting to run it twice will result in a run-time
+    // crash.
+    return DEPRECATED_RunImpl(
+        std::move(::base::gmock_callback_support_internal::get<I>(args...)),
+        std::move(std::exchange(tuple_ptr, nullptr)->data));
+  };
+}
+
 }  // namespace gmock_callback_support_internal
 
 namespace test {
@@ -137,19 +191,8 @@ auto RunOnceCallback(RunArgs&&... run_args) {
   // Mock actions have to be copyable. However, since this action is only
   // supposed to be invoked once and might contain move-only arguments, the arg
   // tuple is explicitly wrapped as RefCountedData<> to allow shallow copies.
-  return
-      [tuple_ptr = gmock_callback_support_internal::WrapTupleAsRefCountedData(
-           std::make_tuple(std::forward<RunArgs>(run_args)...))](
-          auto&&... args) -> decltype(auto) {
-        CHECK(tuple_ptr->data)
-            << "A RunOnceCallback() action must be called at most once. "
-               "Use RunOnceCallbackRepeatedly() for invoking a "
-               "OnceCallback<> more than once.";
-        auto data = std::exchange(tuple_ptr->data, nullptr);
-        return gmock_callback_support_internal::RunImpl(
-            std::move(gmock_callback_support_internal::get<I>(args...)),
-            std::move(*data));
-      };
+  return ::base::gmock_callback_support_internal::RunOnceCallbackImpl<I>(
+      std::make_tuple(std::forward<RunArgs>(run_args)...));
 }
 
 template <size_t I, typename... RunArgs>
-- 
2.43.0.rc1.413.gea7ed67945-goog

