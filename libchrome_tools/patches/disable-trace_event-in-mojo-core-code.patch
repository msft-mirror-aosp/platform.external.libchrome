From 9490dd3a4f349783b59550664a3d76bc54745482 Mon Sep 17 00:00:00 2001
From: hscham <hscham@chromium.org>
Date: Thu, 30 Sep 2021 10:35:34 +0900
Subject: [PATCH] Disable trace_event in mojo core code

Change-Id: I37931d04097f90396ba3f59b1397a0a6ad6067ce
---
 mojo/core/channel.cc                 |   5 +-
 mojo/core/core.cc                    |  10 +--
 mojo/core/handle_table.cc            | 110 +++++++++++++--------------
 mojo/core/handle_table.h             |  10 +--
 mojo/core/message_pipe_dispatcher.cc |   2 +-
 mojo/core/user_message_impl.cc       |  72 +++++++++---------
 6 files changed, 106 insertions(+), 103 deletions(-)

diff --git a/mojo/core/channel.cc b/mojo/core/channel.cc
index 24dc3742ef81..3e3393ba5b7e 100644
--- a/mojo/core/channel.cc
+++ b/mojo/core/channel.cc
@@ -17,7 +17,8 @@
 #include "base/memory/ptr_util.h"
 #include "base/numerics/safe_math.h"
 #include "base/process/process_handle.h"
-#include "base/trace_event/typed_macros.h"
+// libchrome does not support trace events
+// #include "base/trace_event/typed_macros.h"
 #include "build/build_config.h"
 #include "mojo/core/configuration.h"
 #include "mojo/core/core.h"
@@ -840,8 +841,10 @@ bool Channel::OnReadComplete(size_t bytes_read, size_t* next_read_size_hint) {
 Channel::DispatchResult Channel::TryDispatchMessage(
     base::span<const char> buffer,
     size_t* size_hint) {
+#if 0
   TRACE_EVENT(TRACE_DISABLED_BY_DEFAULT("toplevel.ipc"),
               "Mojo dispatch message");
+#endif
 
   bool did_consume_message = false;
 
diff --git a/mojo/core/core.cc b/mojo/core/core.cc
index 35a3d3c477aa..d4476c3f2052 100644
--- a/mojo/core/core.cc
+++ b/mojo/core/core.cc
@@ -22,7 +22,7 @@
 #include "base/strings/string_piece.h"
 #include "base/threading/thread_task_runner_handle.h"
 #include "base/time/time.h"
-#include "base/trace_event/memory_dump_manager.h"
+// #include "base/trace_event/memory_dump_manager.h"
 #include "build/build_config.h"
 #include "mojo/core/channel.h"
 #include "mojo/core/configuration.h"
@@ -112,8 +112,8 @@ void RunMojoProcessErrorHandler(
 
 Core::Core() {
   handles_ = std::make_unique<HandleTable>();
-  base::trace_event::MemoryDumpManager::GetInstance()->RegisterDumpProvider(
-      handles_.get(), "MojoHandleTable", nullptr);
+ //  base::trace_event::MemoryDumpManager::GetInstance()->RegisterDumpProvider(
+ //      handles_.get(), "MojoHandleTable", nullptr);
 }
 
 Core::~Core() {
@@ -126,8 +126,8 @@ Core::~Core() {
                              base::BindOnce(&Core::PassNodeControllerToIOThread,
                                             std::move(node_controller_)));
   }
-  base::trace_event::MemoryDumpManager::GetInstance()
-      ->UnregisterAndDeleteDumpProviderSoon(std::move(handles_));
+  // base::trace_event::MemoryDumpManager::GetInstance()
+  //     ->UnregisterAndDeleteDumpProviderSoon(std::move(handles_));
 }
 
 void Core::SetIOTaskRunner(
diff --git a/mojo/core/handle_table.cc b/mojo/core/handle_table.cc
index 9426281d73f0..5d3f4dbd0b69 100644
--- a/mojo/core/handle_table.cc
+++ b/mojo/core/handle_table.cc
@@ -8,35 +8,35 @@
 
 #include <limits>
 
-#include "base/trace_event/memory_dump_manager.h"
+// #include "base/trace_event/memory_dump_manager.h"
 
 namespace mojo {
 namespace core {
 
 namespace {
 
-const char* GetNameForDispatcherType(Dispatcher::Type type) {
-  switch (type) {
-    case Dispatcher::Type::UNKNOWN:
-      return "unknown";
-    case Dispatcher::Type::MESSAGE_PIPE:
-      return "message_pipe";
-    case Dispatcher::Type::DATA_PIPE_PRODUCER:
-      return "data_pipe_producer";
-    case Dispatcher::Type::DATA_PIPE_CONSUMER:
-      return "data_pipe_consumer";
-    case Dispatcher::Type::SHARED_BUFFER:
-      return "shared_buffer";
-    case Dispatcher::Type::WATCHER:
-      return "watcher";
-    case Dispatcher::Type::PLATFORM_HANDLE:
-      return "platform_handle";
-    case Dispatcher::Type::INVITATION:
-      return "invitation";
-  }
-  NOTREACHED();
-  return "unknown";
-}
+// const char* GetNameForDispatcherType(Dispatcher::Type type) {
+//   switch (type) {
+//     case Dispatcher::Type::UNKNOWN:
+//       return "unknown";
+//     case Dispatcher::Type::MESSAGE_PIPE:
+//       return "message_pipe";
+//     case Dispatcher::Type::DATA_PIPE_PRODUCER:
+//       return "data_pipe_producer";
+//     case Dispatcher::Type::DATA_PIPE_CONSUMER:
+//       return "data_pipe_consumer";
+//     case Dispatcher::Type::SHARED_BUFFER:
+//       return "shared_buffer";
+//     case Dispatcher::Type::WATCHER:
+//       return "watcher";
+//     case Dispatcher::Type::PLATFORM_HANDLE:
+//       return "platform_handle";
+//     case Dispatcher::Type::INVITATION:
+//       return "invitation";
+//   }
+//   NOTREACHED();
+//   return "unknown";
+// }
 
 }  // namespace
 
@@ -158,38 +158,38 @@ void HandleTable::GetActiveHandlesForTest(std::vector<MojoHandle>* handles) {
 }
 
 // MemoryDumpProvider implementation.
-bool HandleTable::OnMemoryDump(const base::trace_event::MemoryDumpArgs& args,
-                               base::trace_event::ProcessMemoryDump* pmd) {
-  // Create entries for all relevant dispatcher types to ensure they are present
-  // in the final dump.
-  std::map<Dispatcher::Type, int> handle_count;
-  handle_count[Dispatcher::Type::MESSAGE_PIPE];
-  handle_count[Dispatcher::Type::DATA_PIPE_PRODUCER];
-  handle_count[Dispatcher::Type::DATA_PIPE_CONSUMER];
-  handle_count[Dispatcher::Type::SHARED_BUFFER];
-  handle_count[Dispatcher::Type::WATCHER];
-  handle_count[Dispatcher::Type::PLATFORM_HANDLE];
-  handle_count[Dispatcher::Type::INVITATION];
-
-  // Count the number of each dispatcher type.
-  {
-    base::AutoLock lock(GetLock());
-    for (const auto& entry : handles_) {
-      ++handle_count[entry.second.dispatcher->GetType()];
-    }
-  }
-
-  for (const auto& entry : handle_count) {
-    base::trace_event::MemoryAllocatorDump* inner_dump =
-        pmd->CreateAllocatorDump(std::string("mojo/") +
-                                 GetNameForDispatcherType(entry.first));
-    inner_dump->AddScalar(
-        base::trace_event::MemoryAllocatorDump::kNameObjectCount,
-        base::trace_event::MemoryAllocatorDump::kUnitsObjects, entry.second);
-  }
-
-  return true;
-}
+// bool HandleTable::OnMemoryDump(const base::trace_event::MemoryDumpArgs& args,
+//                                base::trace_event::ProcessMemoryDump* pmd) {
+//   // Create entries for all relevant dispatcher types to ensure they are present
+//   // in the final dump.
+//   std::map<Dispatcher::Type, int> handle_count;
+//   handle_count[Dispatcher::Type::MESSAGE_PIPE];
+//   handle_count[Dispatcher::Type::DATA_PIPE_PRODUCER];
+//   handle_count[Dispatcher::Type::DATA_PIPE_CONSUMER];
+//   handle_count[Dispatcher::Type::SHARED_BUFFER];
+//   handle_count[Dispatcher::Type::WATCHER];
+//   handle_count[Dispatcher::Type::PLATFORM_HANDLE];
+//   handle_count[Dispatcher::Type::INVITATION];
+
+//   // Count the number of each dispatcher type.
+//   {
+//     base::AutoLock lock(GetLock());
+//     for (const auto& entry : handles_) {
+//       ++handle_count[entry.second.dispatcher->GetType()];
+//     }
+//   }
+
+//   for (const auto& entry : handle_count) {
+//     base::trace_event::MemoryAllocatorDump* inner_dump =
+//         pmd->CreateAllocatorDump(std::string("mojo/") +
+//                                  GetNameForDispatcherType(entry.first));
+//     inner_dump->AddScalar(
+//         base::trace_event::MemoryAllocatorDump::kNameObjectCount,
+//         base::trace_event::MemoryAllocatorDump::kUnitsObjects, entry.second);
+//   }
+
+//   return true;
+// }
 
 HandleTable::Entry::Entry() = default;
 
diff --git a/mojo/core/handle_table.h b/mojo/core/handle_table.h
index 7a810357b14b..f0922e0f91a3 100644
--- a/mojo/core/handle_table.h
+++ b/mojo/core/handle_table.h
@@ -13,7 +13,7 @@
 #include "base/gtest_prod_util.h"
 #include "base/macros.h"
 #include "base/synchronization/lock.h"
-#include "base/trace_event/memory_dump_provider.h"
+// #include "base/trace_event/memory_dump_provider.h"
 #include "mojo/core/dispatcher.h"
 #include "mojo/core/system_impl_export.h"
 #include "mojo/public/c/system/types.h"
@@ -57,11 +57,11 @@ class MOJO_SYSTEM_IMPL_EXPORT HandleTable {
   void GetActiveHandlesForTest(std::vector<MojoHandle>* handles);
 
  private:
-  FRIEND_TEST_ALL_PREFIXES(HandleTableTest, OnMemoryDump);
+  // FRIEND_TEST_ALL_PREFIXES(HandleTableTest, OnMemoryDump);
 
-  MemoryDumpProvider implementation.
-  bool OnMemoryDump(const base::trace_event::MemoryDumpArgs& args,
-                    base::trace_event::ProcessMemoryDump* pmd) override;
+  // MemoryDumpProvider implementation.
+  // bool OnMemoryDump(const base::trace_event::MemoryDumpArgs& args,
+  //                   base::trace_event::ProcessMemoryDump* pmd) override;
 
   struct Entry {
     Entry();
diff --git a/mojo/core/message_pipe_dispatcher.cc b/mojo/core/message_pipe_dispatcher.cc
index 3b057ec39b8b..bbb14f40ed63 100644
--- a/mojo/core/message_pipe_dispatcher.cc
+++ b/mojo/core/message_pipe_dispatcher.cc
@@ -10,7 +10,7 @@
 #include "base/logging.h"
 #include "base/macros.h"
 #include "base/memory/ref_counted.h"
-#include "base/trace_event/trace_event.h"
+// #include "base/trace_event/trace_event.h"
 #include "base/trace_event/trace_event_stub.h"
 #include "mojo/core/core.h"
 #include "mojo/core/node_controller.h"
diff --git a/mojo/core/user_message_impl.cc b/mojo/core/user_message_impl.cc
index ec0686b629d1..026a28067aee 100644
--- a/mojo/core/user_message_impl.cc
+++ b/mojo/core/user_message_impl.cc
@@ -13,10 +13,10 @@
 #include "base/no_destructor.h"
 #include "base/numerics/safe_conversions.h"
 #include "base/numerics/safe_math.h"
-#include "base/trace_event/memory_allocator_dump.h"
-#include "base/trace_event/memory_dump_manager.h"
-#include "base/trace_event/memory_dump_provider.h"
-#include "base/trace_event/trace_event.h"
+// #include "base/trace_event/memory_allocator_dump.h"
+// #include "base/trace_event/memory_dump_manager.h"
+// #include "base/trace_event/memory_dump_provider.h"
+// #include "base/trace_event/trace_event.h"
 #include "mojo/core/configuration.h"
 #include "mojo/core/core.h"
 #include "mojo/core/node_channel.h"
@@ -277,36 +277,36 @@ void DecrementMessageCount() {
   base::subtle::NoBarrier_AtomicIncrement(&g_message_count, -1);
 }
 
-class MessageMemoryDumpProvider : public base::trace_event::MemoryDumpProvider {
- public:
-  MessageMemoryDumpProvider() {
-    base::trace_event::MemoryDumpManager::GetInstance()->RegisterDumpProvider(
-        this, "MojoMessages", nullptr);
-  }
-
-  ~MessageMemoryDumpProvider() override {
-    base::trace_event::MemoryDumpManager::GetInstance()->UnregisterDumpProvider(
-        this);
-  }
-
- private:
-  // base::trace_event::MemoryDumpProvider:
-  bool OnMemoryDump(const base::trace_event::MemoryDumpArgs& args,
-                    base::trace_event::ProcessMemoryDump* pmd) override {
-    auto* dump = pmd->CreateAllocatorDump("mojo/messages");
-    dump->AddScalar(base::trace_event::MemoryAllocatorDump::kNameObjectCount,
-                    base::trace_event::MemoryAllocatorDump::kUnitsObjects,
-                    base::subtle::NoBarrier_Load(&g_message_count));
-    return true;
-  }
-
-  DISALLOW_COPY_AND_ASSIGN(MessageMemoryDumpProvider);
-};
-
-void EnsureMemoryDumpProviderExists() {
-  static base::NoDestructor<MessageMemoryDumpProvider> provider;
-  ALLOW_UNUSED_LOCAL(provider);
-}
+// class MessageMemoryDumpProvider : public base::trace_event::MemoryDumpProvider {
+//  public:
+//   MessageMemoryDumpProvider() {
+//     base::trace_event::MemoryDumpManager::GetInstance()->RegisterDumpProvider(
+//         this, "MojoMessages", nullptr);
+//   }
+
+//   ~MessageMemoryDumpProvider() override {
+//     base::trace_event::MemoryDumpManager::GetInstance()->UnregisterDumpProvider(
+//         this);
+//   }
+
+//  private:
+//   // base::trace_event::MemoryDumpProvider:
+//   bool OnMemoryDump(const base::trace_event::MemoryDumpArgs& args,
+//                     base::trace_event::ProcessMemoryDump* pmd) override {
+//     auto* dump = pmd->CreateAllocatorDump("mojo/messages");
+//     dump->AddScalar(base::trace_event::MemoryAllocatorDump::kNameObjectCount,
+//                     base::trace_event::MemoryAllocatorDump::kUnitsObjects,
+//                     base::subtle::NoBarrier_Load(&g_message_count));
+//     return true;
+//   }
+
+//   DISALLOW_COPY_AND_ASSIGN(MessageMemoryDumpProvider);
+// };
+
+// void EnsureMemoryDumpProviderExists() {
+//   static base::NoDestructor<MessageMemoryDumpProvider> provider;
+//   ALLOW_UNUSED_LOCAL(provider);
+// }
 
 }  // namespace
 
@@ -678,7 +678,7 @@ UserMessageImpl::UserMessageImpl(ports::UserMessageEvent* message_event,
     : ports::UserMessage(&kUserMessageTypeInfo),
       message_event_(message_event),
       unlimited_size_((flags & MOJO_CREATE_MESSAGE_FLAG_UNLIMITED_SIZE) != 0) {
-  EnsureMemoryDumpProviderExists();
+  // EnsureMemoryDumpProviderExists();
   IncrementMessageCount();
 }
 
@@ -697,7 +697,7 @@ UserMessageImpl::UserMessageImpl(ports::UserMessageEvent* message_event,
       header_size_(header_size),
       user_payload_(user_payload),
       user_payload_size_(user_payload_size) {
-  EnsureMemoryDumpProviderExists();
+  // EnsureMemoryDumpProviderExists();
   IncrementMessageCount();
 }
 
-- 
2.33.0.882.g93a45727a2-goog

