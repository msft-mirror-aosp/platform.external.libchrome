From c9fdc6ccbe99f02fb1ace41aa44b131111d14b26 Mon Sep 17 00:00:00 2001
From: Ryo Hashimoto <hashimoto@chromium.org>
Date: Mon, 17 Mar 2025 17:57:51 +0900
Subject: [PATCH] Revert "Log path/to/filename:line"

This reverts commit 22cee264b3adfb1d7126a74b933ccd6b932802a0.
---
 base/check_unittest.cc                       |  5 ++---
 base/logging.cc                              | 21 ++++++--------------
 base/logging_chromeos.cc                     |  2 +-
 base/test/launcher/test_launcher.cc          |  8 +-------
 base/test/launcher/test_launcher_unittest.cc |  9 +++------
 5 files changed, 13 insertions(+), 32 deletions(-)

diff --git a/base/check_unittest.cc b/base/check_unittest.cc
index fd5287a7b8..24df65ed84 100644
--- a/base/check_unittest.cc
+++ b/base/check_unittest.cc
@@ -60,9 +60,8 @@ class ScopedExpectDumpWithoutCrashing {
 };
 
 MATCHER_P2(LogErrorMatches, line, expected_msg, "") {
-  EXPECT_THAT(arg,
-              testing::HasSubstr(base::StringPrintf(
-                  "%s:%d] ", base::Location::Current().file_name(), line)));
+  EXPECT_THAT(arg, testing::HasSubstr(
+                       base::StringPrintf("check_unittest.cc(%d)] ", line)));
   if (std::string(expected_msg).find("=~") == 0) {
     EXPECT_THAT(std::string(arg),
                 testing::ContainsRegex(std::string(expected_msg).substr(2)));
diff --git a/base/logging.cc b/base/logging.cc
index bccc6c9eca..e996f8c614 100644
--- a/base/logging.cc
+++ b/base/logging.cc
@@ -960,20 +960,11 @@ void LogMessage::Init(const char* file, int line) {
   // Don't let actions from this method affect the system error after returning.
   base::ScopedClearLastError scoped_clear_last_error;
 
-  // Most logging initializes `file` from __FILE__. Unfortunately, because we
-  // build from out/Foo we get a `../../` (or \) prefix for all of our
-  // __FILE__s. This isn't true for base::Location::Current() which already does
-  // the stripping (and is used for some logging, especially CHECKs).
-  //
-  // Here we strip the first 6 (../../ or ..\..\) characters if `file` starts
-  // with `.` but defensively clamp to strlen(file) just in case.
-  //
-  // TODO(pbos): Consider migrating LogMessage and the LOG() macros to use
-  // base::Location directly. See base/check.h for inspiration.
-  const std::string_view filename =
-      file[0] == '.' ? std::string_view(file).substr(
-                           std::min(std::size_t{6}, strlen(file)))
-                     : file;
+  std::string_view filename(file);
+  size_t last_slash_pos = filename.find_last_of("\\/");
+  if (last_slash_pos != std::string_view::npos) {
+    filename.remove_prefix(last_slash_pos + 1);
+  }
 
 #if BUILDFLAG(IS_CHROMEOS)
   if (g_log_format == LogFormat::LOG_FORMAT_SYSLOG) {
@@ -1027,7 +1018,7 @@ void LogMessage::Init(const char* file, int line) {
     } else {
       stream_ << "VERBOSE" << -severity_;
     }
-    stream_ << ":" << filename << ":" << line << "] ";
+    stream_ << ":" << filename << "(" << line << ")] ";
   }
   message_start_ = stream_.str().length();
 }
diff --git a/base/logging_chromeos.cc b/base/logging_chromeos.cc
index 834b8adca3..0b43619980 100644
--- a/base/logging_chromeos.cc
+++ b/base/logging_chromeos.cc
@@ -86,7 +86,7 @@ void LogMessage::InitWithSyslogPrefix(std::string_view filename,
     stream_ << "]";
   }
   stream_ << ": ";
-  stream_ << "[" << filename << ":" << line << "] ";
+  stream_ << "[" << filename << "(" << line << ")] ";
 }
 
 }  // namespace logging
diff --git a/base/test/launcher/test_launcher.cc b/base/test/launcher/test_launcher.cc
index 163fb4f806..2497ccbbd0 100644
--- a/base/test/launcher/test_launcher.cc
+++ b/base/test/launcher/test_launcher.cc
@@ -231,13 +231,7 @@ const size_t kOutputSnippetLinesLimit = 5000;
 
 // Limit of output snippet size. Exceeding this limit
 // results in truncating the output and failing the test.
-// TODO(pbos): Investigate lowering this number (it used to be 300k before
-// logging lines got longer, but even that seems excessive). If we need this to
-// be even that high then try to figure out why and document that here. The
-// author of this comment assumes that the prior limit was set to be submittable
-// with the tests that were checked in at the time rather than thinking that
-// logging 300k is a good threshold.
-const size_t kOutputSnippetBytesLimit = 500 * 1024;
+const size_t kOutputSnippetBytesLimit = 300 * 1024;
 
 // Limit of seed values for gtest shuffling. Arbitrary, but based on
 // gtest's similarly arbitrary choice.
diff --git a/base/test/launcher/test_launcher_unittest.cc b/base/test/launcher/test_launcher_unittest.cc
index d594ca794f..ec9740eda6 100644
--- a/base/test/launcher/test_launcher_unittest.cc
+++ b/base/test/launcher/test_launcher_unittest.cc
@@ -43,8 +43,6 @@ using ::testing::InvokeWithoutArgs;
 using ::testing::Return;
 using ::testing::ReturnPointee;
 
-constexpr int kExcessiveBytes = 700000;
-
 TestResult GenerateTestResult(const std::string& test_name,
                               TestResult::Status status,
                               TimeDelta elapsed_td = Milliseconds(30),
@@ -617,7 +615,7 @@ TEST_F(TestLauncherTest, ExcessiveOutput) {
   command_line->AppendSwitchASCII("test-launcher-print-test-stdio", "never");
   TestResult test_result =
       GenerateTestResult("Test.firstTest", TestResult::TEST_SUCCESS,
-                         Milliseconds(30), std::string(kExcessiveBytes, 'a'));
+                         Milliseconds(30), std::string(500000, 'a'));
   EXPECT_CALL(test_launcher, LaunchChildGTestProcess(_, _, _, _))
       .WillOnce(OnTestResult(&test_launcher, test_result));
   EXPECT_FALSE(test_launcher.Run(command_line.get()));
@@ -628,11 +626,10 @@ TEST_F(TestLauncherTest, OutputLimitSwitch) {
   AddMockedTests("Test", {"firstTest"});
   SetUpExpectCalls();
   command_line->AppendSwitchASCII("test-launcher-print-test-stdio", "never");
-  command_line->AppendSwitchASCII("test-launcher-output-bytes-limit",
-                                  base::ToString(kExcessiveBytes + 100000));
+  command_line->AppendSwitchASCII("test-launcher-output-bytes-limit", "800000");
   TestResult test_result =
       GenerateTestResult("Test.firstTest", TestResult::TEST_SUCCESS,
-                         Milliseconds(30), std::string(kExcessiveBytes, 'a'));
+                         Milliseconds(30), std::string(500000, 'a'));
   EXPECT_CALL(test_launcher, LaunchChildGTestProcess(_, _, _, _))
       .WillOnce(OnTestResult(&test_launcher, test_result));
   EXPECT_TRUE(test_launcher.Run(command_line.get()));
-- 
2.49.0.rc1.451.g8f38331e32-goog

