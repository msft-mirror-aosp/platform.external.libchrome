From 79a83ad9f5d06adc9b97153115f7e97c6206e4f8 Mon Sep 17 00:00:00 2001
From: Grace Cham <hscham@chromium.org>
Date: Fri, 14 Oct 2022 14:41:31 +0900
Subject: [PATCH] disable allocator sanitizer

Change-Id: I593b2acc1b51b8fbd310acdff264f58cd4947773
---
 .../shim/allocator_shim_override_cpp_symbols.h                | 4 ++++
 .../shim/allocator_shim_override_libc_symbols.h               | 4 ++++
 2 files changed, 8 insertions(+)

diff --git a/base/allocator/partition_allocator/shim/allocator_shim_override_cpp_symbols.h b/base/allocator/partition_allocator/shim/allocator_shim_override_cpp_symbols.h
index 5047ad2f3da0..5d16f759b113 100644
--- a/base/allocator/partition_allocator/shim/allocator_shim_override_cpp_symbols.h
+++ b/base/allocator/partition_allocator/shim/allocator_shim_override_cpp_symbols.h
@@ -31,6 +31,9 @@
 #define SHIM_CPP_SYMBOLS_EXPORT NOINLINE
 #endif
 
+// Disable custom memory allocator when asan is used.
+// https://crbug.com/807685
+#if !defined(DISABLE_ALLOCATOR_SANITIZER)
 SHIM_CPP_SYMBOLS_EXPORT void* operator new(size_t size) {
   return ShimCppNew(size);
 }
@@ -130,5 +133,6 @@ SHIM_CPP_SYMBOLS_EXPORT void operator delete[](void* p,
                                                const std::nothrow_t&) __THROW {
   ShimCppDelete(p);
 }
+#endif
 
 #endif  // BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_CPP_SYMBOLS_H_
diff --git a/base/allocator/partition_allocator/shim/allocator_shim_override_libc_symbols.h b/base/allocator/partition_allocator/shim/allocator_shim_override_libc_symbols.h
index 2163736beeeb..16e86f74c2c9 100644
--- a/base/allocator/partition_allocator/shim/allocator_shim_override_libc_symbols.h
+++ b/base/allocator/partition_allocator/shim/allocator_shim_override_libc_symbols.h
@@ -22,6 +22,9 @@
 
 #include "base/allocator/partition_allocator/shim/allocator_shim_internals.h"
 
+// Disable custom memory allocator when asan is used.
+// https://crbug.com/807685
+#if !defined(DISABLE_ALLOCATOR_SANITIZER)
 extern "C" {
 
 // WARNING: Whenever a new function is added there (which, surprisingly enough,
@@ -88,5 +91,6 @@ SHIM_ALWAYS_EXPORT size_t malloc_usable_size(void* address) __THROW {
 //   struct mallinfo mallinfo(void);
 
 }  // extern "C"
+#endif
 
 #endif  // BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_LIBC_SYMBOLS_H_
-- 
2.38.0.413.g74048e4d9e-goog

