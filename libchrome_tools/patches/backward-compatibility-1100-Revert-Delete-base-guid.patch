From e861da7fc6612ed65c44dea2b170c4016d044803 Mon Sep 17 00:00:00 2001
From: Wei-Luan Wang <weiluanwang@google.com>
Date: Fri, 9 Jun 2023 06:35:25 +0000
Subject: [PATCH] Revert "Delete base/guid.h"

This reverts commit 6db621d1bc452a99dcca729a7bb52ca2a5a9e038.
---
 base/guid.h           | 13 +++++++++++++
 base/uuid.cc          | 25 +++++++++++++++++++++++++
 base/uuid.h           | 20 ++++++++++++++++++++
 base/uuid_unittest.cc | 27 +++++++++++++++++++++++++++
 4 files changed, 85 insertions(+)
 create mode 100644 base/guid.h

diff --git a/base/guid.h b/base/guid.h
new file mode 100644
index 0000000000..e0c4a80791
--- /dev/null
+++ b/base/guid.h
@@ -0,0 +1,13 @@
+// Copyright 2023 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef BASE_GUID_H_
+#define BASE_GUID_H_
+
+#include "base/uuid.h"  // IWYU pragma: export
+
+// DEPRECATED(crbug.com/1428566): Please use `base/uuid.h`. This file will be
+// deleted once all inclusion paths are migrated to `base/uuid.h`.
+
+#endif  // BASE_GUID_H_
diff --git a/base/uuid.cc b/base/uuid.cc
index 979f26515d..4306e8931b 100644
--- a/base/uuid.cc
+++ b/base/uuid.cc
@@ -61,6 +61,19 @@ std::string GetCanonicalUuidInternal(StringPieceType input, bool strict) {
 
 }  // namespace
 
+std::string GenerateUuid() {
+  Uuid uuid = Uuid::GenerateRandomV4();
+  return uuid.AsLowercaseString();
+}
+
+bool IsValidUuid(StringPiece input) {
+  return !GetCanonicalUuidInternal(input, /*strict=*/false).empty();
+}
+
+bool IsValidUuidOutputString(StringPiece input) {
+  return !GetCanonicalUuidInternal(input, /*strict=*/true).empty();
+}
+
 // static
 Uuid Uuid::GenerateRandomV4() {
   uint8_t sixteen_bytes[kGuidV4InputLength];
@@ -183,4 +196,16 @@ std::ostream& operator<<(std::ostream& out, const Uuid& uuid) {
   return out << uuid.AsLowercaseString();
 }
 
+std::string GenerateGUID() {
+  return GenerateUuid();
+}
+
+bool IsValidGUID(StringPiece input) {
+  return IsValidUuid(input);
+}
+
+bool IsValidGUIDOutputString(StringPiece input) {
+  return IsValidUuidOutputString(input);
+}
+
 }  // namespace base
diff --git a/base/uuid.h b/base/uuid.h
index f5b1752ad5..5dfadc5bbd 100644
--- a/base/uuid.h
+++ b/base/uuid.h
@@ -23,6 +23,17 @@ class FileSystemAccessManagerImpl;
 
 namespace base {
 
+// DEPRECATED(crbug.com/1195446): Use Uuid::GenerateRandomV4() instead.
+BASE_EXPORT std::string GenerateUuid();
+
+// DEPRECATED(crbug.com/1195446): Use Uuid::ParseCaseInsensitive() and
+// Uuid::is_valid() instead.
+BASE_EXPORT bool IsValidUuid(StringPiece input);
+
+// DEPRECATED(crbug.com/1195446): Use Uuid::ParseLowercase() and
+// Uuid::is_valid() instead.
+BASE_EXPORT bool IsValidUuidOutputString(StringPiece input);
+
 class BASE_EXPORT Uuid {
  public:
   // Length in bytes of the input required to format the input as a Uuid in the
@@ -117,6 +128,15 @@ struct BASE_EXPORT UuidHash {
 // Stream operator so Uuid objects can be used in logging statements.
 BASE_EXPORT std::ostream& operator<<(std::ostream& out, const Uuid& uuid);
 
+// DEPREACATED(crbug.com/1428566): Please, use the Uuid variants of the
+// functions/types above. These are merely aliases to allow a gradual
+// transition away from `base/guid.h`.
+using GUID = Uuid;
+using GUIDHash = UuidHash;
+BASE_EXPORT std::string GenerateGUID();
+BASE_EXPORT bool IsValidGUID(StringPiece input);
+BASE_EXPORT bool IsValidGUIDOutputString(StringPiece input);
+
 }  // namespace base
 
 #endif  // BASE_UUID_H_
diff --git a/base/uuid_unittest.cc b/base/uuid_unittest.cc
index 81051790a4..f9eeaca078 100644
--- a/base/uuid_unittest.cc
+++ b/base/uuid_unittest.cc
@@ -16,6 +16,33 @@
 
 namespace base {
 
+TEST(UuidTest, DeprecatedUuidCorrectlyFormatted) {
+  constexpr int kIterations = 10;
+  for (int i = 0; i < kIterations; ++i) {
+    const std::string guid = GenerateUuid();
+    EXPECT_TRUE(IsValidUuid(guid));
+    EXPECT_TRUE(IsValidUuidOutputString(guid));
+    EXPECT_TRUE(IsValidUuid(ToLowerASCII(guid)));
+    EXPECT_TRUE(IsValidUuid(ToUpperASCII(guid)));
+  }
+}
+
+TEST(UuidTest, DeprecatedUuidBasicUniqueness) {
+  constexpr int kIterations = 10;
+  for (int i = 0; i < kIterations; ++i) {
+    const std::string guid_str1 = GenerateUuid();
+    const std::string guid_str2 = GenerateUuid();
+    EXPECT_EQ(36U, guid_str1.length());
+    EXPECT_EQ(36U, guid_str2.length());
+    EXPECT_NE(guid_str1, guid_str2);
+
+    const Uuid guid1 = Uuid::ParseCaseInsensitive(guid_str1);
+    EXPECT_TRUE(guid1.is_valid());
+    const Uuid guid2 = Uuid::ParseCaseInsensitive(guid_str2);
+    EXPECT_TRUE(guid2.is_valid());
+  }
+}
+
 namespace {
 
 // The format of Uuid version 4 must be xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx,
-- 
2.41.0.162.gfafddb0af9-goog

