From 07c01ea860ee69c589c6850cffccdcf2a2d42755 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Peter=20Bostr=C3=B6m?= <pbos@chromium.org>
Date: Tue, 2 Nov 2021 18:18:46 -0700
Subject: [PATCH] Remove DISALLOW macros

Cherry-pick of r938612 (crrev.com/c/3259964) and r937662
(crrev.com/c/3256952) to remove use of DISALLOW_* macros.
Remove the definition from base/macros.h to avoid regression.

BUG=b:211560276
TEST=./build_packages --board=hatch
---
 .../library_loader/library_prefetcher.h       |  6 ++--
 base/json/json_file_value_serializer.h        | 15 +++++---
 base/macros.h                                 | 34 -------------------
 base/memory/weak_ptr.h                        |  8 +++--
 base/process/memory_linux.cc                  |  7 ++--
 base/syslog_logging.cc                        |  7 ++--
 base/test/test_timeouts.h                     |  6 ++--
 base/threading/platform_thread.h              |  6 ++--
 base/threading/thread_restrictions.h          | 21 ++++++++----
 base/trace_event/builtin_categories.h         |  6 ++--
 dbus/bus.h                                    |  5 +--
 dbus/dbus_statistics_unittest.cc              |  6 ++--
 dbus/message.h                                | 25 ++++++++------
 dbus/object_manager.h                         |  5 +--
 dbus/object_proxy.h                           |  5 +--
 ipc/ipc_channel_factory.cc                    |  5 +--
 ipc/ipc_channel_mojo.cc                       |  5 +--
 ipc/ipc_channel_mojo_unittest.cc              |  5 +--
 ipc/ipc_cpu_perftest.cc                       |  5 +--
 ipc/ipc_message_attachment.h                  |  5 +--
 ipc/ipc_message_attachment_set.h              |  5 +--
 ipc/ipc_mojo_bootstrap.cc                     | 18 ++++++----
 ipc/ipc_mojo_handle_attachment.h              |  5 +--
 ipc/ipc_mojo_perftest.cc                      | 16 +++++----
 ipc/ipc_security_test_util.h                  |  5 +--
 ipc/ipc_sync_message_filter.h                 |  5 +--
 ipc/sync_socket_unittest.cc                   | 10 +++---
 mojo/public/cpp/bindings/shared_remote.h      |  5 +--
 28 files changed, 140 insertions(+), 116 deletions(-)

diff --git a/base/android/library_loader/library_prefetcher.h b/base/android/library_loader/library_prefetcher.h
index 4d1ea6c137..c5e8e53d8b 100644
--- a/base/android/library_loader/library_prefetcher.h
+++ b/base/android/library_loader/library_prefetcher.h
@@ -29,6 +29,10 @@ namespace android {
 // the Android runtime, can be killed at any time, which is not an issue here.
 class BASE_EXPORT NativeLibraryPrefetcher {
  public:
+  NativeLibraryPrefetcher() = delete;
+  NativeLibraryPrefetcher(const NativeLibraryPrefetcher&) = delete;
+  NativeLibraryPrefetcher& operator=(const NativeLibraryPrefetcher&) = delete;
+
   // Finds the executable code range, forks a low priority process pre-fetching
   // it wait()s for the process to exit or die. If ordered_only is true, only
   // the ordered section is prefetched. See GetOrdrderedTextRange() in
@@ -58,8 +62,6 @@ class BASE_EXPORT NativeLibraryPrefetcher {
 
   FRIEND_TEST_ALL_PREFIXES(NativeLibraryPrefetcherTest,
                            TestPercentageOfResidentCode);
-
-  DISALLOW_IMPLICIT_CONSTRUCTORS(NativeLibraryPrefetcher);
 };
 
 }  // namespace android
diff --git a/base/json/json_file_value_serializer.h b/base/json/json_file_value_serializer.h
index 379448cf0b..c5a7b3bbc1 100644
--- a/base/json/json_file_value_serializer.h
+++ b/base/json/json_file_value_serializer.h
@@ -17,11 +17,16 @@
 
 class BASE_EXPORT JSONFileValueSerializer : public base::ValueSerializer {
  public:
+  JSONFileValueSerializer() = delete;
+
   // |json_file_path_| is the path of a file that will be destination of the
   // serialization. The serializer will attempt to create the file at the
   // specified location.
   explicit JSONFileValueSerializer(const base::FilePath& json_file_path);
 
+  JSONFileValueSerializer(const JSONFileValueSerializer&) = delete;
+  JSONFileValueSerializer& operator=(const JSONFileValueSerializer&) = delete;
+
   ~JSONFileValueSerializer() override;
 
   // DO NOT USE except in unit tests to verify the file was written properly.
@@ -42,17 +47,21 @@ class BASE_EXPORT JSONFileValueSerializer : public base::ValueSerializer {
   bool SerializeInternal(const base::Value& root, bool omit_binary_values);
 
   const base::FilePath json_file_path_;
-
-  DISALLOW_IMPLICIT_CONSTRUCTORS(JSONFileValueSerializer);
 };
 
 class BASE_EXPORT JSONFileValueDeserializer : public base::ValueDeserializer {
  public:
+  JSONFileValueDeserializer() = delete;
+
   // |json_file_path_| is the path of a file that will be source of the
   // deserialization. |options| is a bitmask of JSONParserOptions.
   explicit JSONFileValueDeserializer(const base::FilePath& json_file_path,
                                      int options = 0);
 
+  JSONFileValueDeserializer(const JSONFileValueDeserializer&) = delete;
+  JSONFileValueDeserializer& operator=(const JSONFileValueDeserializer&) =
+      delete;
+
   ~JSONFileValueDeserializer() override;
 
   // Attempt to deserialize the data structure encoded in the file passed
@@ -96,8 +105,6 @@ class BASE_EXPORT JSONFileValueDeserializer : public base::ValueDeserializer {
   const base::FilePath json_file_path_;
   const int options_;
   size_t last_read_size_ = 0u;
-
-  DISALLOW_IMPLICIT_CONSTRUCTORS(JSONFileValueDeserializer);
 };
 
 #endif  // BASE_JSON_JSON_FILE_VALUE_SERIALIZER_H_
diff --git a/base/macros.h b/base/macros.h
index d4a019c0bb..cb9a04b834 100644
--- a/base/macros.h
+++ b/base/macros.h
@@ -15,40 +15,6 @@
 #include <android-base/macros.h>
 #endif  // defined(ANDROID)
 
-// ALL DISALLOW_xxx MACROS ARE DEPRECATED; DO NOT USE IN NEW CODE.
-// Use explicit deletions instead.  See the section on copyability/movability in
-// //styleguide/c++/c++-dos-and-donts.md for more information.
-
-// Put this in the declarations for a class to be uncopyable.
-// DEPRECATED: See above. Makes a class uncopyable.
-#if !defined(DISALLOW_COPY)
-#define DISALLOW_COPY(TypeName) \
-  TypeName(const TypeName&) = delete
-#endif
-
-// Put this in the declarations for a class to be unassignable.
-// DEPRECATED: See above. Makes a class unassignable.
-#if !defined(DISALLOW_ASSIGN)
-#define DISALLOW_ASSIGN(TypeName) TypeName& operator=(const TypeName&) = delete
-#endif
-
-// Put this in the declarations for a class to be uncopyable and unassignable.
-// DEPRECATED: See above. Makes a class uncopyable and unassignable.
-#if !defined(DISALLOW_COPY_AND_ASSIGN)
-#define DISALLOW_COPY_AND_ASSIGN(TypeName) \
-  DISALLOW_COPY(TypeName);                 \
-  DISALLOW_ASSIGN(TypeName)
-#endif
-
-// DEPRECATED: See above. Disallow all implicit constructors, namely the
-// default constructor, copy constructor and operator= functions.
-// This is especially useful for classes containing only static methods.
-#if !defined(DISALLOW_IMPLICIT_CONSTRUCTORS)
-#define DISALLOW_IMPLICIT_CONSTRUCTORS(TypeName) \
-  TypeName() = delete;                           \
-  DISALLOW_COPY_AND_ASSIGN(TypeName)
-#endif
-
 // Used to explicitly mark the return value of a function as unused. If you are
 // really sure you don't want to do anything with the return value of a function
 // that has been marked WARN_UNUSED_RESULT, wrap it with this. Example:
diff --git a/base/memory/weak_ptr.h b/base/memory/weak_ptr.h
index 9f2ee6948a..bcd26c8adc 100644
--- a/base/memory/weak_ptr.h
+++ b/base/memory/weak_ptr.h
@@ -336,9 +336,14 @@ class BASE_EXPORT WeakPtrFactoryBase {
 template <class T>
 class WeakPtrFactory : public internal::WeakPtrFactoryBase {
  public:
+  WeakPtrFactory() = delete;
+
   explicit WeakPtrFactory(T* ptr)
       : WeakPtrFactoryBase(reinterpret_cast<uintptr_t>(ptr)) {}
 
+  WeakPtrFactory(const WeakPtrFactory&) = delete;
+  WeakPtrFactory& operator=(const WeakPtrFactory&) = delete;
+
   ~WeakPtrFactory() = default;
 
   WeakPtr<T> GetWeakPtr() const {
@@ -370,9 +375,6 @@ class WeakPtrFactory : public internal::WeakPtrFactoryBase {
     DCHECK(ptr_);
     return weak_reference_owner_.HasRefs();
   }
-
- private:
-  DISALLOW_IMPLICIT_CONSTRUCTORS(WeakPtrFactory);
 };
 
 // A class may extend from SupportsWeakPtr to let others take weak pointers to
diff --git a/base/process/memory_linux.cc b/base/process/memory_linux.cc
index 07d4e273a5..11dcb50abc 100644
--- a/base/process/memory_linux.cc
+++ b/base/process/memory_linux.cc
@@ -65,10 +65,11 @@ void EnableTerminationOnOutOfMemory() {
 // without the class.
 class AdjustOOMScoreHelper {
  public:
-  static bool AdjustOOMScore(ProcessId process, int score);
+  AdjustOOMScoreHelper() = delete;
+  AdjustOOMScoreHelper(const AdjustOOMScoreHelper&) = delete;
+  AdjustOOMScoreHelper& operator=(const AdjustOOMScoreHelper&) = delete;
 
- private:
-  DISALLOW_IMPLICIT_CONSTRUCTORS(AdjustOOMScoreHelper);
+  static bool AdjustOOMScore(ProcessId process, int score);
 };
 
 // static.
diff --git a/base/syslog_logging.cc b/base/syslog_logging.cc
index ae507b2d8b..70133897eb 100644
--- a/base/syslog_logging.cc
+++ b/base/syslog_logging.cc
@@ -39,6 +39,10 @@ class EventLogHandleTraits {
  public:
   using Handle = HANDLE;
 
+  EventLogHandleTraits() = delete;
+  EventLogHandleTraits(const EventLogHandleTraits&) = delete;
+  EventLogHandleTraits& operator=(const EventLogHandleTraits&) = delete;
+
   // Closes the handle.
   static bool CloseHandle(HANDLE handle) {
     return ::DeregisterEventSource(handle) != FALSE;
@@ -49,9 +53,6 @@ class EventLogHandleTraits {
 
   // Returns null handle value.
   static HANDLE NullHandle() { return nullptr; }
-
- private:
-  DISALLOW_IMPLICIT_CONSTRUCTORS(EventLogHandleTraits);
 };
 
 using ScopedEventLogHandle =
diff --git a/base/test/test_timeouts.h b/base/test/test_timeouts.h
index 1a068adbc7..6b8774ee27 100644
--- a/base/test/test_timeouts.h
+++ b/base/test/test_timeouts.h
@@ -13,6 +13,10 @@
 // the timeouts for different environments (like TSan).
 class TestTimeouts {
  public:
+  TestTimeouts() = delete;
+  TestTimeouts(const TestTimeouts&) = delete;
+  TestTimeouts& operator=(const TestTimeouts&) = delete;
+
   // Initializes the timeouts. Non thread-safe. Should be called exactly once
   // by the test suite.
   static void Initialize();
@@ -56,8 +60,6 @@ class TestTimeouts {
   static base::TimeDelta action_timeout_;
   static base::TimeDelta action_max_timeout_;
   static base::TimeDelta test_launcher_timeout_;
-
-  DISALLOW_IMPLICIT_CONSTRUCTORS(TestTimeouts);
 };
 
 #endif  // BASE_TEST_TEST_TIMEOUTS_H_
diff --git a/base/threading/platform_thread.h b/base/threading/platform_thread.h
index eefad38e2b..5e481b34fb 100644
--- a/base/threading/platform_thread.h
+++ b/base/threading/platform_thread.h
@@ -145,6 +145,10 @@ class BASE_EXPORT PlatformThread {
     virtual ~Delegate() = default;
   };
 
+  PlatformThread() = delete;
+  PlatformThread(const PlatformThread&) = delete;
+  PlatformThread& operator=(const PlatformThread&) = delete;
+
   // Gets the current thread id, which may be useful for logging purposes.
   static PlatformThreadId CurrentId();
 
@@ -278,8 +282,6 @@ class BASE_EXPORT PlatformThread {
 
  private:
   static void SetCurrentThreadPriorityImpl(ThreadPriority priority);
-
-  DISALLOW_IMPLICIT_CONSTRUCTORS(PlatformThread);
 };
 
 namespace internal {
diff --git a/base/threading/thread_restrictions.h b/base/threading/thread_restrictions.h
index 3a5005fa8b..567d167f2d 100644
--- a/base/threading/thread_restrictions.h
+++ b/base/threading/thread_restrictions.h
@@ -420,6 +420,10 @@ class BASE_EXPORT ScopedDisallowBlocking {
 };
 
 class BASE_EXPORT ScopedAllowBlocking {
+ public:
+  ScopedAllowBlocking(const ScopedAllowBlocking&) = delete;
+  ScopedAllowBlocking& operator=(const ScopedAllowBlocking&) = delete;
+
  private:
   FRIEND_TEST_ALL_PREFIXES(ThreadRestrictionsTest,
                            NestedAllowRestoresPreviousStack);
@@ -481,8 +485,6 @@ class BASE_EXPORT ScopedAllowBlocking {
 #if DCHECK_IS_ON()
   std::unique_ptr<BooleanWithStack> was_disallowed_;
 #endif
-
-  DISALLOW_COPY_AND_ASSIGN(ScopedAllowBlocking);
 };
 
 class ScopedAllowBlockingForTesting {
@@ -523,6 +525,11 @@ class BASE_EXPORT ScopedDisallowBaseSyncPrimitives {
 };
 
 class BASE_EXPORT ScopedAllowBaseSyncPrimitives {
+ public:
+  ScopedAllowBaseSyncPrimitives(const ScopedAllowBaseSyncPrimitives&) = delete;
+  ScopedAllowBaseSyncPrimitives& operator=(
+      const ScopedAllowBaseSyncPrimitives&) = delete;
+
  private:
   // This can only be instantiated by friends. Use
   // ScopedAllowBaseSyncPrimitivesForTesting in unit tests to avoid the friend
@@ -575,11 +582,15 @@ class BASE_EXPORT ScopedAllowBaseSyncPrimitives {
 #if DCHECK_IS_ON()
   std::unique_ptr<BooleanWithStack> was_disallowed_;
 #endif
-
-  DISALLOW_COPY_AND_ASSIGN(ScopedAllowBaseSyncPrimitives);
 };
 
 class BASE_EXPORT ScopedAllowBaseSyncPrimitivesOutsideBlockingScope {
+ public:
+  ScopedAllowBaseSyncPrimitivesOutsideBlockingScope(
+      const ScopedAllowBaseSyncPrimitivesOutsideBlockingScope&) = delete;
+  ScopedAllowBaseSyncPrimitivesOutsideBlockingScope& operator=(
+      const ScopedAllowBaseSyncPrimitivesOutsideBlockingScope&) = delete;
+
  private:
   // This can only be instantiated by friends. Use
   // ScopedAllowBaseSyncPrimitivesForTesting in unit tests to avoid the friend
@@ -665,8 +676,6 @@ class BASE_EXPORT ScopedAllowBaseSyncPrimitivesOutsideBlockingScope {
 #if DCHECK_IS_ON()
   std::unique_ptr<BooleanWithStack> was_disallowed_;
 #endif
-
-  DISALLOW_COPY_AND_ASSIGN(ScopedAllowBaseSyncPrimitivesOutsideBlockingScope);
 };
 
 // Allow base-sync-primitives in tests, doesn't require explicit friend'ing like
diff --git a/base/trace_event/builtin_categories.h b/base/trace_event/builtin_categories.h
index 60bba6a85d..14c8105ad0 100644
--- a/base/trace_event/builtin_categories.h
+++ b/base/trace_event/builtin_categories.h
@@ -402,6 +402,10 @@ static_assert(!StrEqConstexpr("abc", "ab"), "strings should not be equal");
 // TODO(skyostil): Remove after migrating to the Perfetto client API.
 class BASE_EXPORT BuiltinCategories {
  public:
+  BuiltinCategories() = delete;
+  BuiltinCategories(const BuiltinCategories&) = delete;
+  BuiltinCategories& operator=(const BuiltinCategories&) = delete;
+
   // Returns a built-in category name at |index| in the registry.
   static constexpr const char* At(size_t index) {
     return kBuiltinCategories[index];
@@ -522,8 +526,6 @@ class BASE_EXPORT BuiltinCategories {
     return IsStringInArray(category, kBuiltinCategories,
                            base::size(kBuiltinCategories));
   }
-
-  DISALLOW_IMPLICIT_CONSTRUCTORS(BuiltinCategories);
 };
 
 }  // namespace trace_event
diff --git a/dbus/bus.h b/dbus/bus.h
index 445cd05159..65c899ccd9 100644
--- a/dbus/bus.h
+++ b/dbus/bus.h
@@ -220,6 +220,9 @@ class CHROME_DBUS_EXPORT Bus : public base::RefCountedThreadSafe<Bus> {
   // Connect() is called.
   explicit Bus(const Options& options);
 
+  Bus(const Bus&) = delete;
+  Bus& operator=(const Bus&) = delete;
+
   // Called when an ownership request is complete.
   // Parameters:
   // - the requested service name.
@@ -781,8 +784,6 @@ class CHROME_DBUS_EXPORT Bus : public base::RefCountedThreadSafe<Bus> {
   int num_pending_timeouts_;
 
   std::string address_;
-
-  DISALLOW_COPY_AND_ASSIGN(Bus);
 };
 
 }  // namespace dbus
diff --git a/dbus/dbus_statistics_unittest.cc b/dbus/dbus_statistics_unittest.cc
index 164d0b3521..c14b076efc 100644
--- a/dbus/dbus_statistics_unittest.cc
+++ b/dbus/dbus_statistics_unittest.cc
@@ -14,6 +14,9 @@ class DBusStatisticsTest : public testing::Test {
  public:
   DBusStatisticsTest() = default;
 
+  DBusStatisticsTest(const DBusStatisticsTest&) = delete;
+  DBusStatisticsTest& operator=(const DBusStatisticsTest&) = delete;
+
   void SetUp() override { statistics::Initialize(); }
 
   void TearDown() override { statistics::Shutdown(); }
@@ -50,9 +53,6 @@ class DBusStatisticsTest : public testing::Test {
     statistics::AddSentMethodCall(
         "service2", "service2.interface1", "method1");
   }
-
- private:
-  DISALLOW_COPY_AND_ASSIGN(DBusStatisticsTest);
 };
 
 TEST_F(DBusStatisticsTest, TestDBusStatsBasic) {
diff --git a/dbus/message.h b/dbus/message.h
index d8649ca5ec..1632b3f947 100644
--- a/dbus/message.h
+++ b/dbus/message.h
@@ -84,6 +84,9 @@ class CHROME_DBUS_EXPORT Message {
     UNIX_FD = DBUS_TYPE_UNIX_FD,
   };
 
+  Message(const Message&) = delete;
+  Message& operator=(const Message&) = delete;
+
   // Returns the type of the message. Returns MESSAGE_INVALID if
   // raw_message_ is NULL.
   MessageType GetMessageType();
@@ -137,7 +140,6 @@ class CHROME_DBUS_EXPORT Message {
                                MessageReader* reader);
 
   DBusMessage* raw_message_;
-  DISALLOW_COPY_AND_ASSIGN(Message);
 };
 
 // MessageCall is a type of message used for calling a method via D-Bus.
@@ -155,6 +157,9 @@ class CHROME_DBUS_EXPORT MethodCall : public Message {
   // The constructor creates the internal raw message.
   MethodCall(const std::string& interface_name, const std::string& method_name);
 
+  MethodCall(const MethodCall&) = delete;
+  MethodCall& operator=(const MethodCall&) = delete;
+
   // Returns a newly created MethodCall from the given raw message of the
   // type DBUS_MESSAGE_TYPE_METHOD_CALL. Takes the ownership of |raw_message|.
   static std::unique_ptr<MethodCall> FromRawMessage(DBusMessage* raw_message);
@@ -163,8 +168,6 @@ class CHROME_DBUS_EXPORT MethodCall : public Message {
   // Creates a method call message. The internal raw message is NULL.
   // Only used internally.
   MethodCall();
-
-  DISALLOW_COPY_AND_ASSIGN(MethodCall);
 };
 
 // Signal is a type of message used to send a signal.
@@ -182,6 +185,9 @@ class CHROME_DBUS_EXPORT Signal : public Message {
   // The constructor creates the internal raw_message_.
   Signal(const std::string& interface_name, const std::string& method_name);
 
+  Signal(const Signal&) = delete;
+  Signal& operator=(const Signal&) = delete;
+
   // Returns a newly created SIGNAL from the given raw message of the type
   // DBUS_MESSAGE_TYPE_SIGNAL. Takes the ownership of |raw_message|.
   static std::unique_ptr<Signal> FromRawMessage(DBusMessage* raw_message);
@@ -190,8 +196,6 @@ class CHROME_DBUS_EXPORT Signal : public Message {
   // Creates a signal message. The internal raw message is NULL.
   // Only used internally.
   Signal();
-
-  DISALLOW_COPY_AND_ASSIGN(Signal);
 };
 
 // Response is a type of message used for receiving a response from a
@@ -211,12 +215,12 @@ class CHROME_DBUS_EXPORT Response : public Message {
   // Useful for testing.
   static std::unique_ptr<Response> CreateEmpty();
 
+  Response(const Response&) = delete;
+  Response& operator=(const Response&) = delete;
+
  protected:
   // Creates a Response message. The internal raw message is NULL.
   Response();
-
- private:
-  DISALLOW_COPY_AND_ASSIGN(Response);
 };
 
 // ErrorResponse is a type of message used to return an error to the
@@ -237,11 +241,12 @@ class CHROME_DBUS_EXPORT ErrorResponse : public Response {
       const std::string& error_name,
       const std::string& error_message);
 
+  ErrorResponse(const ErrorResponse&) = delete;
+  ErrorResponse& operator=(const ErrorResponse&) = delete;
+
  private:
   // Creates an ErrorResponse message. The internal raw message is NULL.
   ErrorResponse();
-
-  DISALLOW_COPY_AND_ASSIGN(ErrorResponse);
 };
 
 // MessageWriter is used to write outgoing messages for calling methods
diff --git a/dbus/object_manager.h b/dbus/object_manager.h
index ada1fd0a7a..e70c7e7be7 100644
--- a/dbus/object_manager.h
+++ b/dbus/object_manager.h
@@ -188,6 +188,9 @@ class CHROME_DBUS_EXPORT ObjectManager final
                                              const std::string& service_name,
                                              const ObjectPath& object_path);
 
+  ObjectManager(const ObjectManager&) = delete;
+  ObjectManager& operator=(const ObjectManager&) = delete;
+
   // Register a client implementation class |interface| for the given D-Bus
   // interface named in |interface_name|. That object's CreateProperties()
   // method will be used to create instances of dbus::PropertySet* when
@@ -363,8 +366,6 @@ class CHROME_DBUS_EXPORT ObjectManager final
   // Note: This should remain the last member so it'll be destroyed and
   // invalidate its weak pointers before any other members are destroyed.
   base::WeakPtrFactory<ObjectManager> weak_ptr_factory_{this};
-
-  DISALLOW_COPY_AND_ASSIGN(ObjectManager);
 };
 
 }  // namespace dbus
diff --git a/dbus/object_proxy.h b/dbus/object_proxy.h
index 51fcefc003..8d932229a9 100644
--- a/dbus/object_proxy.h
+++ b/dbus/object_proxy.h
@@ -48,6 +48,9 @@ class CHROME_DBUS_EXPORT ObjectProxy
               const ObjectPath& object_path,
               int options);
 
+  ObjectProxy(const ObjectProxy&) = delete;
+  ObjectProxy& operator=(const ObjectProxy&) = delete;
+
   // Options to be OR-ed together when calling Bus::GetObjectProxyWithOptions().
   // Set the IGNORE_SERVICE_UNKNOWN_ERRORS option to silence logging of
   // org.freedesktop.DBus.Error.ServiceUnknown errors and
@@ -365,8 +368,6 @@ class CHROME_DBUS_EXPORT ObjectProxy
   std::string service_name_owner_;
 
   std::set<DBusPendingCall*> pending_calls_;
-
-  DISALLOW_COPY_AND_ASSIGN(ObjectProxy);
 };
 
 }  // namespace dbus
diff --git a/ipc/ipc_channel_factory.cc b/ipc/ipc_channel_factory.cc
index decaf831e1..b74889adc8 100644
--- a/ipc/ipc_channel_factory.cc
+++ b/ipc/ipc_channel_factory.cc
@@ -23,6 +23,9 @@ class PlatformChannelFactory : public ChannelFactory {
         ipc_task_runner_(ipc_task_runner),
         quota_checker_(mojo::internal::MessageQuotaChecker::MaybeCreate()) {}
 
+  PlatformChannelFactory(const PlatformChannelFactory&) = delete;
+  PlatformChannelFactory& operator=(const PlatformChannelFactory&) = delete;
+
   std::unique_ptr<Channel> BuildChannel(Listener* listener) override {
 #if defined(OS_NACL_SFI)
     return Channel::Create(handle_, mode_, listener);
@@ -48,8 +51,6 @@ class PlatformChannelFactory : public ChannelFactory {
   Channel::Mode mode_;
   scoped_refptr<base::SingleThreadTaskRunner> ipc_task_runner_;
   scoped_refptr<mojo::internal::MessageQuotaChecker> quota_checker_;
-
-  DISALLOW_COPY_AND_ASSIGN(PlatformChannelFactory);
 };
 
 } // namespace
diff --git a/ipc/ipc_channel_mojo.cc b/ipc/ipc_channel_mojo.cc
index a00aaa8092..fc8f9d5b7d 100644
--- a/ipc/ipc_channel_mojo.cc
+++ b/ipc/ipc_channel_mojo.cc
@@ -52,6 +52,9 @@ class MojoChannelFactory : public ChannelFactory {
         proxy_task_runner_(proxy_task_runner),
         quota_checker_(mojo::internal::MessageQuotaChecker::MaybeCreate()) {}
 
+  MojoChannelFactory(const MojoChannelFactory&) = delete;
+  MojoChannelFactory& operator=(const MojoChannelFactory&) = delete;
+
   std::unique_ptr<Channel> BuildChannel(Listener* listener) override {
     return ChannelMojo::Create(std::move(handle_), mode_, listener,
                                ipc_task_runner_, proxy_task_runner_,
@@ -73,8 +76,6 @@ class MojoChannelFactory : public ChannelFactory {
   scoped_refptr<base::SingleThreadTaskRunner> ipc_task_runner_;
   scoped_refptr<base::SingleThreadTaskRunner> proxy_task_runner_;
   scoped_refptr<mojo::internal::MessageQuotaChecker> quota_checker_;
-
-  DISALLOW_COPY_AND_ASSIGN(MojoChannelFactory);
 };
 
 class ThreadSafeChannelProxy : public mojo::ThreadSafeProxy {
diff --git a/ipc/ipc_channel_mojo_unittest.cc b/ipc/ipc_channel_mojo_unittest.cc
index 738dae5883..6b3cec17ca 100644
--- a/ipc/ipc_channel_mojo_unittest.cc
+++ b/ipc/ipc_channel_mojo_unittest.cc
@@ -795,6 +795,9 @@ class ChannelProxyRunner {
                         base::WaitableEvent::InitialState::NOT_SIGNALED) {
   }
 
+  ChannelProxyRunner(const ChannelProxyRunner&) = delete;
+  ChannelProxyRunner& operator=(const ChannelProxyRunner&) = delete;
+
   void CreateProxy(IPC::Listener* listener) {
     io_thread_.StartWithOptions(
         base::Thread::Options(base::MessagePumpType::IO, 0));
@@ -826,8 +829,6 @@ class ChannelProxyRunner {
   base::Thread io_thread_;
   base::WaitableEvent never_signaled_;
   std::unique_ptr<IPC::ChannelProxy> proxy_;
-
-  DISALLOW_COPY_AND_ASSIGN(ChannelProxyRunner);
 };
 
 class IPCChannelProxyMojoTest : public IPCChannelMojoTestBase {
diff --git a/ipc/ipc_cpu_perftest.cc b/ipc/ipc_cpu_perftest.cc
index 59b56642bf..44ef59f856 100644
--- a/ipc/ipc_cpu_perftest.cc
+++ b/ipc/ipc_cpu_perftest.cc
@@ -277,6 +277,9 @@ class MojoSteadyPingPongTest : public mojo::core::test::MojoTestBase {
  public:
   MojoSteadyPingPongTest() = default;
 
+  MojoSteadyPingPongTest(const MojoSteadyPingPongTest&) = delete;
+  MojoSteadyPingPongTest& operator=(const MojoSteadyPingPongTest&) = delete;
+
  protected:
   void RunPingPongServer(MojoHandle mp, const std::string& label, bool sync) {
     label_ = label;
@@ -400,8 +403,6 @@ class MojoSteadyPingPongTest : public mojo::core::test::MojoTestBase {
   std::unique_ptr<PerfCpuLogger> cpu_logger_;
 
   base::OnceClosure quit_closure_;
-
-  DISALLOW_COPY_AND_ASSIGN(MojoSteadyPingPongTest);
 };
 
 DEFINE_TEST_CLIENT_WITH_PIPE(PingPongClient, MojoSteadyPingPongTest, h) {
diff --git a/ipc/ipc_message_attachment.h b/ipc/ipc_message_attachment.h
index daa6384264..75442d4955 100644
--- a/ipc/ipc_message_attachment.h
+++ b/ipc/ipc_message_attachment.h
@@ -31,6 +31,9 @@ class IPC_MESSAGE_SUPPORT_EXPORT MessageAttachment
       mojo::ScopedHandle handle,
       Type type);
 
+  MessageAttachment(const MessageAttachment&) = delete;
+  MessageAttachment& operator=(const MessageAttachment&) = delete;
+
   virtual Type GetType() const = 0;
 
   mojo::ScopedHandle TakeMojoHandle();
@@ -39,8 +42,6 @@ class IPC_MESSAGE_SUPPORT_EXPORT MessageAttachment
   friend class base::RefCountedThreadSafe<MessageAttachment>;
   MessageAttachment();
   ~MessageAttachment() override;
-
-  DISALLOW_COPY_AND_ASSIGN(MessageAttachment);
 };
 
 }  // namespace IPC
diff --git a/ipc/ipc_message_attachment_set.h b/ipc/ipc_message_attachment_set.h
index 7a5b2a9db0..9eefe4fb08 100644
--- a/ipc/ipc_message_attachment_set.h
+++ b/ipc/ipc_message_attachment_set.h
@@ -31,6 +31,9 @@ class IPC_MESSAGE_SUPPORT_EXPORT MessageAttachmentSet
  public:
   MessageAttachmentSet();
 
+  MessageAttachmentSet(const MessageAttachmentSet&) = delete;
+  MessageAttachmentSet& operator=(const MessageAttachmentSet&) = delete;
+
   // Return the number of attachments
   unsigned size() const;
 
@@ -87,8 +90,6 @@ class IPC_MESSAGE_SUPPORT_EXPORT MessageAttachmentSet
   // all the descriptors have been read (with GetNthDescriptor). Secondly, we
   // can check that they are read in order.
   unsigned consumed_descriptor_highwater_;
-
-  DISALLOW_COPY_AND_ASSIGN(MessageAttachmentSet);
 };
 
 }  // namespace IPC
diff --git a/ipc/ipc_mojo_bootstrap.cc b/ipc/ipc_mojo_bootstrap.cc
index c39616516d..c356a1dc51 100644
--- a/ipc/ipc_mojo_bootstrap.cc
+++ b/ipc/ipc_mojo_bootstrap.cc
@@ -153,6 +153,11 @@ class ChannelAssociatedGroupController
     GetMemoryDumpProvider().AddController(this);
   }
 
+  ChannelAssociatedGroupController(const ChannelAssociatedGroupController&) =
+      delete;
+  ChannelAssociatedGroupController& operator=(
+      const ChannelAssociatedGroupController&) = delete;
+
   size_t GetQueuedMessageCount() {
     base::AutoLock lock(outgoing_messages_lock_);
     return outgoing_messages_.size();
@@ -471,6 +476,9 @@ class ChannelAssociatedGroupController
     Endpoint(ChannelAssociatedGroupController* controller, mojo::InterfaceId id)
         : controller_(controller), id_(id) {}
 
+    Endpoint(const Endpoint&) = delete;
+    Endpoint& operator=(const Endpoint&) = delete;
+
     mojo::InterfaceId id() const { return id_; }
 
     bool closed() const {
@@ -687,8 +695,6 @@ class ChannelAssociatedGroupController
     std::unique_ptr<mojo::SequenceLocalSyncEventWatcher> sync_watcher_;
     base::queue<std::pair<uint32_t, MessageWrapper>> sync_messages_;
     uint32_t next_sync_message_id_ = 0;
-
-    DISALLOW_COPY_AND_ASSIGN(Endpoint);
   };
 
   class ControlMessageProxyThunk : public MessageReceiver {
@@ -697,6 +703,10 @@ class ChannelAssociatedGroupController
         ChannelAssociatedGroupController* controller)
         : controller_(controller) {}
 
+    ControlMessageProxyThunk(const ControlMessageProxyThunk&) = delete;
+    ControlMessageProxyThunk& operator=(const ControlMessageProxyThunk&) =
+        delete;
+
    private:
     // MessageReceiver:
     bool Accept(mojo::Message* message) override {
@@ -704,8 +714,6 @@ class ChannelAssociatedGroupController
     }
 
     ChannelAssociatedGroupController* controller_;
-
-    DISALLOW_COPY_AND_ASSIGN(ControlMessageProxyThunk);
   };
 
   ~ChannelAssociatedGroupController() override {
@@ -1086,8 +1094,6 @@ class ChannelAssociatedGroupController
   uint32_t next_interface_id_ = 2;
 
   std::map<uint32_t, scoped_refptr<Endpoint>> endpoints_;
-
-  DISALLOW_COPY_AND_ASSIGN(ChannelAssociatedGroupController);
 };
 
 bool ControllerMemoryDumpProvider::OnMemoryDump(
diff --git a/ipc/ipc_mojo_handle_attachment.h b/ipc/ipc_mojo_handle_attachment.h
index 6deb0e2a64..bc4452b29f 100644
--- a/ipc/ipc_mojo_handle_attachment.h
+++ b/ipc/ipc_mojo_handle_attachment.h
@@ -24,6 +24,9 @@ class IPC_MESSAGE_SUPPORT_EXPORT MojoHandleAttachment
  public:
   explicit MojoHandleAttachment(mojo::ScopedHandle handle);
 
+  MojoHandleAttachment(const MojoHandleAttachment&) = delete;
+  MojoHandleAttachment& operator=(const MojoHandleAttachment&) = delete;
+
   Type GetType() const override;
 
   // Returns the owning handle transferring the ownership.
@@ -32,8 +35,6 @@ class IPC_MESSAGE_SUPPORT_EXPORT MojoHandleAttachment
  private:
   ~MojoHandleAttachment() override;
   mojo::ScopedHandle handle_;
-
-  DISALLOW_COPY_AND_ASSIGN(MojoHandleAttachment);
 };
 
 }  // namespace internal
diff --git a/ipc/ipc_mojo_perftest.cc b/ipc/ipc_mojo_perftest.cc
index 8c0f04f3ab..a4d7685769 100644
--- a/ipc/ipc_mojo_perftest.cc
+++ b/ipc/ipc_mojo_perftest.cc
@@ -283,6 +283,9 @@ class MojoInterfacePerfTest : public mojo::core::test::MojoTestBase {
  public:
   MojoInterfacePerfTest() : message_count_(0), count_down_(0) {}
 
+  MojoInterfacePerfTest(const MojoInterfacePerfTest&) = delete;
+  MojoInterfacePerfTest& operator=(const MojoInterfacePerfTest&) = delete;
+
  protected:
   void RunPingPongServer(MojoHandle mp, const std::string& label) {
     label_ = label;
@@ -366,8 +369,6 @@ class MojoInterfacePerfTest : public mojo::core::test::MojoTestBase {
   std::string payload_;
   mojo::Remote<IPC::mojom::Reflector> ping_receiver_;
   std::unique_ptr<base::PerfTimeLogger> perf_logger_;
-
-  DISALLOW_COPY_AND_ASSIGN(MojoInterfacePerfTest);
 };
 
 class InterfacePassingTestDriverImpl : public mojom::InterfacePassingTestDriver,
@@ -426,6 +427,10 @@ class MojoInterfacePassingPerfTest : public mojo::core::test::MojoTestBase {
  public:
   MojoInterfacePassingPerfTest() = default;
 
+  MojoInterfacePassingPerfTest(const MojoInterfacePassingPerfTest&) = delete;
+  MojoInterfacePassingPerfTest& operator=(const MojoInterfacePassingPerfTest&) =
+      delete;
+
  protected:
   void RunInterfacePassingServer(MojoHandle mp,
                                  const std::string& label,
@@ -541,8 +546,6 @@ class MojoInterfacePassingPerfTest : public mojo::core::test::MojoTestBase {
   mojo::Remote<mojom::InterfacePassingTestDriver> driver_remote_;
 
   base::OnceClosure quit_closure_;
-
-  DISALLOW_COPY_AND_ASSIGN(MojoInterfacePassingPerfTest);
 };
 
 DEFINE_TEST_CLIENT_WITH_PIPE(InterfacePassingClient,
@@ -724,6 +727,9 @@ class CallbackPerfTest : public testing::Test {
   CallbackPerfTest()
       : client_thread_("PingPongClient"), message_count_(0), count_down_(0) {}
 
+  CallbackPerfTest(const CallbackPerfTest&) = delete;
+  CallbackPerfTest& operator=(const CallbackPerfTest&) = delete;
+
  protected:
   void RunMultiThreadPingPongServer() {
     client_thread_.Start();
@@ -857,8 +863,6 @@ class CallbackPerfTest : public testing::Test {
   int count_down_;
   std::string payload_;
   std::unique_ptr<base::PerfTimeLogger> perf_logger_;
-
-  DISALLOW_COPY_AND_ASSIGN(CallbackPerfTest);
 };
 
 // Sends the same data as above using PostTask to a different thread instead of
diff --git a/ipc/ipc_security_test_util.h b/ipc/ipc_security_test_util.h
index f0840bc020..63998711d3 100644
--- a/ipc/ipc_security_test_util.h
+++ b/ipc/ipc_security_test_util.h
@@ -14,6 +14,9 @@ class Message;
 
 class IpcSecurityTestUtil {
  public:
+  IpcSecurityTestUtil(const IpcSecurityTestUtil&) = delete;
+  IpcSecurityTestUtil& operator=(const IpcSecurityTestUtil&) = delete;
+
   // Enables testing of security exploit scenarios where a compromised child
   // process can send a malicious message of an arbitrary type.
   //
@@ -31,8 +34,6 @@ class IpcSecurityTestUtil {
 
  private:
   IpcSecurityTestUtil();  // Not instantiable.
-
-  DISALLOW_COPY_AND_ASSIGN(IpcSecurityTestUtil);
 };
 
 }  // namespace IPC
diff --git a/ipc/ipc_sync_message_filter.h b/ipc/ipc_sync_message_filter.h
index ff5868b71e..56d73f2c95 100644
--- a/ipc/ipc_sync_message_filter.h
+++ b/ipc/ipc_sync_message_filter.h
@@ -34,6 +34,9 @@ class SyncChannel;
 class COMPONENT_EXPORT(IPC) SyncMessageFilter : public MessageFilter,
                                                 public Sender {
  public:
+  SyncMessageFilter(const SyncMessageFilter&) = delete;
+  SyncMessageFilter& operator=(const SyncMessageFilter&) = delete;
+
   // Sender implementation.
   bool Send(Message* message) override;
 
@@ -88,8 +91,6 @@ class COMPONENT_EXPORT(IPC) SyncMessageFilter : public MessageFilter,
   base::Lock lock_;
 
   base::WaitableEvent* const shutdown_event_;
-
-  DISALLOW_COPY_AND_ASSIGN(SyncMessageFilter);
 };
 
 }  // namespace IPC
diff --git a/ipc/sync_socket_unittest.cc b/ipc/sync_socket_unittest.cc
index 37f658a72c..b0772c8879 100644
--- a/ipc/sync_socket_unittest.cc
+++ b/ipc/sync_socket_unittest.cc
@@ -60,6 +60,9 @@ class SyncSocketServerListener : public IPC::Listener {
  public:
   SyncSocketServerListener() : chan_(nullptr) {}
 
+  SyncSocketServerListener(const SyncSocketServerListener&) = delete;
+  SyncSocketServerListener& operator=(const SyncSocketServerListener&) = delete;
+
   void Init(IPC::Channel* chan) {
     chan_ = chan;
   }
@@ -103,8 +106,6 @@ class SyncSocketServerListener : public IPC::Listener {
   void OnMsgClassShutdown() { base::RunLoop::QuitCurrentWhenIdleDeprecated(); }
 
   IPC::Channel* chan_;
-
-  DISALLOW_COPY_AND_ASSIGN(SyncSocketServerListener);
 };
 
 // Runs the fuzzing server child mode. Returns when the preset number of
@@ -123,6 +124,9 @@ class SyncSocketClientListener : public IPC::Listener {
  public:
   SyncSocketClientListener() = default;
 
+  SyncSocketClientListener(const SyncSocketClientListener&) = delete;
+  SyncSocketClientListener& operator=(const SyncSocketClientListener&) = delete;
+
   void Init(base::SyncSocket* socket, IPC::Channel* chan) {
     socket_ = socket;
     chan_ = chan;
@@ -157,8 +161,6 @@ class SyncSocketClientListener : public IPC::Listener {
 
   base::SyncSocket* socket_;
   IPC::Channel* chan_;
-
-  DISALLOW_COPY_AND_ASSIGN(SyncSocketClientListener);
 };
 
 using SyncSocketTest = IPCChannelMojoTestBase;
diff --git a/mojo/public/cpp/bindings/shared_remote.h b/mojo/public/cpp/bindings/shared_remote.h
index b140f69807..c7656b0200 100644
--- a/mojo/public/cpp/bindings/shared_remote.h
+++ b/mojo/public/cpp/bindings/shared_remote.h
@@ -76,6 +76,9 @@ class SharedRemoteBase
   using InterfaceType = typename RemoteType::InterfaceType;
   using PendingType = typename RemoteType::PendingType;
 
+  SharedRemoteBase(const SharedRemoteBase&) = delete;
+  SharedRemoteBase& operator=(const SharedRemoteBase&) = delete;
+
   InterfaceType* get() { return &forwarder_->proxy(); }
   InterfaceType* operator->() { return get(); }
   InterfaceType& operator*() { return *get(); }
@@ -218,8 +221,6 @@ class SharedRemoteBase
 
   const scoped_refptr<RemoteWrapper> wrapper_;
   const std::unique_ptr<ThreadSafeForwarder<InterfaceType>> forwarder_;
-
-  DISALLOW_COPY_AND_ASSIGN(SharedRemoteBase);
 };
 
 // SharedRemote wraps a non-thread-safe Remote and proxies messages to it. Note
-- 
2.35.1.723.g4982287a31-goog

