From 45e94f153004fddcf54831cfd30c75c2771f6b19 Mon Sep 17 00:00:00 2001
From: hscham <hscham@google.com>
Date: Wed, 15 Dec 2021 16:15:15 +0900
Subject: [PATCH] add libchrome namespace to trace_event stub perfetto

chromeos-base/perfetto_simple_producer include the real perfetto as
their dependency. On the other hand, they also uses parts of libchrome
which will be indirectly including the trace_event_stub.h and causes
redefinition error.
Add libchrome namspace for the stub ones used within libchrome only by
adding the extra namespace in trace_event_stub.h,
base_tracing_forward.h, and mojo enum template, and running:
```
for f in $(ag -l perfetto::); do
  sed -i 's/perfetto::/perfetto::libchrome::/g' $f
done
```

Change-Id: Ic1724a2010a8ad28c9dbf481242d90b06003df96
---
 .../starscan/stats_collector.cc               |   6 +-
 base/android/jank_metric_uma_recorder.cc      |   6 +-
 base/android/trace_event_binding.cc           |   8 +-
 base/files/file.cc                            |   2 +-
 base/files/file.h                             |   2 +-
 base/files/file_path.cc                       |   4 +-
 base/files/file_path.h                        |   2 +-
 base/files/file_path_unittest.cc              |   2 +-
 base/files/file_unittest.cc                   |   2 +-
 base/location.cc                              |   2 +-
 base/location.h                               |   2 +-
 base/location_unittest.cc                     |   2 +-
 base/memory/memory_pressure_listener.cc       |   8 +-
 base/task/common/task_annotator.cc            |   6 +-
 base/task/sequence_manager/task_queue.cc      |   2 +-
 base/task/sequence_manager/task_queue.h       |   2 +-
 base/task/sequence_manager/task_queue_impl.cc |   4 +-
 .../thread_controller_power_monitor.cc        |   8 +-
 base/test/trace_test_utils.cc                 |   4 +-
 base/test/trace_test_utils.h                  |   2 +-
 base/threading/scoped_blocking_call.cc        |   8 +-
 base/threading/scoped_thread_priority.cc      |   2 +-
 base/threading/thread_restrictions.cc         |   6 +-
 .../application_state_proto_android.cc        |   4 +-
 .../application_state_proto_android.h         |   6 +-
 base/trace_event/base_tracing_forward.h       |   2 +
 base/trace_event/blame_context.cc             |   2 +-
 base/trace_event/blame_context.h              |   2 +-
 base/trace_event/builtin_categories.h         |   4 +-
 base/trace_event/common/trace_event_common.h  |   6 +-
 base/trace_event/interned_args_helper.cc      |   4 +-
 base/trace_event/interned_args_helper.h       |  12 +--
 base/trace_event/memory_allocator_dump.cc     |  10 +-
 base/trace_event/memory_allocator_dump.h      |   2 +-
 .../memory_pressure_level_proto.cc            |   4 +-
 .../trace_event/memory_pressure_level_proto.h |   2 +-
 base/trace_event/process_memory_dump.cc       |   4 +-
 base/trace_event/process_memory_dump.h        |   2 +-
 base/trace_event/task_execution_macros.h      |   6 +-
 base/trace_event/trace_arguments.cc           |   2 +-
 base/trace_event/trace_arguments.h            |  18 ++--
 base/trace_event/trace_event_impl.cc          |   8 +-
 base/trace_event/trace_event_stub.cc          |   2 +
 base/trace_event/trace_event_stub.h           |   4 +-
 base/trace_event/trace_event_unittest.cc      |   4 +-
 base/trace_event/trace_log.cc                 | 100 +++++++++---------
 base/trace_event/trace_log.h                  |  22 ++--
 base/trace_event/traced_value_support.h       |  54 +++++-----
 .../traced_value_support_unittest.cc          |  42 ++++----
 base/trace_event/typed_macros.h               |  14 +--
 .../typed_macros_embedder_support.h           |   6 +-
 base/trace_event/typed_macros_internal.cc     |   4 +-
 base/trace_event/typed_macros_internal.h      |  28 ++---
 base/trace_event/typed_macros_unittest.cc     |  56 +++++-----
 base/tracing/perfetto_platform.cc             |  12 +--
 base/tracing/perfetto_platform.h              |   6 +-
 base/tracing/perfetto_task_runner.cc          |   4 +-
 base/tracing/perfetto_task_runner.h           |   8 +-
 base/tracing/trace_time.cc                    |   2 +-
 base/tracing/trace_time.h                     |   8 +-
 base/values.cc                                |   8 +-
 base/values.h                                 |   2 +-
 base/values_unittest.cc                       |  14 +--
 ipc/trace_ipc_message.cc                      |   2 +-
 ipc/trace_ipc_message.h                       |   4 +-
 .../cpp/bindings/generic_pending_receiver.cc  |   2 +-
 .../cpp/bindings/generic_pending_receiver.h   |   2 +-
 mojo/public/cpp/bindings/lib/connector.cc     |   2 +-
 mojo/public/cpp/bindings/struct_ptr.h         |  12 +--
 mojo/public/cpp/system/simple_watcher.cc      |   2 +-
 .../generators/cpp_templates/enum_macros.tmpl |   8 +-
 .../cpp_templates/interface_macros.tmpl       |   4 +-
 .../wrapper_class_declaration.tmpl            |   2 +-
 .../wrapper_class_definition.tmpl             |   4 +-
 74 files changed, 323 insertions(+), 313 deletions(-)

diff --git a/base/allocator/partition_allocator/starscan/stats_collector.cc b/base/allocator/partition_allocator/starscan/stats_collector.cc
index ace786deaf..443edddccd 100644
--- a/base/allocator/partition_allocator/starscan/stats_collector.cc
+++ b/base/allocator/partition_allocator/starscan/stats_collector.cc
@@ -66,11 +66,11 @@ void StatsCollector::ReportTracesAndHistsImpl(
         continue;
       }
       TRACE_EVENT_BEGIN(kTraceCategory,
-                        perfetto::StaticString(
+                        perfetto::libchrome::StaticString(
                             ToTracingString(static_cast<IdType<context>>(id))),
-                        perfetto::ThreadTrack::ForThread(tid),
+                        perfetto::libchrome::ThreadTrack::ForThread(tid),
                         event.start_time);
-      TRACE_EVENT_END(kTraceCategory, perfetto::ThreadTrack::ForThread(tid),
+      TRACE_EVENT_END(kTraceCategory, perfetto::libchrome::ThreadTrack::ForThread(tid),
                       event.end_time);
       accumulated_events[id] += (event.end_time - event.start_time);
     }
diff --git a/base/android/jank_metric_uma_recorder.cc b/base/android/jank_metric_uma_recorder.cc
index ff09dabacf..bb9f6b547f 100644
--- a/base/android/jank_metric_uma_recorder.cc
+++ b/base/android/jank_metric_uma_recorder.cc
@@ -23,12 +23,12 @@ namespace {
 
 void AddFrameToTrace(int64_t timestamp_ns, int64_t durations_ns) {
 #if BUILDFLAG(ENABLE_BASE_TRACING)
-  auto t = perfetto::Track(timestamp_ns);
+  auto t = perfetto::libchrome::Track(timestamp_ns);
   TRACE_EVENT_BEGIN(
-      "ui", "AndroidFrameVsync", t, [&](perfetto::EventContext ctx) {
+      "ui", "AndroidFrameVsync", t, [&](perfetto::libchrome::EventContext ctx) {
         ctx.event()->set_timestamp_absolute_us(timestamp_ns / 1000);
       });
-  TRACE_EVENT_END("ui", t, [&](perfetto::EventContext ctx) {
+  TRACE_EVENT_END("ui", t, [&](perfetto::libchrome::EventContext ctx) {
     ctx.event()->set_timestamp_absolute_us((timestamp_ns + durations_ns) /
                                            1000);
   });
diff --git a/base/android/trace_event_binding.cc b/base/android/trace_event_binding.cc
index 6988499202..34ee3c9f49 100644
--- a/base/android/trace_event_binding.cc
+++ b/base/android/trace_event_binding.cc
@@ -86,8 +86,8 @@ static void JNI_TraceEvent_InitViewHierarchyDump(JNIEnv* env) {
   SCOPED_UMA_HISTOGRAM_TIMER("Tracing.ViewHierarchyDump.DumpDuration");
   TRACE_EVENT_INSTANT(
       kAndroidViewHierarchyTraceCategory, kAndroidViewHierarchyEventName,
-      perfetto::Track::Global(0), [&](perfetto::EventContext ctx) {
-        auto* event = ctx.event<perfetto::protos::pbzero::ChromeTrackEvent>();
+      perfetto::libchrome::Track::Global(0), [&](perfetto::libchrome::EventContext ctx) {
+        auto* event = ctx.event<perfetto::libchrome::protos::pbzero::ChromeTrackEvent>();
         auto* dump = event->set_android_view_dump();
         Java_TraceEvent_dumpViewHierarchy(env, reinterpret_cast<jlong>(dump));
       });
@@ -96,7 +96,7 @@ static void JNI_TraceEvent_InitViewHierarchyDump(JNIEnv* env) {
 static jlong JNI_TraceEvent_StartActivityDump(JNIEnv* env,
                                               const JavaParamRef<jstring>& name,
                                               jlong dump_proto_ptr) {
-  auto* dump = reinterpret_cast<perfetto::protos::pbzero::AndroidViewDump*>(
+  auto* dump = reinterpret_cast<perfetto::libchrome::protos::pbzero::AndroidViewDump*>(
       dump_proto_ptr);
   auto* activity = dump->add_activity();
   activity->set_name(ConvertJavaStringToUTF8(env, name));
@@ -112,7 +112,7 @@ static void JNI_TraceEvent_AddViewDump(
     const JavaParamRef<jstring>& class_name,
     const JavaParamRef<jstring>& resource_name,
     jlong activity_proto_ptr) {
-  auto* activity = reinterpret_cast<perfetto::protos::pbzero::AndroidActivity*>(
+  auto* activity = reinterpret_cast<perfetto::libchrome::protos::pbzero::AndroidActivity*>(
       activity_proto_ptr);
   auto* view = activity->add_view();
   view->set_id(id);
diff --git a/base/files/file.cc b/base/files/file.cc
index 6f305a4841..767d8a668b 100644
--- a/base/files/file.cc
+++ b/base/files/file.cc
@@ -166,7 +166,7 @@ std::string File::ErrorToString(Error error) {
   return "";
 }
 
-void File::WriteIntoTrace(perfetto::TracedValue context) const {
+void File::WriteIntoTrace(perfetto::libchrome::TracedValue context) const {
   auto dict = std::move(context).WriteDictionary();
   dict.Add("is_valid", IsValid());
   dict.Add("created", created_);
diff --git a/base/files/file.h b/base/files/file.h
index 69c5d90b98..70db01ad77 100644
--- a/base/files/file.h
+++ b/base/files/file.h
@@ -321,7 +321,7 @@ class BASE_EXPORT File {
   bool async() const { return async_; }
 
   // Serialise this object into a trace.
-  void WriteIntoTrace(perfetto::TracedValue context) const;
+  void WriteIntoTrace(perfetto::libchrome::TracedValue context) const;
 
 #if defined(OS_WIN)
   // Sets or clears the DeleteFile disposition on the file. Returns true if
diff --git a/base/files/file_path.cc b/base/files/file_path.cc
index 6f23db7b00..32e6ba67de 100644
--- a/base/files/file_path.cc
+++ b/base/files/file_path.cc
@@ -1377,8 +1377,8 @@ FilePath FilePath::NormalizePathSeparators() const {
   return NormalizePathSeparatorsTo(kSeparators[0]);
 }
 
-void FilePath::WriteIntoTrace(perfetto::TracedValue context) const {
-  perfetto::WriteIntoTracedValue(std::move(context), value());
+void FilePath::WriteIntoTrace(perfetto::libchrome::TracedValue context) const {
+  perfetto::libchrome::WriteIntoTracedValue(std::move(context), value());
 }
 
 FilePath FilePath::NormalizePathSeparatorsTo(CharType separator) const {
diff --git a/base/files/file_path.h b/base/files/file_path.h
index f682780ecc..6f524f3943 100644
--- a/base/files/file_path.h
+++ b/base/files/file_path.h
@@ -453,7 +453,7 @@ class BASE_EXPORT FilePath {
   }
 
   // Serialise this object into a trace.
-  void WriteIntoTrace(perfetto::TracedValue context) const;
+  void WriteIntoTrace(perfetto::libchrome::TracedValue context) const;
 
 #if defined(OS_APPLE)
   // Returns the string in the special canonical decomposed form as defined for
diff --git a/base/files/file_path_unittest.cc b/base/files/file_path_unittest.cc
index 57a8a05345..03fff0985e 100644
--- a/base/files/file_path_unittest.cc
+++ b/base/files/file_path_unittest.cc
@@ -1377,7 +1377,7 @@ TEST_F(FilePathTest, PrintToOstream) {
 
 #if BUILDFLAG(ENABLE_BASE_TRACING)
 TEST_F(FilePathTest, TracedValueSupport) {
-  EXPECT_EQ(perfetto::TracedValueToString(FilePath(FPL("foo"))), "foo");
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(FilePath(FPL("foo"))), "foo");
 }
 #endif  // BUILDFLAG(ENABLE_BASE_TRACING)
 
diff --git a/base/files/file_unittest.cc b/base/files/file_unittest.cc
index 1d7b01a23a..9949565d62 100644
--- a/base/files/file_unittest.cc
+++ b/base/files/file_unittest.cc
@@ -591,7 +591,7 @@ TEST(FileTest, TracedValueSupport) {
              base::File::FLAG_WRITE | base::File::FLAG_DELETE_ON_CLOSE));
   ASSERT_TRUE(file.IsValid());
 
-  EXPECT_EQ(perfetto::TracedValueToString(file),
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(file),
             "{is_valid:true,created:true,async:false,error_details:FILE_OK}");
 }
 #endif  // BUILDFLAG(ENABLE_BASE_TRACING)
diff --git a/base/location.cc b/base/location.cc
index 0f364c88aa..fba8d0fb09 100644
--- a/base/location.cc
+++ b/base/location.cc
@@ -113,7 +113,7 @@ std::string Location::ToString() const {
   return StringPrintf("pc:%p", program_counter_);
 }
 
-void Location::WriteIntoTrace(perfetto::TracedValue context) const {
+void Location::WriteIntoTrace(perfetto::libchrome::TracedValue context) const {
   auto dict = std::move(context).WriteDictionary();
   dict.Add("function_name", function_name_);
   dict.Add("file_name", file_name_);
diff --git a/base/location.h b/base/location.h
index 08407437f8..3f042c825a 100644
--- a/base/location.h
+++ b/base/location.h
@@ -81,7 +81,7 @@ class BASE_EXPORT Location {
   std::string ToString() const;
 
   // Write a representation of this object into a trace.
-  void WriteIntoTrace(perfetto::TracedValue context) const;
+  void WriteIntoTrace(perfetto::libchrome::TracedValue context) const;
 
 #if !BUILDFLAG(FROM_HERE_USES_LOCATION_BUILTINS)
 #if !BUILDFLAG(ENABLE_LOCATION_SOURCE)
diff --git a/base/location_unittest.cc b/base/location_unittest.cc
index dd54d39243..5713ad12ee 100644
--- a/base/location_unittest.cc
+++ b/base/location_unittest.cc
@@ -47,7 +47,7 @@ TEST(LocationTest, CurrentYieldsCorrectValue) {
 
 #if BUILDFLAG(ENABLE_BASE_TRACING)
 TEST(LocationTest, TracingSupport) {
-  EXPECT_EQ(perfetto::TracedValueToString(
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(
                 Location("func", "file", 42, WhereAmI().program_counter())),
             "{function_name:func,file_name:file,line_number:42}");
 }
diff --git a/base/memory/memory_pressure_listener.cc b/base/memory/memory_pressure_listener.cc
index 623ae26ee4..b0a654d45f 100644
--- a/base/memory/memory_pressure_listener.cc
+++ b/base/memory/memory_pressure_listener.cc
@@ -96,8 +96,8 @@ MemoryPressureListener::~MemoryPressureListener() {
 void MemoryPressureListener::Notify(MemoryPressureLevel memory_pressure_level) {
   TRACE_EVENT(
       "base", "MemoryPressureListener::Notify",
-      [&](perfetto::EventContext ctx) {
-        auto* event = ctx.event<perfetto::protos::pbzero::ChromeTrackEvent>();
+      [&](perfetto::libchrome::EventContext ctx) {
+        auto* event = ctx.event<perfetto::libchrome::protos::pbzero::ChromeTrackEvent>();
         auto* data = event->set_chrome_memory_pressure_notification();
         data->set_level(
             trace_event::MemoryPressureLevelToTraceEnum(memory_pressure_level));
@@ -123,8 +123,8 @@ void MemoryPressureListener::NotifyMemoryPressure(
   TRACE_EVENT_INSTANT(
       trace_event::MemoryDumpManager::kTraceCategory,
       "MemoryPressureListener::NotifyMemoryPressure",
-      [&](perfetto::EventContext ctx) {
-        auto* event = ctx.event<perfetto::protos::pbzero::ChromeTrackEvent>();
+      [&](perfetto::libchrome::EventContext ctx) {
+        auto* event = ctx.event<perfetto::libchrome::protos::pbzero::ChromeTrackEvent>();
         auto* data = event->set_chrome_memory_pressure_notification();
         data->set_level(
             trace_event::MemoryPressureLevelToTraceEnum(memory_pressure_level));
diff --git a/base/task/common/task_annotator.cc b/base/task/common/task_annotator.cc
index 63ec2abb12..b872b472f1 100644
--- a/base/task/common/task_annotator.cc
+++ b/base/task/common/task_annotator.cc
@@ -123,9 +123,9 @@ void TaskAnnotator::RunTask(const char* trace_event_name,
   debug::ScopedTaskRunActivity task_activity(*pending_task);
 
   TRACE_EVENT(TRACE_DISABLED_BY_DEFAULT("toplevel.ipc"),
-              "TaskAnnotator::RunTask", [&](perfetto::EventContext ctx) {
+              "TaskAnnotator::RunTask", [&](perfetto::libchrome::EventContext ctx) {
                 auto* event =
-                    ctx.event<perfetto::protos::pbzero::ChromeTrackEvent>();
+                    ctx.event<perfetto::libchrome::protos::pbzero::ChromeTrackEvent>();
                 auto* annotator = event->set_chrome_task_annotator();
                 annotator->set_ipc_hash(pending_task->ipc_hash);
                 if (!pending_task->delayed_run_time.is_null()) {
@@ -217,7 +217,7 @@ TaskAnnotator::ScopedSetIpcHash::ScopedSetIpcHash(
     uint32_t ipc_hash,
     const char* ipc_interface_name) {
   TRACE_EVENT_BEGIN(
-      "base", "ScopedSetIpcHash", [&](perfetto::EventContext ctx) {
+      "base", "ScopedSetIpcHash", [&](perfetto::libchrome::EventContext ctx) {
         auto* mojo_event = ctx.event()->set_chrome_mojo_event_info();
         if (ipc_hash > 0)
           mojo_event->set_ipc_hash(ipc_hash);
diff --git a/base/task/sequence_manager/task_queue.cc b/base/task/sequence_manager/task_queue.cc
index 8fafee7f2c..6a8133c923 100644
--- a/base/task/sequence_manager/task_queue.cc
+++ b/base/task/sequence_manager/task_queue.cc
@@ -334,7 +334,7 @@ const char* TaskQueue::GetName() const {
   return name_;
 }
 
-void TaskQueue::WriteIntoTrace(perfetto::TracedValue context) const {
+void TaskQueue::WriteIntoTrace(perfetto::libchrome::TracedValue context) const {
   auto dict = std::move(context).WriteDictionary();
   dict.Add("name", name_);
 }
diff --git a/base/task/sequence_manager/task_queue.h b/base/task/sequence_manager/task_queue.h
index 24f8d46b26..1f99d45289 100644
--- a/base/task/sequence_manager/task_queue.h
+++ b/base/task/sequence_manager/task_queue.h
@@ -284,7 +284,7 @@ class BASE_EXPORT TaskQueue : public RefCountedThreadSafe<TaskQueue> {
   virtual const char* GetName() const;
 
   // Serialise this object into a trace.
-  void WriteIntoTrace(perfetto::TracedValue context) const;
+  void WriteIntoTrace(perfetto::libchrome::TracedValue context) const;
 
   // Set the priority of the queue to |priority|. NOTE this must be called on
   // the thread this TaskQueue was created by.
diff --git a/base/task/sequence_manager/task_queue_impl.cc b/base/task/sequence_manager/task_queue_impl.cc
index f1c4ff552a..868b1c30e0 100644
--- a/base/task/sequence_manager/task_queue_impl.cc
+++ b/base/task/sequence_manager/task_queue_impl.cc
@@ -1300,8 +1300,8 @@ void TaskQueueImpl::ReportIpcTaskQueued(
     const base::TimeDelta& time_since_disabled) {
   TRACE_EVENT_INSTANT(
       TRACE_DISABLED_BY_DEFAULT("lifecycles"), "task_posted_to_disabled_queue",
-      [&](perfetto::EventContext ctx) {
-        auto* proto = ctx.event<perfetto::protos::pbzero::ChromeTrackEvent>()
+      [&](perfetto::libchrome::EventContext ctx) {
+        auto* proto = ctx.event<perfetto::libchrome::protos::pbzero::ChromeTrackEvent>()
                           ->set_chrome_task_posted_to_disabled_queue();
         proto->set_task_queue_name(task_queue_name);
         proto->set_time_since_disabled_ms(time_since_disabled.InMilliseconds());
diff --git a/base/task/sequence_manager/thread_controller_power_monitor.cc b/base/task/sequence_manager/thread_controller_power_monitor.cc
index ad9f591f8b..40f7e530be 100644
--- a/base/task/sequence_manager/thread_controller_power_monitor.cc
+++ b/base/task/sequence_manager/thread_controller_power_monitor.cc
@@ -69,8 +69,8 @@ void ThreadControllerPowerMonitor::OnSuspend() {
   DCHECK(!is_power_suspended_);
 
   TRACE_EVENT_BEGIN("base", "ThreadController::Suspended",
-                    perfetto::Track(reinterpret_cast<uint64_t>(this),
-                                    perfetto::ThreadTrack::Current()));
+                    perfetto::libchrome::Track(reinterpret_cast<uint64_t>(this),
+                                    perfetto::libchrome::ThreadTrack::Current()));
   is_power_suspended_ = true;
 }
 
@@ -82,8 +82,8 @@ void ThreadControllerPowerMonitor::OnResume() {
   // added to the power monitor. Ignoring the resume notification in that case.
   if (is_power_suspended_) {
     TRACE_EVENT_END("base" /* ThreadController::Suspended */,
-                    perfetto::Track(reinterpret_cast<uint64_t>(this),
-                                    perfetto::ThreadTrack::Current()));
+                    perfetto::libchrome::Track(reinterpret_cast<uint64_t>(this),
+                                    perfetto::libchrome::ThreadTrack::Current()));
     is_power_suspended_ = false;
   }
 }
diff --git a/base/test/trace_test_utils.cc b/base/test/trace_test_utils.cc
index f10ae2bf5b..3a858a9996 100644
--- a/base/test/trace_test_utils.cc
+++ b/base/test/trace_test_utils.cc
@@ -96,8 +96,8 @@ TracingEnvironment::~TracingEnvironment() {
 }
 
 // static
-perfetto::protos::gen::TraceConfig TracingEnvironment::GetDefaultTraceConfig() {
-  perfetto::protos::gen::TraceConfig trace_config;
+perfetto::libchrome::protos::gen::TraceConfig TracingEnvironment::GetDefaultTraceConfig() {
+  perfetto::libchrome::protos::gen::TraceConfig trace_config;
   auto* buffer_config = trace_config.add_buffers();
   buffer_config->set_size_kb(1024 * 1024);
   auto* data_source = trace_config.add_data_sources();
diff --git a/base/test/trace_test_utils.h b/base/test/trace_test_utils.h
index 0d224cea3b..e95f5bfab7 100644
--- a/base/test/trace_test_utils.h
+++ b/base/test/trace_test_utils.h
@@ -35,7 +35,7 @@ class TracingEnvironment {
   ~TracingEnvironment();
 
   // Builds a default Perfetto trace config with track events enabled.
-  static perfetto::protos::gen::TraceConfig GetDefaultTraceConfig();
+  static perfetto::libchrome::protos::gen::TraceConfig GetDefaultTraceConfig();
 
  private:
   TaskEnvironment* task_environment_ = nullptr;
diff --git a/base/threading/scoped_blocking_call.cc b/base/threading/scoped_blocking_call.cc
index d112c85f80..cdd84a062d 100644
--- a/base/threading/scoped_blocking_call.cc
+++ b/base/threading/scoped_blocking_call.cc
@@ -43,8 +43,8 @@ ScopedBlockingCall::ScopedBlockingCall(const Location& from_here,
 
   internal::AssertBlockingAllowed();
   TRACE_EVENT_BEGIN(
-      "base", "ScopedBlockingCall", [&](perfetto::EventContext ctx) {
-        perfetto::protos::pbzero::SourceLocation* source_location_data =
+      "base", "ScopedBlockingCall", [&](perfetto::libchrome::EventContext ctx) {
+        perfetto::libchrome::protos::pbzero::SourceLocation* source_location_data =
             ctx.event()->set_source_location();
         source_location_data->set_file_name(from_here.file_name());
         source_location_data->set_function_name(from_here.function_name());
@@ -76,8 +76,8 @@ ScopedBlockingCallWithBaseSyncPrimitives::
   internal::AssertBaseSyncPrimitivesAllowed();
   TRACE_EVENT_BEGIN(
       "base", "ScopedBlockingCallWithBaseSyncPrimitives",
-      [&](perfetto::EventContext ctx) {
-        perfetto::protos::pbzero::SourceLocation* source_location_data =
+      [&](perfetto::libchrome::EventContext ctx) {
+        perfetto::libchrome::protos::pbzero::SourceLocation* source_location_data =
             ctx.event()->set_source_location();
         source_location_data->set_file_name(from_here.file_name());
         source_location_data->set_function_name(from_here.function_name());
diff --git a/base/threading/scoped_thread_priority.cc b/base/threading/scoped_thread_priority.cc
index 8001d88cb9..ac899fb16c 100644
--- a/base/threading/scoped_thread_priority.cc
+++ b/base/threading/scoped_thread_priority.cc
@@ -21,7 +21,7 @@ ScopedMayLoadLibraryAtBackgroundPriority::
 {
   TRACE_EVENT_BEGIN(
       "base", "ScopedMayLoadLibraryAtBackgroundPriority",
-      [&](perfetto::EventContext ctx) {
+      [&](perfetto::libchrome::EventContext ctx) {
         ctx.event()->set_source_location_iid(
             base::trace_event::InternedSourceLocation::Get(
                 &ctx, base::trace_event::TraceSourceLocation(from_here)));
diff --git a/base/threading/thread_restrictions.cc b/base/threading/thread_restrictions.cc
index a892d9bb96..a6004c4969 100644
--- a/base/threading/thread_restrictions.cc
+++ b/base/threading/thread_restrictions.cc
@@ -294,7 +294,7 @@ ScopedAllowBlocking::ScopedAllowBlocking(const Location& from_here)
 #endif
 {
   TRACE_EVENT_BEGIN(
-      "base", "ScopedAllowBlocking", [&](perfetto::EventContext ctx) {
+      "base", "ScopedAllowBlocking", [&](perfetto::libchrome::EventContext ctx) {
         ctx.event()->set_source_location_iid(
             base::trace_event::InternedSourceLocation::Get(
                 &ctx, base::trace_event::TraceSourceLocation(from_here)));
@@ -319,7 +319,7 @@ ScopedAllowBaseSyncPrimitivesOutsideBlockingScope::
 {
   TRACE_EVENT_BEGIN(
       "base", "ScopedAllowBaseSyncPrimitivesOutsideBlockingScope",
-      [&](perfetto::EventContext ctx) {
+      [&](perfetto::libchrome::EventContext ctx) {
         ctx.event()->set_source_location_iid(
             base::trace_event::InternedSourceLocation::Get(
                 &ctx, base::trace_event::TraceSourceLocation(from_here)));
@@ -347,7 +347,7 @@ ThreadRestrictions::ScopedAllowIO::ScopedAllowIO(const Location& from_here)
           std::make_unique<BooleanWithStack>(false)))
 #endif
 {
-  TRACE_EVENT_BEGIN("base", "ScopedAllowIO", [&](perfetto::EventContext ctx) {
+  TRACE_EVENT_BEGIN("base", "ScopedAllowIO", [&](perfetto::libchrome::EventContext ctx) {
     ctx.event()->set_source_location_iid(
         base::trace_event::InternedSourceLocation::Get(
             &ctx, base::trace_event::TraceSourceLocation(from_here)));
diff --git a/base/trace_event/application_state_proto_android.cc b/base/trace_event/application_state_proto_android.cc
index 3317b15443..ba766453b1 100644
--- a/base/trace_event/application_state_proto_android.cc
+++ b/base/trace_event/application_state_proto_android.cc
@@ -7,9 +7,9 @@
 namespace base {
 namespace trace_event {
 
-perfetto::protos::pbzero::ChromeApplicationStateInfo::ChromeApplicationState
+perfetto::libchrome::protos::pbzero::ChromeApplicationStateInfo::ChromeApplicationState
 ApplicationStateToTraceEnum(base::android::ApplicationState state) {
-  using perfetto::protos::pbzero::ChromeApplicationStateInfo;
+  using perfetto::libchrome::protos::pbzero::ChromeApplicationStateInfo;
   switch (state) {
     case base::android::APPLICATION_STATE_UNKNOWN:
       return ChromeApplicationStateInfo::APPLICATION_STATE_UNKNOWN;
diff --git a/base/trace_event/application_state_proto_android.h b/base/trace_event/application_state_proto_android.h
index 0c23d33b5d..28799d664d 100644
--- a/base/trace_event/application_state_proto_android.h
+++ b/base/trace_event/application_state_proto_android.h
@@ -11,8 +11,8 @@
 
 #define TRACE_APPLICATION_STATE(state)                                  \
   TRACE_EVENT_INSTANT(                                                  \
-      "Java", "ApplicationState", perfetto::Track::Global(0),           \
-      [state](perfetto::EventContext ctx) {                             \
+      "Java", "ApplicationState", perfetto::libchrome::Track::Global(0),           \
+      [state](perfetto::libchrome::EventContext ctx) {                             \
         ctx.event()                                                     \
             ->set_chrome_application_state_info()                       \
             ->set_application_state(                                    \
@@ -23,7 +23,7 @@ namespace base {
 namespace trace_event {
 
 BASE_EXPORT
-perfetto::protos::pbzero::ChromeApplicationStateInfo::ChromeApplicationState
+perfetto::libchrome::protos::pbzero::ChromeApplicationStateInfo::ChromeApplicationState
 ApplicationStateToTraceEnum(base::android::ApplicationState state);
 
 }  // namespace trace_event
diff --git a/base/trace_event/base_tracing_forward.h b/base/trace_event/base_tracing_forward.h
index f72f9fde2f..734a4b8eed 100644
--- a/base/trace_event/base_tracing_forward.h
+++ b/base/trace_event/base_tracing_forward.h
@@ -15,6 +15,7 @@
 #else
 
 namespace perfetto {
+namespace libchrome {
 
 class TracedValue;
 
@@ -30,6 +31,7 @@ struct check_traced_value_support {
   using type = ResultType;
 };
 
+}  // namespace libchrome
 }  // namespace perfetto
 
 #endif  // !BUILDFLAG(ENABLE_BASE_TRACING)
diff --git a/base/trace_event/blame_context.cc b/base/trace_event/blame_context.cc
index c6784c7539..8cf360f576 100644
--- a/base/trace_event/blame_context.cc
+++ b/base/trace_event/blame_context.cc
@@ -90,7 +90,7 @@ void BlameContext::AsValueInto(trace_event::TracedValue* state) {
   state->EndDictionary();
 }
 
-void BlameContext::WriteIntoTrace(perfetto::TracedValue context) const {
+void BlameContext::WriteIntoTrace(perfetto::libchrome::TracedValue context) const {
   auto dict = std::move(context).WriteDictionary();
   dict.Add("id", id_);
   dict.Add("parent_id", parent_id_);
diff --git a/base/trace_event/blame_context.h b/base/trace_event/blame_context.h
index c439f3b917..d7ebafe8fc 100644
--- a/base/trace_event/blame_context.h
+++ b/base/trace_event/blame_context.h
@@ -109,7 +109,7 @@ class BASE_EXPORT BlameContext
   void OnTraceLogEnabled() override;
   void OnTraceLogDisabled() override;
 
-  void WriteIntoTrace(perfetto::TracedValue context) const;
+  void WriteIntoTrace(perfetto::libchrome::TracedValue context) const;
 
  protected:
   // Serialize the properties of this blame context into |state|. Subclasses can
diff --git a/base/trace_event/builtin_categories.h b/base/trace_event/builtin_categories.h
index 60bba6a85d..67ca070208 100644
--- a/base/trace_event/builtin_categories.h
+++ b/base/trace_event/builtin_categories.h
@@ -360,8 +360,8 @@ PERFETTO_DEFINE_TEST_CATEGORY_PREFIXES("cat",
                                        TRACE_DISABLED_BY_DEFAULT("Testing"),
                                        TRACE_DISABLED_BY_DEFAULT("NotTesting"));
 
-#define INTERNAL_CATEGORY(X) perfetto::Category(X),
-#define INTERNAL_CATEGORY_GROUP(X) perfetto::Category::Group(X),
+#define INTERNAL_CATEGORY(X) perfetto::libchrome::Category(X),
+#define INTERNAL_CATEGORY_GROUP(X) perfetto::libchrome::Category::Group(X),
 
 // Define a Perfetto TrackEvent data source using the list of categories defined
 // above. See https://perfetto.dev/docs/instrumentation/track-events.
diff --git a/base/trace_event/common/trace_event_common.h b/base/trace_event/common/trace_event_common.h
index 9384adeb69..4b2ee272aa 100644
--- a/base/trace_event/common/trace_event_common.h
+++ b/base/trace_event/common/trace_event_common.h
@@ -237,7 +237,7 @@
 
 // Declare debug annotation converters for base time types, so they can be
 // passed as trace event arguments.
-// TODO(skyostil): Serialize timestamps using perfetto::TracedValue instead.
+// TODO(skyostil): Serialize timestamps using perfetto::libchrome::TracedValue instead.
 namespace perfetto {
 namespace protos {
 namespace pbzero {
@@ -262,12 +262,12 @@ namespace perfetto {
 namespace legacy {
 
 template <>
-perfetto::ThreadTrack BASE_EXPORT
+perfetto::libchrome::ThreadTrack BASE_EXPORT
 ConvertThreadId(const ::base::PlatformThreadId& thread);
 
 #if defined(OS_WIN)
 template <>
-perfetto::ThreadTrack BASE_EXPORT ConvertThreadId(const int& thread);
+perfetto::libchrome::ThreadTrack BASE_EXPORT ConvertThreadId(const int& thread);
 #endif  // defined(OS_WIN)
 
 }  // namespace legacy
diff --git a/base/trace_event/interned_args_helper.cc b/base/trace_event/interned_args_helper.cc
index cb18f3fba7..57fcc06bd7 100644
--- a/base/trace_event/interned_args_helper.cc
+++ b/base/trace_event/interned_args_helper.cc
@@ -15,7 +15,7 @@ namespace trace_event {
 
 //  static
 void InternedSourceLocation::Add(
-    perfetto::protos::pbzero::InternedData* interned_data,
+    perfetto::libchrome::protos::pbzero::InternedData* interned_data,
     size_t iid,
     const TraceSourceLocation& location) {
   auto* msg = interned_data->add_source_locations();
@@ -36,7 +36,7 @@ void InternedSourceLocation::Add(
 
 // static
 void InternedLogMessage::Add(
-    perfetto::protos::pbzero::InternedData* interned_data,
+    perfetto::libchrome::protos::pbzero::InternedData* interned_data,
     size_t iid,
     const std::string& log_message) {
   auto* msg = interned_data->add_log_message_body();
diff --git a/base/trace_event/interned_args_helper.h b/base/trace_event/interned_args_helper.h
index ba3945768b..3ec0c09f7b 100644
--- a/base/trace_event/interned_args_helper.h
+++ b/base/trace_event/interned_args_helper.h
@@ -69,21 +69,21 @@ namespace base {
 namespace trace_event {
 
 struct BASE_EXPORT InternedSourceLocation
-    : public perfetto::TrackEventInternedDataIndex<
+    : public perfetto::libchrome::TrackEventInternedDataIndex<
           InternedSourceLocation,
-          perfetto::protos::pbzero::InternedData::kSourceLocationsFieldNumber,
+          perfetto::libchrome::protos::pbzero::InternedData::kSourceLocationsFieldNumber,
           TraceSourceLocation> {
-  static void Add(perfetto::protos::pbzero::InternedData* interned_data,
+  static void Add(perfetto::libchrome::protos::pbzero::InternedData* interned_data,
                   size_t iid,
                   const TraceSourceLocation& location);
 };
 
 struct BASE_EXPORT InternedLogMessage
-    : public perfetto::TrackEventInternedDataIndex<
+    : public perfetto::libchrome::TrackEventInternedDataIndex<
           InternedLogMessage,
-          perfetto::protos::pbzero::InternedData::kLogMessageBodyFieldNumber,
+          perfetto::libchrome::protos::pbzero::InternedData::kLogMessageBodyFieldNumber,
           std::string> {
-  static void Add(perfetto::protos::pbzero::InternedData* interned_data,
+  static void Add(perfetto::libchrome::protos::pbzero::InternedData* interned_data,
                   size_t iid,
                   const std::string& log_message);
 };
diff --git a/base/trace_event/memory_allocator_dump.cc b/base/trace_event/memory_allocator_dump.cc
index 4a6f5d749f..0562c3b8bf 100644
--- a/base/trace_event/memory_allocator_dump.cc
+++ b/base/trace_event/memory_allocator_dump.cc
@@ -93,7 +93,7 @@ void MemoryAllocatorDump::AsValueInto(TracedValue* value) const {
 }
 
 void MemoryAllocatorDump::AsProtoInto(
-    perfetto::protos::pbzero::MemoryTrackerSnapshot::ProcessSnapshot::
+    perfetto::libchrome::protos::pbzero::MemoryTrackerSnapshot::ProcessSnapshot::
         MemoryNode* memory_node) const {
   memory_node->set_id(guid_.ToUint64());
   memory_node->set_absolute_name(absolute_name_);
@@ -109,7 +109,7 @@ void MemoryAllocatorDump::AsProtoInto(
       continue;
     }
 
-    perfetto::protos::pbzero::MemoryTrackerSnapshot_ProcessSnapshot::
+    perfetto::libchrome::protos::pbzero::MemoryTrackerSnapshot_ProcessSnapshot::
         MemoryNode::MemoryNodeEntry* proto_memory_node_entry =
             memory_node->add_entries();
 
@@ -124,15 +124,15 @@ void MemoryAllocatorDump::AsProtoInto(
     }
     if (entry.units == kUnitsBytes) {
       proto_memory_node_entry->set_units(
-          perfetto::protos::pbzero::MemoryTrackerSnapshot::ProcessSnapshot::
+          perfetto::libchrome::protos::pbzero::MemoryTrackerSnapshot::ProcessSnapshot::
               MemoryNode::MemoryNodeEntry::BYTES);
     } else if (entry.units == kUnitsObjects) {
       proto_memory_node_entry->set_units(
-          perfetto::protos::pbzero::MemoryTrackerSnapshot::ProcessSnapshot::
+          perfetto::libchrome::protos::pbzero::MemoryTrackerSnapshot::ProcessSnapshot::
               MemoryNode::MemoryNodeEntry::COUNT);
     } else {
       proto_memory_node_entry->set_units(
-          perfetto::protos::pbzero::MemoryTrackerSnapshot::ProcessSnapshot::
+          perfetto::libchrome::protos::pbzero::MemoryTrackerSnapshot::ProcessSnapshot::
               MemoryNode::MemoryNodeEntry::UNSPECIFIED);
     }
   }
diff --git a/base/trace_event/memory_allocator_dump.h b/base/trace_event/memory_allocator_dump.h
index 97799e978e..bc58c257e9 100644
--- a/base/trace_event/memory_allocator_dump.h
+++ b/base/trace_event/memory_allocator_dump.h
@@ -109,7 +109,7 @@ class BASE_EXPORT MemoryAllocatorDump {
   void AsValueInto(TracedValue* value) const;
 
   void AsProtoInto(
-      perfetto::protos::pbzero::
+      perfetto::libchrome::protos::pbzero::
           MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode* memory_node) const;
 
   // Get the size for this dump.
diff --git a/base/trace_event/memory_pressure_level_proto.cc b/base/trace_event/memory_pressure_level_proto.cc
index 3b4a594a88..7b8705d745 100644
--- a/base/trace_event/memory_pressure_level_proto.cc
+++ b/base/trace_event/memory_pressure_level_proto.cc
@@ -14,9 +14,9 @@
 namespace base {
 namespace trace_event {
 
-perfetto::protos::pbzero::MemoryPressureLevel MemoryPressureLevelToTraceEnum(
+perfetto::libchrome::protos::pbzero::MemoryPressureLevel MemoryPressureLevelToTraceEnum(
     MemoryPressureListener::MemoryPressureLevel memory_pressure_level) {
-  using ProtoLevel = perfetto::protos::pbzero::MemoryPressureLevel;
+  using ProtoLevel = perfetto::libchrome::protos::pbzero::MemoryPressureLevel;
   switch (memory_pressure_level) {
     case MemoryPressureListener::MEMORY_PRESSURE_LEVEL_NONE:
       return ProtoLevel::MEMORY_PRESSURE_LEVEL_NONE;
diff --git a/base/trace_event/memory_pressure_level_proto.h b/base/trace_event/memory_pressure_level_proto.h
index d60d43dc57..55e9ec85f3 100644
--- a/base/trace_event/memory_pressure_level_proto.h
+++ b/base/trace_event/memory_pressure_level_proto.h
@@ -17,7 +17,7 @@
 namespace base {
 namespace trace_event {
 
-BASE_EXPORT perfetto::protos::pbzero::MemoryPressureLevel
+BASE_EXPORT perfetto::libchrome::protos::pbzero::MemoryPressureLevel
 MemoryPressureLevelToTraceEnum(
     MemoryPressureListener::MemoryPressureLevel memory_pressure_level);
 
diff --git a/base/trace_event/process_memory_dump.cc b/base/trace_event/process_memory_dump.cc
index b3a0b63057..6893ddf5a5 100644
--- a/base/trace_event/process_memory_dump.cc
+++ b/base/trace_event/process_memory_dump.cc
@@ -40,7 +40,7 @@
 #endif
 
 using ProcessSnapshot =
-    ::perfetto::protos::pbzero::MemoryTrackerSnapshot_ProcessSnapshot;
+    ::perfetto::libchrome::protos::pbzero::MemoryTrackerSnapshot_ProcessSnapshot;
 
 namespace base {
 namespace trace_event {
@@ -398,7 +398,7 @@ void ProcessMemoryDump::SerializeAllocatorDumpsInto(TracedValue* value) const {
 }
 
 void ProcessMemoryDump::SerializeAllocatorDumpsInto(
-    perfetto::protos::pbzero::MemoryTrackerSnapshot* memory_snapshot,
+    perfetto::libchrome::protos::pbzero::MemoryTrackerSnapshot* memory_snapshot,
     const base::ProcessId pid) const {
   ProcessSnapshot* process_snapshot =
       memory_snapshot->add_process_memory_dumps();
diff --git a/base/trace_event/process_memory_dump.h b/base/trace_event/process_memory_dump.h
index e438563288..79288ea186 100644
--- a/base/trace_event/process_memory_dump.h
+++ b/base/trace_event/process_memory_dump.h
@@ -241,7 +241,7 @@ class BASE_EXPORT ProcessMemoryDump {
   void SerializeAllocatorDumpsInto(TracedValue* value) const;
 
   void SerializeAllocatorDumpsInto(
-      perfetto::protos::pbzero::MemoryTrackerSnapshot* memory_snapshot,
+      perfetto::libchrome::protos::pbzero::MemoryTrackerSnapshot* memory_snapshot,
       const base::ProcessId pid) const;
 
   const MemoryDumpArgs& dump_args() const { return dump_args_; }
diff --git a/base/trace_event/task_execution_macros.h b/base/trace_event/task_execution_macros.h
index 1e78e31293..fa319bac47 100644
--- a/base/trace_event/task_execution_macros.h
+++ b/base/trace_event/task_execution_macros.h
@@ -15,7 +15,7 @@
 // Implementation detail: internal macro to trace a task execution with the
 // location where it was posted from.
 #define INTERNAL_TRACE_TASK_EXECUTION(run_function, task)                 \
-  TRACE_EVENT("toplevel", run_function, [&](perfetto::EventContext ctx) { \
+  TRACE_EVENT("toplevel", run_function, [&](perfetto::libchrome::EventContext ctx) { \
     ctx.event()->set_task_execution()->set_posted_from_iid(               \
         base::trace_event::InternedSourceLocation::Get(                   \
             &ctx,                                                         \
@@ -27,8 +27,8 @@
 // Implementation detail: internal macro to trace a log message, with the source
 // location of the log statement.
 #define INTERNAL_TRACE_LOG_MESSAGE(file, message, line)                      \
-  TRACE_EVENT_INSTANT("log", "LogMessage", [&](perfetto::EventContext ctx) { \
-    perfetto::protos::pbzero::LogMessage* log =                              \
+  TRACE_EVENT_INSTANT("log", "LogMessage", [&](perfetto::libchrome::EventContext ctx) { \
+    perfetto::libchrome::protos::pbzero::LogMessage* log =                              \
         ctx.event()->set_log_message();                                      \
     log->set_source_location_iid(                                            \
         base::trace_event::InternedSourceLocation::Get(                      \
diff --git a/base/trace_event/trace_arguments.cc b/base/trace_event/trace_arguments.cc
index 7dbb3cd978..647eac8539 100644
--- a/base/trace_event/trace_arguments.cc
+++ b/base/trace_event/trace_arguments.cc
@@ -291,7 +291,7 @@ void TraceArguments::AppendDebugString(std::string* out) {
 
 #if BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
 void ConvertableToTraceFormat::Add(
-    perfetto::protos::pbzero::DebugAnnotation* annotation) const {
+    perfetto::libchrome::protos::pbzero::DebugAnnotation* annotation) const {
   std::string json;
   AppendAsTraceFormat(&json);
   annotation->set_legacy_json_value(json);
diff --git a/base/trace_event/trace_arguments.h b/base/trace_event/trace_arguments.h
index 03c28d6871..a5c1fe2a2f 100644
--- a/base/trace_event/trace_arguments.h
+++ b/base/trace_event/trace_arguments.h
@@ -142,7 +142,7 @@ class TraceEventMemoryOverhead;
 // to them.
 class BASE_EXPORT ConvertableToTraceFormat
 #if BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
-    : public perfetto::DebugAnnotation
+    : public perfetto::libchrome::DebugAnnotation
 #endif
 {
  public:
@@ -180,7 +180,7 @@ class BASE_EXPORT ConvertableToTraceFormat
 
 #if BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
   // DebugAnnotation implementation.
-  void Add(perfetto::protos::pbzero::DebugAnnotation*) const override;
+  void Add(perfetto::libchrome::protos::pbzero::DebugAnnotation*) const override;
 #endif
 };
 
@@ -226,7 +226,7 @@ union BASE_EXPORT TraceValue {
   const void* as_pointer;
   const char* as_string;
   ConvertableToTraceFormat* as_convertable;
-  protozero::HeapBuffered<perfetto::protos::pbzero::DebugAnnotation>* as_proto;
+  protozero::HeapBuffered<perfetto::libchrome::protos::pbzero::DebugAnnotation>* as_proto;
 
   // Static method to create a new TraceValue instance from a given
   // initialization value. Note that this deduces the TRACE_VALUE_TYPE_XXX
@@ -340,7 +340,7 @@ union BASE_EXPORT TraceValue {
   struct TypeFor<T,
                  typename std::enable_if<
                      !HasHelperSupport<typename InnerType<T>::type>::value &&
-                     perfetto::internal::has_traced_value_support<
+                     perfetto::libchrome::internal::has_traced_value_support<
                          typename InnerType<T>::type>::value>::type> {
     static const unsigned char value = TRACE_VALUE_TYPE_PROTO;
   };
@@ -352,7 +352,7 @@ union BASE_EXPORT TraceValue {
   template <typename T,
             class = std::enable_if_t<
                 HasHelperSupport<typename InnerType<T>::type>::value ||
-                perfetto::internal::has_traced_value_support<
+                perfetto::libchrome::internal::has_traced_value_support<
                     typename InnerType<T>::type>::value>>
   struct TypeCheck {
     static const bool value = true;
@@ -382,13 +382,13 @@ union BASE_EXPORT TraceValue {
   template <class T>
   typename std::enable_if<
       !HasHelperSupport<typename InnerType<T>::type>::value &&
-      perfetto::internal::has_traced_value_support<
+      perfetto::libchrome::internal::has_traced_value_support<
           typename InnerType<T>::type>::value>::type
   Init(T&& value) {
     as_proto = new protozero::HeapBuffered<
-        perfetto::protos::pbzero::DebugAnnotation>();
-    perfetto::WriteIntoTracedValue(
-        perfetto::internal::CreateTracedValueFromProto(as_proto->get()),
+        perfetto::libchrome::protos::pbzero::DebugAnnotation>();
+    perfetto::libchrome::WriteIntoTracedValue(
+        perfetto::libchrome::internal::CreateTracedValueFromProto(as_proto->get()),
         std::forward<T>(value));
   }
 };
diff --git a/base/trace_event/trace_event_impl.cc b/base/trace_event/trace_event_impl.cc
index 71fc039b0c..41a9dd4681 100644
--- a/base/trace_event/trace_event_impl.cc
+++ b/base/trace_event/trace_event_impl.cc
@@ -30,14 +30,14 @@ namespace perfetto {
 namespace legacy {
 
 template <>
-perfetto::ThreadTrack ConvertThreadId(const ::base::PlatformThreadId& thread) {
-  return perfetto::ThreadTrack::ForThread(static_cast<int32_t>(thread));
+perfetto::libchrome::ThreadTrack ConvertThreadId(const ::base::PlatformThreadId& thread) {
+  return perfetto::libchrome::ThreadTrack::ForThread(static_cast<int32_t>(thread));
 }
 
 #if defined(OS_WIN)
 template <>
-perfetto::ThreadTrack ConvertThreadId(const int& thread) {
-  return perfetto::ThreadTrack::ForThread(static_cast<int32_t>(thread));
+perfetto::libchrome::ThreadTrack ConvertThreadId(const int& thread) {
+  return perfetto::libchrome::ThreadTrack::ForThread(static_cast<int32_t>(thread));
 }
 #endif  // defined(OS_WIN)
 
diff --git a/base/trace_event/trace_event_stub.cc b/base/trace_event/trace_event_stub.cc
index 2e2e102beb..e2a3efe664 100644
--- a/base/trace_event/trace_event_stub.cc
+++ b/base/trace_event/trace_event_stub.cc
@@ -33,6 +33,7 @@ constexpr const char* const MemoryDumpManager::kTraceCategory;
 }  // namespace base
 
 namespace perfetto {
+namespace libchrome {
 
 TracedDictionary TracedValue::WriteDictionary() && {
   return TracedDictionary();
@@ -66,4 +67,5 @@ TracedDictionary TracedArray::AppendDictionary() {
   return TracedDictionary();
 }
 
+}  // namespace libchrome
 }  // namespace perfetto
diff --git a/base/trace_event/trace_event_stub.h b/base/trace_event/trace_event_stub.h
index c9202d7907..332be8ce26 100644
--- a/base/trace_event/trace_event_stub.h
+++ b/base/trace_event/trace_event_stub.h
@@ -268,8 +268,9 @@ class BASE_EXPORT TraceLog : public MemoryDumpProvider {
 }  // namespace base
 
 // Stub implementation for
-// perfetto::StaticString/ThreadTrack/TracedValue/TracedDictionary/TracedArray.
+// perfetto::libchrome::StaticString/ThreadTrack/TracedValue/TracedDictionary/TracedArray.
 namespace perfetto {
+namespace libchrome {
 
 namespace internal {
 template <typename T>
@@ -341,6 +342,7 @@ void WriteIntoTracedValueWithFallback(TracedValue context,
                                       T&& value,
                                       const std::string&) {}
 
+}  // namespace libchrome
 }  // namespace perfetto
 
 #endif  // BASE_TRACE_EVENT_TRACE_EVENT_STUB_H_
diff --git a/base/trace_event/trace_event_unittest.cc b/base/trace_event/trace_event_unittest.cc
index b932f48eaf..3cdc20f1f8 100644
--- a/base/trace_event/trace_event_unittest.cc
+++ b/base/trace_event/trace_event_unittest.cc
@@ -72,7 +72,7 @@ constexpr const char kAllCategory[] = "test_all";
 bool IsCategoryEnabled(const char* name) {
 #if BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
   bool result;
-  TRACE_EVENT_CATEGORY_GROUP_ENABLED(perfetto::DynamicCategory(name), &result);
+  TRACE_EVENT_CATEGORY_GROUP_ENABLED(perfetto::libchrome::DynamicCategory(name), &result);
   return result;
 #else
   return *TraceLog::GetInstance()->GetCategoryGroupEnabled(name);
@@ -2786,7 +2786,7 @@ TEST_F(TraceEventTestFixture, ContextLambda) {
                                       TraceLog::RECORDING_MODE);
 
   {
-    TRACE_EVENT1("cat", "Name", "arg", [&](perfetto::TracedValue ctx) {
+    TRACE_EVENT1("cat", "Name", "arg", [&](perfetto::libchrome::TracedValue ctx) {
       std::move(ctx).WriteString("foobar");
     });
   }
diff --git a/base/trace_event/trace_log.cc b/base/trace_event/trace_log.cc
index 9a7d481555..93d2da19d5 100644
--- a/base/trace_event/trace_log.cc
+++ b/base/trace_event/trace_log.cc
@@ -202,7 +202,7 @@ class PerfettoProtoAppender
     : public base::trace_event::ConvertableToTraceFormat::ProtoAppender {
  public:
   explicit PerfettoProtoAppender(
-      perfetto::protos::pbzero::DebugAnnotation* proto)
+      perfetto::libchrome::protos::pbzero::DebugAnnotation* proto)
       : annotation_proto_(proto) {}
   ~PerfettoProtoAppender() override = default;
 
@@ -220,12 +220,12 @@ class PerfettoProtoAppender
 
  private:
   std::vector<protozero::ContiguousMemoryRange> ranges_;
-  perfetto::protos::pbzero::DebugAnnotation* annotation_proto_;
+  perfetto::libchrome::protos::pbzero::DebugAnnotation* annotation_proto_;
 };
 
 void AddConvertableToTraceFormat(
     base::trace_event::ConvertableToTraceFormat* value,
-    perfetto::protos::pbzero::DebugAnnotation* annotation) {
+    perfetto::libchrome::protos::pbzero::DebugAnnotation* annotation) {
   PerfettoProtoAppender proto_appender(annotation);
   if (value->AppendToProto(&proto_appender)) {
     return;
@@ -237,7 +237,7 @@ void AddConvertableToTraceFormat(
 }
 
 void WriteDebugAnnotations(base::trace_event::TraceEvent* trace_event,
-                           perfetto::protos::pbzero::TrackEvent* track_event) {
+                           perfetto::libchrome::protos::pbzero::TrackEvent* track_event) {
   for (size_t i = 0; i < trace_event->arg_size() && trace_event->arg_name(i);
        ++i) {
     auto type = trace_event->arg_type(i);
@@ -289,18 +289,18 @@ void WriteDebugAnnotations(base::trace_event::TraceEvent* trace_event,
 void OnAddLegacyTraceEvent(TraceEvent* trace_event,
                            bool thread_will_flush,
                            base::trace_event::TraceEventHandle* handle) {
-  perfetto::DynamicCategory category(
+  perfetto::libchrome::DynamicCategory category(
       TraceLog::GetInstance()->GetCategoryGroupName(
           trace_event->category_group_enabled()));
-  auto write_args = [trace_event](perfetto::EventContext ctx) {
+  auto write_args = [trace_event](perfetto::libchrome::EventContext ctx) {
     WriteDebugAnnotations(trace_event, ctx.event());
     uint32_t id_flags = trace_event->flags() & (TRACE_EVENT_FLAG_HAS_ID |
                                                 TRACE_EVENT_FLAG_HAS_LOCAL_ID |
                                                 TRACE_EVENT_FLAG_HAS_GLOBAL_ID);
     if (!id_flags &&
-        perfetto::internal::TrackEventLegacy::PhaseToType(
+        perfetto::libchrome::internal::TrackEventLegacy::PhaseToType(
             trace_event->phase()) !=
-            perfetto::protos::pbzero::TrackEvent::TYPE_UNSPECIFIED) {
+            perfetto::libchrome::protos::pbzero::TrackEvent::TYPE_UNSPECIFIED) {
       return;
     }
     auto* legacy_event = ctx.event()->set_legacy_event();
@@ -332,13 +332,13 @@ void OnAddLegacyTraceEvent(TraceEvent* trace_event,
     switch (scope) {
       case TRACE_EVENT_SCOPE_GLOBAL:
         PERFETTO_INTERNAL_LEGACY_EVENT_ON_TRACK(
-            phase, category, trace_event->name(), ::perfetto::Track::Global(0),
+            phase, category, trace_event->name(), ::perfetto::libchrome::Track::Global(0),
             timestamp, write_args);
         return;
       case TRACE_EVENT_SCOPE_PROCESS:
         PERFETTO_INTERNAL_LEGACY_EVENT_ON_TRACK(
             phase, category, trace_event->name(),
-            ::perfetto::ProcessTrack::Current(), timestamp, write_args);
+            ::perfetto::libchrome::ProcessTrack::Current(), timestamp, write_args);
         return;
       default:
       case TRACE_EVENT_SCOPE_THREAD: /* Fallthrough. */
@@ -350,13 +350,13 @@ void OnAddLegacyTraceEvent(TraceEvent* trace_event,
           static_cast<int>(base::PlatformThread::CurrentId())) {
     PERFETTO_INTERNAL_LEGACY_EVENT_ON_TRACK(
         phase, category, trace_event->name(),
-        perfetto::ThreadTrack::ForThread(trace_event->thread_id()), timestamp,
+        perfetto::libchrome::ThreadTrack::ForThread(trace_event->thread_id()), timestamp,
         write_args);
     return;
   }
   PERFETTO_INTERNAL_LEGACY_EVENT_ON_TRACK(
       phase, category, trace_event->name(),
-      perfetto::internal::TrackEventInternal::kDefaultTrack, timestamp,
+      perfetto::libchrome::internal::TrackEventInternal::kDefaultTrack, timestamp,
       write_args);
 }
 
@@ -369,7 +369,7 @@ void OnUpdateLegacyTraceEventDuration(
     const TimeTicks& now,
     const ThreadTicks& thread_now,
     ThreadInstructionCount thread_instruction_now) {
-  perfetto::DynamicCategory category(
+  perfetto::libchrome::DynamicCategory category(
       TraceLog::GetInstance()->GetCategoryGroupName(category_group_enabled));
   auto phase = TRACE_EVENT_PHASE_END;
   base::TimeTicks timestamp =
@@ -377,13 +377,13 @@ void OnUpdateLegacyTraceEventDuration(
   if (thread_id &&
       thread_id != static_cast<int>(base::PlatformThread::CurrentId())) {
     PERFETTO_INTERNAL_LEGACY_EVENT_ON_TRACK(
-        phase, category, name, perfetto::ThreadTrack::ForThread(thread_id),
+        phase, category, name, perfetto::libchrome::ThreadTrack::ForThread(thread_id),
         timestamp);
     return;
   }
   PERFETTO_INTERNAL_LEGACY_EVENT_ON_TRACK(
       phase, category, name,
-      perfetto::internal::TrackEventInternal::kDefaultTrack, timestamp);
+      perfetto::libchrome::internal::TrackEventInternal::kDefaultTrack, timestamp);
 }
 #endif  // BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
 
@@ -401,7 +401,7 @@ static constexpr char kJsonSuffix[] = "],\"metadata\":";
 }  // namespace
 
 class JsonStringOutputWriter
-    : public perfetto::trace_processor::json::OutputWriter {
+    : public perfetto::libchrome::trace_processor::json::OutputWriter {
  public:
   JsonStringOutputWriter(scoped_refptr<SequencedTaskRunner> flush_task_runner,
                          TraceLog::OutputCallback flush_callback)
@@ -412,12 +412,12 @@ class JsonStringOutputWriter
 
   ~JsonStringOutputWriter() override { Flush(/*has_more=*/false); }
 
-  perfetto::trace_processor::util::Status AppendString(
+  perfetto::libchrome::trace_processor::util::Status AppendString(
       const std::string& string) override {
     if (!did_strip_prefix_) {
       DCHECK_EQ(string, kJsonPrefix);
       did_strip_prefix_ = true;
-      return perfetto::trace_processor::util::OkStatus();
+      return perfetto::libchrome::trace_processor::util::OkStatus();
     } else if (buffer_->data().empty() &&
                !strncmp(string.c_str(), kJsonJoiner, strlen(kJsonJoiner))) {
       // We only remove the leading joiner comma for the first chunk in a buffer
@@ -425,7 +425,7 @@ class JsonStringOutputWriter
       // provide.
       buffer_->data() += string.substr(strlen(kJsonJoiner));
     } else if (!strncmp(string.c_str(), kJsonSuffix, strlen(kJsonSuffix))) {
-      return perfetto::trace_processor::util::OkStatus();
+      return perfetto::libchrome::trace_processor::util::OkStatus();
     } else {
       buffer_->data() += string;
     }
@@ -435,7 +435,7 @@ class JsonStringOutputWriter
       buffer_ = new RefCountedString();
       buffer_->data().reserve(kBufferReserveCapacity);
     }
-    return perfetto::trace_processor::util::OkStatus();
+    return perfetto::libchrome::trace_processor::util::OkStatus();
   }
 
  private:
@@ -697,7 +697,7 @@ TraceLog::TraceLog(int generation)
   MemoryDumpManager::GetInstance()->RegisterDumpProvider(this, "TraceLog",
                                                          nullptr);
 #if BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
-  perfetto::TrackEvent::AddSessionObserver(this);
+  perfetto::libchrome::TrackEvent::AddSessionObserver(this);
   // When using the Perfetto client library, TRACE_EVENT macros will bypass
   // TraceLog entirely. However, trace event embedders which haven't been ported
   // to Perfetto yet will still be using TRACE_EVENT_API_ADD_TRACE_EVENT, so we
@@ -711,7 +711,7 @@ TraceLog::TraceLog(int generation)
 
 TraceLog::~TraceLog() {
 #if BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
-  perfetto::TrackEvent::RemoveSessionObserver(this);
+  perfetto::libchrome::TrackEvent::RemoveSessionObserver(this);
 #endif  // BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
 }
 
@@ -905,7 +905,7 @@ void TraceLog::SetEnabled(const TraceConfig& trace_config,
   DCHECK(modes_to_enable == RECORDING_MODE);
   DCHECK(!trace_config.IsArgumentFilterEnabled());
 
-  perfetto::TraceConfig perfetto_config;
+  perfetto::libchrome::TraceConfig perfetto_config;
   size_t size_limit = trace_config.GetTraceBufferSizeInKb();
   if (size_limit == 0)
     size_limit = 200 * 1024;
@@ -915,11 +915,11 @@ void TraceLog::SetEnabled(const TraceConfig& trace_config,
     case base::trace_event::RECORD_UNTIL_FULL:
     case base::trace_event::RECORD_AS_MUCH_AS_POSSIBLE:
       buffer_config->set_fill_policy(
-          perfetto::TraceConfig::BufferConfig::DISCARD);
+          perfetto::libchrome::TraceConfig::BufferConfig::DISCARD);
       break;
     case base::trace_event::RECORD_CONTINUOUSLY:
       buffer_config->set_fill_policy(
-          perfetto::TraceConfig::BufferConfig::RING_BUFFER);
+          perfetto::libchrome::TraceConfig::BufferConfig::RING_BUFFER);
       break;
     case base::trace_event::ECHO_TO_CONSOLE:
       // Handled below.
@@ -935,12 +935,12 @@ void TraceLog::SetEnabled(const TraceConfig& trace_config,
   source_config->mutable_chrome_config()->set_convert_to_legacy_json(true);
 
   if (trace_config.GetTraceRecordMode() == base::trace_event::ECHO_TO_CONSOLE) {
-    perfetto::ConsoleInterceptor::Register();
+    perfetto::libchrome::ConsoleInterceptor::Register();
     source_config->mutable_interceptor_config()->set_name("console");
   }
 
   // Translate the category filter into included and excluded categories.
-  perfetto::protos::gen::TrackEventConfig te_cfg;
+  perfetto::libchrome::protos::gen::TrackEventConfig te_cfg;
   // If no categories are explicitly enabled, enable the default ones. Otherwise
   // only matching categories are enabled.
   if (!trace_config.category_filter().included_categories().empty())
@@ -1051,42 +1051,42 @@ void TraceLog::SetEnabled(const TraceConfig& trace_config,
 void TraceLog::InitializePerfettoIfNeeded() {
   // When we're using the Perfetto client library, only tests should be
   // recording traces directly through TraceLog. Production code should instead
-  // use perfetto::Tracing::NewTrace(). Let's make sure the tracing service
+  // use perfetto::libchrome::Tracing::NewTrace(). Let's make sure the tracing service
   // didn't already initialize Perfetto in this process, because it's not safe
   // to consume trace data from arbitrary processes through TraceLog as the JSON
   // conversion here isn't sandboxed like with the real tracing service.
   //
   // Note that initializing Perfetto here requires the thread pool to be ready.
-  CHECK(!perfetto::Tracing::IsInitialized() ||
+  CHECK(!perfetto::libchrome::Tracing::IsInitialized() ||
         g_perfetto_initialized_by_tracelog)
       << "Don't use TraceLog for recording traces from non-test code. Use "
-         "perfetto::Tracing::NewTrace() instead.";
+         "perfetto::libchrome::Tracing::NewTrace() instead.";
 
-  if (perfetto::Tracing::IsInitialized())
+  if (perfetto::libchrome::Tracing::IsInitialized())
     return;
   g_perfetto_initialized_by_tracelog = true;
   auto* perfetto_platform = GetOrCreatePerfettoPlatform();
-  perfetto::TracingInitArgs init_args;
-  init_args.backends = perfetto::BackendType::kInProcessBackend;
+  perfetto::libchrome::TracingInitArgs init_args;
+  init_args.backends = perfetto::libchrome::BackendType::kInProcessBackend;
   init_args.platform = perfetto_platform;
-  perfetto::Tracing::Initialize(init_args);
-  perfetto::TrackEvent::Register();
+  perfetto::libchrome::Tracing::Initialize(init_args);
+  perfetto::libchrome::TrackEvent::Register();
 }
 
 void TraceLog::SetEnabled(const TraceConfig& trace_config,
-                          const perfetto::TraceConfig& perfetto_config) {
+                          const perfetto::libchrome::TraceConfig& perfetto_config) {
   AutoLock lock(lock_);
   SetEnabledImpl(trace_config, perfetto_config);
 }
 
 void TraceLog::SetEnabledImpl(const TraceConfig& trace_config,
-                              const perfetto::TraceConfig& perfetto_config) {
-  DCHECK(!perfetto::TrackEvent::IsEnabled());
+                              const perfetto::libchrome::TraceConfig& perfetto_config) {
+  DCHECK(!perfetto::libchrome::TrackEvent::IsEnabled());
   lock_.AssertAcquired();
   InitializePerfettoIfNeeded();
   trace_config_ = trace_config;
   perfetto_config_ = perfetto_config;
-  tracing_session_ = perfetto::Tracing::NewTrace();
+  tracing_session_ = perfetto::libchrome::Tracing::NewTrace();
 
   AutoUnlock unlock(lock_);
   tracing_session_->Setup(perfetto_config);
@@ -1171,7 +1171,7 @@ void TraceLog::SetDisabledWhileLocked(uint8_t modes_to_disable) {
   // Remove metadata events so they will not get added to a subsequent trace.
   metadata_events_.clear();
 
-  perfetto::TrackEvent::Flush();
+  perfetto::libchrome::TrackEvent::Flush();
   tracing_session_->StopBlocking();
 #else   // !BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
   if (!(enabled_modes_ & modes_to_disable))
@@ -1350,7 +1350,7 @@ void TraceLog::FlushInternal(const TraceLog::OutputCallback& cb,
   use_worker_thread_ = use_worker_thread;
 
 #if BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY) && !defined(OS_NACL)
-  perfetto::TrackEvent::Flush();
+  perfetto::libchrome::TrackEvent::Flush();
 
   if (discard_events) {
     tracing_session_.reset();
@@ -1370,9 +1370,9 @@ void TraceLog::FlushInternal(const TraceLog::OutputCallback& cb,
   }
 
   if (convert_to_json) {
-    perfetto::trace_processor::Config processor_config;
+    perfetto::libchrome::trace_processor::Config processor_config;
     trace_processor_ =
-        perfetto::trace_processor::TraceProcessorStorage::CreateInstance(
+        perfetto::libchrome::trace_processor::TraceProcessorStorage::CreateInstance(
             processor_config);
     json_output_writer_.reset(new JsonStringOutputWriter(
         use_worker_thread ? ThreadTaskRunnerHandle::Get() : nullptr, cb));
@@ -1382,7 +1382,7 @@ void TraceLog::FlushInternal(const TraceLog::OutputCallback& cb,
 
   if (use_worker_thread) {
     tracing_session_->ReadTrace(
-        [this](perfetto::TracingSession::ReadTraceCallbackArgs args) {
+        [this](perfetto::libchrome::TracingSession::ReadTraceCallbackArgs args) {
           OnTraceData(args.data, args.size, args.has_more);
         });
   } else {
@@ -1468,7 +1468,7 @@ void TraceLog::OnTraceData(const char* data, size_t size, bool has_more) {
     return;
   trace_processor_->NotifyEndOfFile();
 
-  auto status = perfetto::trace_processor::json::ExportJson(
+  auto status = perfetto::libchrome::trace_processor::json::ExportJson(
       trace_processor_.get(), json_output_writer_.get());
   DCHECK(status.ok()) << status.message();
   trace_processor_.reset();
@@ -2217,10 +2217,10 @@ void TraceLog::set_process_name(const std::string& process_name) {
     process_name_ = process_name;
   }
 #if BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
-  auto track = perfetto::ProcessTrack::Current();
+  auto track = perfetto::libchrome::ProcessTrack::Current();
   auto desc = track.Serialize();
   desc.mutable_process()->set_process_name(process_name);
-  perfetto::TrackEvent::SetTrackDescriptor(track, std::move(desc));
+  perfetto::libchrome::TrackEvent::SetTrackDescriptor(track, std::move(desc));
 #endif
 }
 
@@ -2315,9 +2315,9 @@ tracing::PerfettoPlatform* TraceLog::GetOrCreatePerfettoPlatform() {
   return perfetto_platform_.get();
 }
 
-void TraceLog::OnSetup(const perfetto::DataSourceBase::SetupArgs&) {}
+void TraceLog::OnSetup(const perfetto::libchrome::DataSourceBase::SetupArgs&) {}
 
-void TraceLog::OnStart(const perfetto::DataSourceBase::StartArgs&) {
+void TraceLog::OnStart(const perfetto::libchrome::DataSourceBase::StartArgs&) {
   AutoLock lock(observers_lock_);
   for (EnabledStateObserver* observer : enabled_state_observers_)
     observer->OnTraceLogEnabled();
@@ -2328,7 +2328,7 @@ void TraceLog::OnStart(const perfetto::DataSourceBase::StartArgs&) {
   }
 }
 
-void TraceLog::OnStop(const perfetto::DataSourceBase::StopArgs&) {
+void TraceLog::OnStop(const perfetto::libchrome::DataSourceBase::StopArgs&) {
   AutoLock lock(observers_lock_);
   for (auto* it : enabled_state_observers_)
     it->OnTraceLogDisabled();
diff --git a/base/trace_event/trace_log.h b/base/trace_event/trace_log.h
index bb2509f5fe..ff58984319 100644
--- a/base/trace_event/trace_log.h
+++ b/base/trace_event/trace_log.h
@@ -61,7 +61,7 @@ struct BASE_EXPORT TraceLogStatus {
 
 class BASE_EXPORT TraceLog :
 #if BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
-    public perfetto::TrackEventSessionObserver,
+    public perfetto::libchrome::TrackEventSessionObserver,
 #endif  // BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
     public MemoryDumpProvider {
  public:
@@ -102,7 +102,7 @@ class BASE_EXPORT TraceLog :
   // example, enabling additional data sources and enabling protobuf output
   // instead of the legacy JSON trace format.
   void SetEnabled(const TraceConfig& trace_config,
-                  const perfetto::TraceConfig& perfetto_config);
+                  const perfetto::libchrome::TraceConfig& perfetto_config);
 #endif
 
   // TODO(ssid): Remove the default SetEnabled and IsEnabled. They should take
@@ -117,7 +117,7 @@ class BASE_EXPORT TraceLog :
   // Note: Returns false even if FILTERING_MODE is enabled.
   bool IsEnabled() {
 #if BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
-    return perfetto::TrackEvent::IsEnabled();
+    return perfetto::libchrome::TrackEvent::IsEnabled();
 #else   // !BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
     AutoLock lock(lock_);
     return enabled_modes_ & RECORDING_MODE;
@@ -432,12 +432,12 @@ class BASE_EXPORT TraceLog :
 #if BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
   void InitializePerfettoIfNeeded();
   void SetEnabledImpl(const TraceConfig& trace_config,
-                      const perfetto::TraceConfig& perfetto_config);
+                      const perfetto::libchrome::TraceConfig& perfetto_config);
 
-  // perfetto::TrackEventSessionObserver implementation.
-  void OnSetup(const perfetto::DataSourceBase::SetupArgs&) override;
-  void OnStart(const perfetto::DataSourceBase::StartArgs&) override;
-  void OnStop(const perfetto::DataSourceBase::StopArgs&) override;
+  // perfetto::libchrome::TrackEventSessionObserver implementation.
+  void OnSetup(const perfetto::libchrome::DataSourceBase::SetupArgs&) override;
+  void OnStart(const perfetto::libchrome::DataSourceBase::StartArgs&) override;
+  void OnStop(const perfetto::libchrome::DataSourceBase::StopArgs&) override;
 #endif  // BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
 
  private:
@@ -630,10 +630,10 @@ class BASE_EXPORT TraceLog :
 
 #if BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
   std::unique_ptr<::base::tracing::PerfettoPlatform> perfetto_platform_;
-  std::unique_ptr<perfetto::TracingSession> tracing_session_;
-  perfetto::TraceConfig perfetto_config_;
+  std::unique_ptr<perfetto::libchrome::TracingSession> tracing_session_;
+  perfetto::libchrome::TraceConfig perfetto_config_;
 #if !defined(OS_NACL)
-  std::unique_ptr<perfetto::trace_processor::TraceProcessorStorage>
+  std::unique_ptr<perfetto::libchrome::trace_processor::TraceProcessorStorage>
       trace_processor_;
   std::unique_ptr<JsonStringOutputWriter> json_output_writer_;
   OutputCallback proto_output_callback_;
diff --git a/base/trace_event/traced_value_support.h b/base/trace_event/traced_value_support.h
index 5f9147679a..eac6fa057e 100644
--- a/base/trace_event/traced_value_support.h
+++ b/base/trace_event/traced_value_support.h
@@ -16,7 +16,7 @@
 
 // This file contains specialisations for trace serialisation for key
 // widely-used //base classes. As these specialisations require full definition
-// of perfetto::TracedValue and almost every source unit in Chromium requires
+// of perfetto::libchrome::TracedValue and almost every source unit in Chromium requires
 // one of these //base concepts, include specialiazations here and expose them
 // to the users including trace_event.h, rather than adding a dependency from
 // scoped_refptr.h et al on traced_value.h.
@@ -26,28 +26,28 @@ namespace perfetto {
 // If T is serialisable into a trace, scoped_refptr<T> is serialisable as well.
 template <class T>
 struct TraceFormatTraits<scoped_refptr<T>,
-                         perfetto::check_traced_value_support_t<T>> {
-  static void WriteIntoTrace(perfetto::TracedValue context,
+                         perfetto::libchrome::check_traced_value_support_t<T>> {
+  static void WriteIntoTrace(perfetto::libchrome::TracedValue context,
                              const scoped_refptr<T>& value) {
     if (!value) {
       std::move(context).WritePointer(nullptr);
       return;
     }
-    perfetto::WriteIntoTracedValue(std::move(context), *value);
+    perfetto::libchrome::WriteIntoTracedValue(std::move(context), *value);
   }
 };
 
 // If T is serialisable into a trace, base::WeakPtr<T> is serialisable as well.
 template <class T>
 struct TraceFormatTraits<::base::WeakPtr<T>,
-                         perfetto::check_traced_value_support_t<T>> {
-  static void WriteIntoTrace(perfetto::TracedValue context,
+                         perfetto::libchrome::check_traced_value_support_t<T>> {
+  static void WriteIntoTrace(perfetto::libchrome::TracedValue context,
                              const ::base::WeakPtr<T>& value) {
     if (!value) {
       std::move(context).WritePointer(nullptr);
       return;
     }
-    perfetto::WriteIntoTracedValue(std::move(context), *value);
+    perfetto::libchrome::WriteIntoTracedValue(std::move(context), *value);
   }
 };
 
@@ -58,23 +58,23 @@ struct TraceFormatTraits<::base::WeakPtr<T>,
 // absl::optional<T>& gives you const T&.
 template <class T>
 struct TraceFormatTraits<::absl::optional<T>,
-                         perfetto::check_traced_value_support_t<T>> {
-  static void WriteIntoTrace(perfetto::TracedValue context,
+                         perfetto::libchrome::check_traced_value_support_t<T>> {
+  static void WriteIntoTrace(perfetto::libchrome::TracedValue context,
                              const ::absl::optional<T>& value) {
     if (!value) {
       std::move(context).WritePointer(nullptr);
       return;
     }
-    perfetto::WriteIntoTracedValue(std::move(context), *value);
+    perfetto::libchrome::WriteIntoTracedValue(std::move(context), *value);
   }
 
-  static void WriteIntoTrace(perfetto::TracedValue context,
+  static void WriteIntoTrace(perfetto::libchrome::TracedValue context,
                              ::absl::optional<T>& value) {
     if (!value) {
       std::move(context).WritePointer(nullptr);
       return;
     }
-    perfetto::WriteIntoTracedValue(std::move(context), *value);
+    perfetto::libchrome::WriteIntoTracedValue(std::move(context), *value);
   }
 };
 
@@ -83,7 +83,7 @@ struct TraceFormatTraits<::absl::optional<T>,
 // UI.
 template <>
 struct TraceFormatTraits<::base::TimeDelta> {
-  static void WriteIntoTrace(perfetto::TracedValue context,
+  static void WriteIntoTrace(perfetto::libchrome::TracedValue context,
                              const ::base::TimeDelta& value) {
     std::move(context).WriteUInt64(value.InMicroseconds());
   }
@@ -91,17 +91,17 @@ struct TraceFormatTraits<::base::TimeDelta> {
 
 template <>
 struct TraceFormatTraits<::base::TimeTicks> {
-  static void WriteIntoTrace(perfetto::TracedValue context,
+  static void WriteIntoTrace(perfetto::libchrome::TracedValue context,
                              const ::base::TimeTicks& value) {
-    perfetto::WriteIntoTracedValue(std::move(context), value.since_origin());
+    perfetto::libchrome::WriteIntoTracedValue(std::move(context), value.since_origin());
   }
 };
 
 template <>
 struct TraceFormatTraits<::base::Time> {
-  static void WriteIntoTrace(perfetto::TracedValue context,
+  static void WriteIntoTrace(perfetto::libchrome::TracedValue context,
                              const ::base::Time& value) {
-    perfetto::WriteIntoTracedValue(std::move(context), value.since_origin());
+    perfetto::libchrome::WriteIntoTracedValue(std::move(context), value.since_origin());
   }
 };
 
@@ -110,7 +110,7 @@ struct TraceFormatTraits<::base::Time> {
 // human-comprehensible alias for all unguessable tokens instead.
 template <>
 struct TraceFormatTraits<::base::UnguessableToken> {
-  static void WriteIntoTrace(perfetto::TracedValue context,
+  static void WriteIntoTrace(perfetto::libchrome::TracedValue context,
                              const ::base::UnguessableToken& value) {
     return std::move(context).WriteString(value.ToString());
   }
@@ -119,7 +119,7 @@ struct TraceFormatTraits<::base::UnguessableToken> {
 // UTF-16 string support.
 template <>
 struct TraceFormatTraits<std::u16string> {
-  static void WriteIntoTrace(perfetto::TracedValue context,
+  static void WriteIntoTrace(perfetto::libchrome::TracedValue context,
                              const std::u16string& value) {
     return std::move(context).WriteString(::base::UTF16ToUTF8(value));
   }
@@ -127,7 +127,7 @@ struct TraceFormatTraits<std::u16string> {
 
 template <size_t N>
 struct TraceFormatTraits<char16_t[N]> {
-  static void WriteIntoTrace(perfetto::TracedValue context,
+  static void WriteIntoTrace(perfetto::libchrome::TracedValue context,
                              const char16_t value[N]) {
     return std::move(context).WriteString(
         ::base::UTF16ToUTF8(::base::StringPiece16(value)));
@@ -136,7 +136,7 @@ struct TraceFormatTraits<char16_t[N]> {
 
 template <>
 struct TraceFormatTraits<const char16_t*> {
-  static void WriteIntoTrace(perfetto::TracedValue context,
+  static void WriteIntoTrace(perfetto::libchrome::TracedValue context,
                              const char16_t* value) {
     return std::move(context).WriteString(
         ::base::UTF16ToUTF8(::base::StringPiece16(value)));
@@ -146,7 +146,7 @@ struct TraceFormatTraits<const char16_t*> {
 // Wide string support.
 template <>
 struct TraceFormatTraits<std::wstring> {
-  static void WriteIntoTrace(perfetto::TracedValue context,
+  static void WriteIntoTrace(perfetto::libchrome::TracedValue context,
                              const std::wstring& value) {
     return std::move(context).WriteString(::base::WideToUTF8(value));
   }
@@ -154,7 +154,7 @@ struct TraceFormatTraits<std::wstring> {
 
 template <size_t N>
 struct TraceFormatTraits<wchar_t[N]> {
-  static void WriteIntoTrace(perfetto::TracedValue context,
+  static void WriteIntoTrace(perfetto::libchrome::TracedValue context,
                              const wchar_t value[N]) {
     return std::move(context).WriteString(
         ::base::WideToUTF8(::base::WStringPiece(value)));
@@ -163,7 +163,7 @@ struct TraceFormatTraits<wchar_t[N]> {
 
 template <>
 struct TraceFormatTraits<const wchar_t*> {
-  static void WriteIntoTrace(perfetto::TracedValue context,
+  static void WriteIntoTrace(perfetto::libchrome::TracedValue context,
                              const wchar_t* value) {
     return std::move(context).WriteString(
         ::base::WideToUTF8(::base::WStringPiece(value)));
@@ -173,7 +173,7 @@ struct TraceFormatTraits<const wchar_t*> {
 // base::StringPiece support.
 template <>
 struct TraceFormatTraits<::base::StringPiece> {
-  static void WriteIntoTrace(perfetto::TracedValue context,
+  static void WriteIntoTrace(perfetto::libchrome::TracedValue context,
                              ::base::StringPiece value) {
     return std::move(context).WriteString(value.data(), value.length());
   }
@@ -181,7 +181,7 @@ struct TraceFormatTraits<::base::StringPiece> {
 
 template <>
 struct TraceFormatTraits<::base::StringPiece16> {
-  static void WriteIntoTrace(perfetto::TracedValue context,
+  static void WriteIntoTrace(perfetto::libchrome::TracedValue context,
                              ::base::StringPiece16 value) {
     return std::move(context).WriteString(::base::UTF16ToUTF8(value));
   }
@@ -189,7 +189,7 @@ struct TraceFormatTraits<::base::StringPiece16> {
 
 template <>
 struct TraceFormatTraits<::base::WStringPiece> {
-  static void WriteIntoTrace(perfetto::TracedValue context,
+  static void WriteIntoTrace(perfetto::libchrome::TracedValue context,
                              ::base::WStringPiece value) {
     return std::move(context).WriteString(::base::WideToUTF8(value));
   }
diff --git a/base/trace_event/traced_value_support_unittest.cc b/base/trace_event/traced_value_support_unittest.cc
index 794149c737..f8167afbe4 100644
--- a/base/trace_event/traced_value_support_unittest.cc
+++ b/base/trace_event/traced_value_support_unittest.cc
@@ -18,7 +18,7 @@ struct RefCountedData : RefCounted<RefCountedData> {
  public:
   explicit RefCountedData(std::string data) : data_(data) {}
 
-  void WriteIntoTrace(perfetto::TracedValue context) const {
+  void WriteIntoTrace(perfetto::libchrome::TracedValue context) const {
     std::move(context).WriteString(data_);
   }
 
@@ -33,7 +33,7 @@ struct WeakData {
  public:
   explicit WeakData(std::string data) : data_(data) {}
 
-  void WriteIntoTrace(perfetto::TracedValue context) const {
+  void WriteIntoTrace(perfetto::libchrome::TracedValue context) const {
     std::move(context).WriteString(data_);
   }
 
@@ -51,62 +51,62 @@ struct WeakData {
 
 TEST(TracedValueSupportTest, ScopedRefPtr) {
   EXPECT_EQ(
-      perfetto::TracedValueToString(scoped_refptr<RefCountedData>(nullptr)),
+      perfetto::libchrome::TracedValueToString(scoped_refptr<RefCountedData>(nullptr)),
       "0x0");
   scoped_refptr<RefCountedData> data =
       base::MakeRefCounted<RefCountedData>("refcounted");
-  EXPECT_EQ(perfetto::TracedValueToString(data), "refcounted");
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(data), "refcounted");
 }
 
 TEST(TracedValueSupportTest, Optional) {
-  EXPECT_EQ(perfetto::TracedValueToString(absl::optional<int>()), "0x0");
-  EXPECT_EQ(perfetto::TracedValueToString(absl::optional<const int>(42)), "42");
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(absl::optional<int>()), "0x0");
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(absl::optional<const int>(42)), "42");
 }
 
 TEST(TracedValueSupportTest, WeakPtr) {
   std::unique_ptr<WeakData> data = std::make_unique<WeakData>("weak");
   base::WeakPtr<WeakData> weak_ptr = data->GetWeakPtr();
-  EXPECT_EQ(perfetto::TracedValueToString(weak_ptr), "weak");
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(weak_ptr), "weak");
   data.reset();
-  EXPECT_EQ(perfetto::TracedValueToString(weak_ptr), "0x0");
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(weak_ptr), "0x0");
 }
 
 TEST(TracedValueSupportTest, Time) {
-  EXPECT_EQ(perfetto::TracedValueToString(base::Microseconds(42)), "42");
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(base::Microseconds(42)), "42");
   EXPECT_EQ(
-      perfetto::TracedValueToString(base::Time() + base::Microseconds(42)),
+      perfetto::libchrome::TracedValueToString(base::Time() + base::Microseconds(42)),
       "42");
   EXPECT_EQ(
-      perfetto::TracedValueToString(base::TimeTicks() + base::Microseconds(42)),
+      perfetto::libchrome::TracedValueToString(base::TimeTicks() + base::Microseconds(42)),
       "42");
 }
 
 TEST(TracedValueSupportTest, UnguessableToken) {
   auto token = UnguessableToken::Create();
-  EXPECT_EQ(perfetto::TracedValueToString(token), token.ToString());
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(token), token.ToString());
 }
 
 TEST(TracedValueSupportTest, UTF16String) {
-  EXPECT_EQ(perfetto::TracedValueToString(u"utf-16"), "utf-16");
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(u"utf-16"), "utf-16");
   EXPECT_EQ(
-      perfetto::TracedValueToString(static_cast<const char16_t*>(u"utf-16")),
+      perfetto::libchrome::TracedValueToString(static_cast<const char16_t*>(u"utf-16")),
       "utf-16");
-  EXPECT_EQ(perfetto::TracedValueToString(std::u16string(u"utf-16")), "utf-16");
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(std::u16string(u"utf-16")), "utf-16");
 }
 
 TEST(TracedValueSupportTest, WideString) {
-  EXPECT_EQ(perfetto::TracedValueToString(L"wide"), "wide");
-  EXPECT_EQ(perfetto::TracedValueToString(static_cast<const wchar_t*>(L"wide")),
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(L"wide"), "wide");
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(static_cast<const wchar_t*>(L"wide")),
             "wide");
-  EXPECT_EQ(perfetto::TracedValueToString(std::wstring(L"wide")), "wide");
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(std::wstring(L"wide")), "wide");
 }
 
 TEST(TracedValueSupportTest, StringPiece) {
-  EXPECT_EQ(perfetto::TracedValueToString(base::StringPiece("string")),
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(base::StringPiece("string")),
             "string");
-  EXPECT_EQ(perfetto::TracedValueToString(base::StringPiece16(u"utf-16")),
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(base::StringPiece16(u"utf-16")),
             "utf-16");
-  EXPECT_EQ(perfetto::TracedValueToString(base::WStringPiece(L"wide")), "wide");
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(base::WStringPiece(L"wide")), "wide");
 }
 
 }  // namespace trace_event
diff --git a/base/trace_event/typed_macros.h b/base/trace_event/typed_macros.h
index 2c99ccc93c..0f24758d87 100644
--- a/base/trace_event/typed_macros.h
+++ b/base/trace_event/typed_macros.h
@@ -38,35 +38,35 @@
 // |category| is enabled for the tracing session.
 //
 // The slice is thread-scoped (i.e., written to the default track of the current
-// thread) unless overridden with a custom track object (see perfetto::Track).
+// thread) unless overridden with a custom track object (see perfetto::libchrome::Track).
 //
 // |name| must be a string with static lifetime (i.e., the same address must not
 // be used for a different event name in the future). If you want to use a
 // dynamically allocated name, do this:
 //
-//   TRACE_EVENT("category", nullptr, [&](perfetto::EventContext ctx) {
+//   TRACE_EVENT("category", nullptr, [&](perfetto::libchrome::EventContext ctx) {
 //     ctx.event()->set_name(dynamic_name);
 //   });
 //
-// The varargs can include a perfetto::Track (e.g. async events), a
+// The varargs can include a perfetto::libchrome::Track (e.g. async events), a
 // base::TimeTicks timestamp, and a trace lambda. If passed, the lambda is
 // executed synchronously.
 //
 // Examples:
 //
 //   // Sync event with typed field.
-//   TRACE_EVENT("cat", "Name", [](perfetto::EventContext ctx) {
-//       auto* event = ctx.event<perfetto::protos::pbzero::ChromeTrackEvent>();
+//   TRACE_EVENT("cat", "Name", [](perfetto::libchrome::EventContext ctx) {
+//       auto* event = ctx.event<perfetto::libchrome::protos::pbzero::ChromeTrackEvent>();
 //       // Fill in some field in event.
 //       event->set_my_chrome_field();
 //   });
 //
 //   // Async event.
-//   TRACE_EVENT_BEGIN("cat", "Name", perfetto::Track(1234));
+//   TRACE_EVENT_BEGIN("cat", "Name", perfetto::libchrome::Track(1234));
 //
 //   // Async event with explicit timestamp.
 //   base::TimeTicks time_ticks;
-//   TRACE_EVENT_BEGIN("cat", "Name", perfetto::Track(1234), time_ticks);
+//   TRACE_EVENT_BEGIN("cat", "Name", perfetto::libchrome::Track(1234), time_ticks);
 
 // Begin a slice under |category| with the title |name|.
 // Defaults to the current thread's track.
diff --git a/base/trace_event/typed_macros_embedder_support.h b/base/trace_event/typed_macros_embedder_support.h
index 0053ec86d1..d72beb37a5 100644
--- a/base/trace_event/typed_macros_embedder_support.h
+++ b/base/trace_event/typed_macros_embedder_support.h
@@ -19,8 +19,8 @@ namespace trace_event {
 // the event lambda has emitted any typed event arguments).
 class BASE_EXPORT TrackEventHandle {
  public:
-  using TrackEvent = perfetto::protos::pbzero::TrackEvent;
-  using IncrementalState = perfetto::internal::TrackEventIncrementalState;
+  using TrackEvent = perfetto::libchrome::protos::pbzero::TrackEvent;
+  using IncrementalState = perfetto::libchrome::internal::TrackEventIncrementalState;
 
   class BASE_EXPORT CompletionListener {
    public:
@@ -57,7 +57,7 @@ class BASE_EXPORT TrackEventHandle {
 // base has emitted all data into the packet).
 class BASE_EXPORT TracePacketHandle {
  public:
-  using TracePacket = perfetto::protos::pbzero::TracePacket;
+  using TracePacket = perfetto::libchrome::protos::pbzero::TracePacket;
   using PerfettoPacketHandle = protozero::MessageHandle<TracePacket>;
 
   class BASE_EXPORT CompletionListener {
diff --git a/base/trace_event/typed_macros_internal.cc b/base/trace_event/typed_macros_internal.cc
index 5baa21ff2c..b3eb95b24b 100644
--- a/base/trace_event/typed_macros_internal.cc
+++ b/base/trace_event/typed_macros_internal.cc
@@ -53,7 +53,7 @@ GetPhaseAndIdForTraceLog(bool explicit_track, uint64_t track_uuid, char phase) {
 }  // namespace
 
 namespace trace_event_internal {
-const perfetto::Track kDefaultTrack{};
+const perfetto::libchrome::Track kDefaultTrack{};
 }  // namespace trace_event_internal
 
 namespace base {
@@ -123,7 +123,7 @@ namespace trace_event_internal {
 base::trace_event::TrackEventHandle CreateTrackEvent(
     char phase,
     const unsigned char* category_group_enabled,
-    perfetto::StaticString name,
+    perfetto::libchrome::StaticString name,
     base::TimeTicks ts,
     uint64_t track_uuid,
     bool explicit_track) {
diff --git a/base/trace_event/typed_macros_internal.h b/base/trace_event/typed_macros_internal.h
index 6a4837db0a..9a8cd92f9a 100644
--- a/base/trace_event/typed_macros_internal.h
+++ b/base/trace_event/typed_macros_internal.h
@@ -51,7 +51,7 @@
         /* field. As described in macros.h we shouldn't need it in our */     \
         /* end state.                                                  */     \
         TRACING_INTERNAL_ADD_TRACE_EVENT(TRACE_EVENT_PHASE_END, category, "", \
-                                         [](perfetto::EventContext) {});      \
+                                         [](perfetto::libchrome::EventContext) {});      \
       }                                                                       \
     } event;                                                                  \
   } TRACING_INTERNAL_UID(scoped_event){[&]() {                                \
@@ -82,7 +82,7 @@
 
 namespace trace_event_internal {
 
-extern BASE_EXPORT const perfetto::Track kDefaultTrack;
+extern BASE_EXPORT const perfetto::libchrome::Track kDefaultTrack;
 
 // The perfetto client library does not use event names for
 // TRACE_EVENT_PHASE_END. However, TraceLog expects all TraceEvents to have
@@ -93,7 +93,7 @@ constexpr char kTraceEventEndName[] = "";
 base::trace_event::TrackEventHandle BASE_EXPORT
 CreateTrackEvent(char phase,
                  const unsigned char* category_group_enabled,
-                 perfetto::StaticString name,
+                 perfetto::libchrome::StaticString name,
                  base::TimeTicks timestamp,
                  uint64_t track_uuid,
                  bool explicit_track);
@@ -111,15 +111,15 @@ void WriteTrackDescriptor(const TrackType& track) {
   base::trace_event::TracePacketHandle packet = CreateTracePacket();
   if (!packet)
     return;
-  perfetto::internal::TrackRegistry::Get()->SerializeTrack(
+  perfetto::libchrome::internal::TrackRegistry::Get()->SerializeTrack(
       track, packet.TakePerfettoHandle());
 }
 
 template <typename... Args>
 inline void AddTypedTraceEventImpl(char phase,
                                    const unsigned char* category_group_enabled,
-                                   perfetto::StaticString name,
-                                   const perfetto::Track& track,
+                                   perfetto::libchrome::StaticString name,
+                                   const perfetto::libchrome::Track& track,
                                    base::TimeTicks timestamp,
                                    Args&&... args) {
   bool emit_track_descriptor = false;
@@ -137,8 +137,8 @@ inline void AddTypedTraceEventImpl(char phase,
           track.uuid, track_event.incremental_state());
     }
 
-    perfetto::internal::WriteTrackEventArgs(
-        perfetto::EventContext(track_event.get(),
+    perfetto::libchrome::internal::WriteTrackEventArgs(
+        perfetto::libchrome::EventContext(track_event.get(),
                                track_event.incremental_state()),
         std::forward<Args>(args)...);
   }
@@ -150,10 +150,10 @@ inline void AddTypedTraceEventImpl(char phase,
 template <typename TrackType,
           typename... Args,
           typename TrackTypeCheck = typename std::enable_if<
-              std::is_convertible<TrackType, perfetto::Track>::value>::type>
+              std::is_convertible<TrackType, perfetto::libchrome::Track>::value>::type>
 inline void AddTypedTraceEvent(char phase,
                                const unsigned char* category_group_enabled,
-                               perfetto::StaticString name,
+                               perfetto::libchrome::StaticString name,
                                TrackType&& track,
                                base::TimeTicks timestamp,
                                Args&&... args) {
@@ -165,10 +165,10 @@ inline void AddTypedTraceEvent(char phase,
 template <typename TrackType,
           typename... Args,
           typename TrackTypeCheck = typename std::enable_if<
-              std::is_convertible<TrackType, perfetto::Track>::value>::type>
+              std::is_convertible<TrackType, perfetto::libchrome::Track>::value>::type>
 inline void AddTypedTraceEvent(char phase,
                                const unsigned char* category_group_enabled,
-                               perfetto::StaticString name,
+                               perfetto::libchrome::StaticString name,
                                TrackType&& track,
                                Args&&... args) {
   AddTypedTraceEventImpl(phase, category_group_enabled, name,
@@ -179,7 +179,7 @@ inline void AddTypedTraceEvent(char phase,
 template <typename... Args>
 inline void AddTypedTraceEvent(char phase,
                                const unsigned char* category_group_enabled,
-                               perfetto::StaticString name,
+                               perfetto::libchrome::StaticString name,
                                base::TimeTicks timestamp,
                                Args&&... args) {
   AddTypedTraceEventImpl(phase, category_group_enabled, name, kDefaultTrack,
@@ -189,7 +189,7 @@ inline void AddTypedTraceEvent(char phase,
 template <typename... Args>
 inline void AddTypedTraceEvent(char phase,
                                const unsigned char* category_group_enabled,
-                               perfetto::StaticString name,
+                               perfetto::libchrome::StaticString name,
                                Args&&... args) {
   AddTypedTraceEventImpl(phase, category_group_enabled, name, kDefaultTrack,
                          base::TimeTicks(), std::forward<Args>(args)...);
diff --git a/base/trace_event/typed_macros_unittest.cc b/base/trace_event/typed_macros_unittest.cc
index b8dcff0be9..c6dc305e5f 100644
--- a/base/trace_event/typed_macros_unittest.cc
+++ b/base/trace_event/typed_macros_unittest.cc
@@ -30,14 +30,14 @@ namespace trace_event {
 namespace {
 
 #if BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
-std::unique_ptr<perfetto::TracingSession> g_tracing_session;
+std::unique_ptr<perfetto::libchrome::TracingSession> g_tracing_session;
 #else
 constexpr const char kRecordAllCategoryFilter[] = "*";
 #endif
 
 void EnableTrace() {
 #if BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
-  g_tracing_session = perfetto::Tracing::NewTrace();
+  g_tracing_session = perfetto::libchrome::Tracing::NewTrace();
   g_tracing_session->Setup(test::TracingEnvironment::GetDefaultTraceConfig());
   g_tracing_session->StartBlocking();
 #else   // !BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
@@ -89,8 +89,8 @@ struct TestTrackEvent : public TrackEventHandle::CompletionListener {
     event_completed = true;
   }
 
-  protozero::HeapBuffered<perfetto::protos::pbzero::TrackEvent> event;
-  perfetto::internal::TrackEventIncrementalState incremental_state;
+  protozero::HeapBuffered<perfetto::libchrome::protos::pbzero::TrackEvent> event;
+  perfetto::libchrome::internal::TrackEventIncrementalState incremental_state;
   bool prepare_called = false;
   bool event_completed = false;
 };
@@ -110,7 +110,7 @@ struct TestTracePacket : public TracePacketHandle::CompletionListener {
     packet_completed = true;
   }
 
-  protozero::HeapBuffered<perfetto::protos::pbzero::TracePacket> packet;
+  protozero::HeapBuffered<perfetto::libchrome::protos::pbzero::TracePacket> packet;
   bool prepare_called = false;
   bool packet_completed = false;
   bool emit_empty_called = false;
@@ -140,7 +140,7 @@ void EmitEmptyPacket() {
 class TypedTraceEventTest : public testing::Test {
  public:
   TypedTraceEventTest() {
-    perfetto::internal::TrackRegistry::InitializeInstance();
+    perfetto::libchrome::internal::TrackRegistry::InitializeInstance();
     EnableTypedTraceEvents(&PrepareTrackEvent, &PrepareTracePacket,
                            &EmitEmptyPacket);
   }
@@ -149,10 +149,10 @@ class TypedTraceEventTest : public testing::Test {
 
   void FlushTrace() {
 #if BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
-    perfetto::TrackEvent::Flush();
+    perfetto::libchrome::TrackEvent::Flush();
     g_tracing_session->StopBlocking();
     std::vector<char> serialized_data = g_tracing_session->ReadTraceBlocking();
-    perfetto::protos::Trace trace;
+    perfetto::libchrome::protos::Trace trace;
     EXPECT_TRUE(
         trace.ParseFromArray(serialized_data.data(), serialized_data.size()));
     for (const auto& packet : trace.packet()) {
@@ -179,10 +179,10 @@ class TypedTraceEventTest : public testing::Test {
 #endif  // BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
   }
 
-  perfetto::protos::TrackEvent ParseTrackEvent() {
+  perfetto::libchrome::protos::TrackEvent ParseTrackEvent() {
     FlushTrace();
     auto serialized_data = event_.event.SerializeAsArray();
-    perfetto::protos::TrackEvent track_event;
+    perfetto::libchrome::protos::TrackEvent track_event;
     EXPECT_TRUE(track_event.ParseFromArray(serialized_data.data(),
                                            serialized_data.size()));
     return track_event;
@@ -201,11 +201,11 @@ class TypedTraceEventTest : public testing::Test {
 TEST_F(TypedTraceEventTest, CallbackExecutedWhenTracingEnabled) {
   EnableTrace();
 
-  TRACE_EVENT("cat", "Name", [&](perfetto::EventContext ctx) {
+  TRACE_EVENT("cat", "Name", [&](perfetto::libchrome::EventContext ctx) {
 #if !BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
     EXPECT_EQ(ctx.event(), event_.event.get());
 #endif
-    perfetto::protos::pbzero::LogMessage* log = ctx.event()->set_log_message();
+    perfetto::libchrome::protos::pbzero::LogMessage* log = ctx.event()->set_log_message();
     log->set_body_iid(1);
   });
   FlushTrace();
@@ -218,9 +218,9 @@ TEST_F(TypedTraceEventTest, CallbackExecutedWhenTracingEnabled) {
 }
 
 TEST_F(TypedTraceEventTest, CallbackNotExecutedWhenTracingDisabled) {
-  TRACE_EVENT("cat", "Name", [this](perfetto::EventContext ctx) {
+  TRACE_EVENT("cat", "Name", [this](perfetto::libchrome::EventContext ctx) {
     EXPECT_EQ(ctx.event(), event_.event.get());
-    perfetto::protos::pbzero::LogMessage* log = ctx.event()->set_log_message();
+    perfetto::libchrome::protos::pbzero::LogMessage* log = ctx.event()->set_log_message();
     log->set_body_iid(1);
   });
 
@@ -232,7 +232,7 @@ TEST_F(TypedTraceEventTest, CallbackNotExecutedWhenTracingDisabled) {
 TEST_F(TypedTraceEventTest, DescriptorPacketWrittenForEventWithTrack) {
   EnableTrace();
 
-  TRACE_EVENT("cat", "Name", perfetto::Track(1234));
+  TRACE_EVENT("cat", "Name", perfetto::libchrome::Track(1234));
 
   FlushTrace();
   EXPECT_TRUE(event_.prepare_called);
@@ -251,7 +251,7 @@ TEST_F(TypedTraceEventTest, InternedData) {
   const TraceSourceLocation location("TestFunction", "test.cc", 123);
   size_t iid = 0;
 
-  TRACE_EVENT("cat", "Name", [&location, &iid](perfetto::EventContext ctx) {
+  TRACE_EVENT("cat", "Name", [&location, &iid](perfetto::libchrome::EventContext ctx) {
     auto* log = ctx.event()->set_log_message();
     iid = InternedSourceLocation::Get(&ctx, location);
     EXPECT_NE(0u, iid);
@@ -279,7 +279,7 @@ TEST_F(TypedTraceEventTest, InternedData) {
 
   auto serialized_data =
       event_.incremental_state.serialized_interned_data.SerializeAsArray();
-  perfetto::protos::InternedData interned_data;
+  perfetto::libchrome::protos::InternedData interned_data;
   EXPECT_TRUE(interned_data.ParseFromArray(serialized_data.data(),
                                            serialized_data.size()));
   EXPECT_EQ(2, interned_data.source_locations_size());
@@ -296,7 +296,7 @@ TEST_F(TypedTraceEventTest, InternedData) {
   event_.incremental_state.serialized_interned_data.Reset();
   event_.event_completed = false;
 
-  TRACE_EVENT("cat", "Name", [&location](perfetto::EventContext ctx) {
+  TRACE_EVENT("cat", "Name", [&location](perfetto::libchrome::EventContext ctx) {
     auto* log = ctx.event()->set_log_message();
     size_t iid = InternedSourceLocation::Get(&ctx, location);
     EXPECT_NE(0u, iid);
@@ -315,7 +315,7 @@ TEST_F(TypedTraceEventTest, InternedData) {
 TEST_F(TypedTraceEventTest, InstantThreadEvent) {
   EnableTrace();
 
-  TRACE_EVENT_INSTANT("cat", "ThreadEvent", [](perfetto::EventContext) {});
+  TRACE_EVENT_INSTANT("cat", "ThreadEvent", [](perfetto::libchrome::EventContext) {});
   auto track_event = ParseTrackEvent();
   EXPECT_FALSE(track_event.has_track_uuid());
 
@@ -325,11 +325,11 @@ TEST_F(TypedTraceEventTest, InstantThreadEvent) {
 TEST_F(TypedTraceEventTest, InstantProcessEvent) {
   EnableTrace();
 
-  TRACE_EVENT_INSTANT("cat", "ProcessEvent", perfetto::ProcessTrack::Current(),
-                      [](perfetto::EventContext) {});
+  TRACE_EVENT_INSTANT("cat", "ProcessEvent", perfetto::libchrome::ProcessTrack::Current(),
+                      [](perfetto::libchrome::EventContext) {});
   auto track_event = ParseTrackEvent();
   EXPECT_TRUE(track_event.has_track_uuid());
-  EXPECT_EQ(track_event.track_uuid(), perfetto::ProcessTrack::Current().uuid);
+  EXPECT_EQ(track_event.track_uuid(), perfetto::libchrome::ProcessTrack::Current().uuid);
 
   CancelTrace();
 }
@@ -337,11 +337,11 @@ TEST_F(TypedTraceEventTest, InstantProcessEvent) {
 TEST_F(TypedTraceEventTest, InstantGlobalEvent) {
   EnableTrace();
 
-  TRACE_EVENT_INSTANT("cat", "GlobalEvent", perfetto::Track::Global(1234),
-                      [](perfetto::EventContext) {});
+  TRACE_EVENT_INSTANT("cat", "GlobalEvent", perfetto::libchrome::Track::Global(1234),
+                      [](perfetto::libchrome::EventContext) {});
   auto track_event = ParseTrackEvent();
   EXPECT_TRUE(track_event.has_track_uuid());
-  EXPECT_EQ(track_event.track_uuid(), perfetto::Track::Global(1234).uuid);
+  EXPECT_EQ(track_event.track_uuid(), perfetto::libchrome::Track::Global(1234).uuid);
 
   CancelTrace();
 }
@@ -349,11 +349,11 @@ TEST_F(TypedTraceEventTest, InstantGlobalEvent) {
 TEST_F(TypedTraceEventTest, InstantGlobalDefaultEvent) {
   EnableTrace();
 
-  TRACE_EVENT_INSTANT("cat", "GlobalDefaultEvent", perfetto::Track::Global(0),
-                      [](perfetto::EventContext) {});
+  TRACE_EVENT_INSTANT("cat", "GlobalDefaultEvent", perfetto::libchrome::Track::Global(0),
+                      [](perfetto::libchrome::EventContext) {});
   auto track_event = ParseTrackEvent();
   EXPECT_TRUE(track_event.has_track_uuid());
-  EXPECT_EQ(track_event.track_uuid(), perfetto::Track::Global(0).uuid);
+  EXPECT_EQ(track_event.track_uuid(), perfetto::libchrome::Track::Global(0).uuid);
 
   CancelTrace();
 }
diff --git a/base/tracing/perfetto_platform.cc b/base/tracing/perfetto_platform.cc
index d3f1e9323d..bdcf474dfd 100644
--- a/base/tracing/perfetto_platform.cc
+++ b/base/tracing/perfetto_platform.cc
@@ -55,13 +55,13 @@ PerfettoPlatform::GetOrCreateThreadLocalObject() {
   return object;
 }
 
-std::unique_ptr<perfetto::base::TaskRunner> PerfettoPlatform::CreateTaskRunner(
+std::unique_ptr<perfetto::libchrome::base::TaskRunner> PerfettoPlatform::CreateTaskRunner(
     const CreateTaskRunnerArgs&) {
   switch (task_runner_type_) {
     case TaskRunnerType::kBuiltin:
 #if !defined(OS_NACL)
-      return std::make_unique<perfetto::base::ThreadTaskRunner>(
-          perfetto::base::ThreadTaskRunner::CreateAndStart());
+      return std::make_unique<perfetto::libchrome::base::ThreadTaskRunner>(
+          perfetto::libchrome::base::ThreadTaskRunner::CreateAndStart());
 #else
       DCHECK(false);
       return nullptr;
@@ -85,11 +85,11 @@ void PerfettoPlatform::OnThreadNameChanged(const char* name) {
 #if BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
   // TODO(skyostil): Also capture names for threads which predate tracing being
   // initialized.
-  if (perfetto::Tracing::IsInitialized()) {
-    auto track = perfetto::ThreadTrack::Current();
+  if (perfetto::libchrome::Tracing::IsInitialized()) {
+    auto track = perfetto::libchrome::ThreadTrack::Current();
     auto desc = track.Serialize();
     desc.mutable_thread()->set_thread_name(name);
-    perfetto::TrackEvent::SetTrackDescriptor(track, std::move(desc));
+    perfetto::libchrome::TrackEvent::SetTrackDescriptor(track, std::move(desc));
   }
 #endif  // BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
 }
diff --git a/base/tracing/perfetto_platform.h b/base/tracing/perfetto_platform.h
index a03309a3dd..20da14545f 100644
--- a/base/tracing/perfetto_platform.h
+++ b/base/tracing/perfetto_platform.h
@@ -17,7 +17,7 @@ class DeferredSequencedTaskRunner;
 
 namespace tracing {
 
-class BASE_EXPORT PerfettoPlatform : public perfetto::Platform,
+class BASE_EXPORT PerfettoPlatform : public perfetto::libchrome::Platform,
                                      ThreadIdNameManager::Observer {
  public:
   // Specifies the type of task runner used by Perfetto.
@@ -38,9 +38,9 @@ class BASE_EXPORT PerfettoPlatform : public perfetto::Platform,
   bool did_start_task_runner() const { return did_start_task_runner_; }
   void StartTaskRunner(scoped_refptr<SequencedTaskRunner>);
 
-  // perfetto::Platform implementation:
+  // perfetto::libchrome::Platform implementation:
   ThreadLocalObject* GetOrCreateThreadLocalObject() override;
-  std::unique_ptr<perfetto::base::TaskRunner> CreateTaskRunner(
+  std::unique_ptr<perfetto::libchrome::base::TaskRunner> CreateTaskRunner(
       const CreateTaskRunnerArgs&) override;
   std::string GetCurrentProcessName() override;
 
diff --git a/base/tracing/perfetto_task_runner.cc b/base/tracing/perfetto_task_runner.cc
index 7efa4e30c8..7abf183c92 100644
--- a/base/tracing/perfetto_task_runner.cc
+++ b/base/tracing/perfetto_task_runner.cc
@@ -69,7 +69,7 @@ bool PerfettoTaskRunner::RunsTasksOnCurrentThread() const {
 
 // PlatformHandle is an int on POSIX, a HANDLE on Windows.
 void PerfettoTaskRunner::AddFileDescriptorWatch(
-    perfetto::base::PlatformHandle fd,
+    perfetto::libchrome::base::PlatformHandle fd,
     std::function<void()> callback) {
 #if defined(OS_POSIX) && !defined(OS_NACL)
   DCHECK(GetOrCreateTaskRunner()->RunsTasksInCurrentSequence());
@@ -104,7 +104,7 @@ void PerfettoTaskRunner::AddFileDescriptorWatch(
 }
 
 void PerfettoTaskRunner::RemoveFileDescriptorWatch(
-    perfetto::base::PlatformHandle fd) {
+    perfetto::libchrome::base::PlatformHandle fd) {
 #if defined(OS_POSIX) && !defined(OS_NACL)
   DCHECK(GetOrCreateTaskRunner()->RunsTasksInCurrentSequence());
   DCHECK(base::Contains(fd_controllers_, fd));
diff --git a/base/tracing/perfetto_task_runner.h b/base/tracing/perfetto_task_runner.h
index 21f2d3eb3c..0b7b035d55 100644
--- a/base/tracing/perfetto_task_runner.h
+++ b/base/tracing/perfetto_task_runner.h
@@ -25,7 +25,7 @@ namespace tracing {
 
 // This wraps a base::TaskRunner implementation to be able
 // to provide it to Perfetto.
-class BASE_EXPORT PerfettoTaskRunner : public perfetto::base::TaskRunner {
+class BASE_EXPORT PerfettoTaskRunner : public perfetto::libchrome::base::TaskRunner {
  public:
   explicit PerfettoTaskRunner(
       scoped_refptr<base::SequencedTaskRunner> task_runner);
@@ -33,7 +33,7 @@ class BASE_EXPORT PerfettoTaskRunner : public perfetto::base::TaskRunner {
   PerfettoTaskRunner(const PerfettoTaskRunner&) = delete;
   void operator=(const PerfettoTaskRunner&) = delete;
 
-  // perfetto::base::TaskRunner implementation. Only called by
+  // perfetto::libchrome::base::TaskRunner implementation. Only called by
   // the Perfetto implementation itself.
   void PostTask(std::function<void()> task) override;
   void PostDelayedTask(std::function<void()> task, uint32_t delay_ms) override;
@@ -48,9 +48,9 @@ class BASE_EXPORT PerfettoTaskRunner : public perfetto::base::TaskRunner {
   bool HasTaskRunner() const { return !!task_runner_; }
 
   // These are only used on Android when talking to the system Perfetto service.
-  void AddFileDescriptorWatch(perfetto::base::PlatformHandle,
+  void AddFileDescriptorWatch(perfetto::libchrome::base::PlatformHandle,
                               std::function<void()>) override;
-  void RemoveFileDescriptorWatch(perfetto::base::PlatformHandle) override;
+  void RemoveFileDescriptorWatch(perfetto::libchrome::base::PlatformHandle) override;
 
   // Tests will shut down all task runners in between runs, so we need
   // to re-create any static instances on each SetUp();
diff --git a/base/tracing/trace_time.cc b/base/tracing/trace_time.cc
index 8a10603568..e80b41b2f1 100644
--- a/base/tracing/trace_time.cc
+++ b/base/tracing/trace_time.cc
@@ -18,7 +18,7 @@ int64_t TraceBootTicksNow() {
   struct timespec ts;
   int res = clock_gettime(CLOCK_BOOTTIME, &ts);
   if (res != -1)
-    return static_cast<int64_t>(perfetto::base::FromPosixTimespec(ts).count());
+    return static_cast<int64_t>(perfetto::libchrome::base::FromPosixTimespec(ts).count());
 #endif
   return TRACE_TIME_TICKS_NOW().since_origin().InNanoseconds();
 }
diff --git a/base/tracing/trace_time.h b/base/tracing/trace_time.h
index c5d4e24a03..6374c3027e 100644
--- a/base/tracing/trace_time.h
+++ b/base/tracing/trace_time.h
@@ -15,14 +15,14 @@ namespace tracing {
     defined(OS_FUCHSIA)
 // Linux, Android, and Fuchsia all use CLOCK_MONOTONIC. See crbug.com/166153
 // about efforts to unify base::TimeTicks across all platforms.
-constexpr perfetto::protos::pbzero::BuiltinClock kTraceClockId =
-    perfetto::protos::pbzero::BUILTIN_CLOCK_MONOTONIC;
+constexpr perfetto::libchrome::protos::pbzero::BuiltinClock kTraceClockId =
+    perfetto::libchrome::protos::pbzero::BUILTIN_CLOCK_MONOTONIC;
 #else
 // Mac and Windows TimeTicks advance when sleeping, so are closest to BOOTTIME
 // in behavior.
 // TODO(eseckler): Support specifying Mac/Win platform clocks in BuiltinClock.
-constexpr perfetto::protos::pbzero::BuiltinClock kTraceClockId =
-    perfetto::protos::pbzero::BUILTIN_CLOCK_BOOTTIME;
+constexpr perfetto::libchrome::protos::pbzero::BuiltinClock kTraceClockId =
+    perfetto::libchrome::protos::pbzero::BUILTIN_CLOCK_BOOTTIME;
 #endif
 
 // Returns CLOCK_BOOTTIME on systems that support it, otherwise falls back to
diff --git a/base/values.cc b/base/values.cc
index 6364b3983e..0685664fd6 100644
--- a/base/values.cc
+++ b/base/values.cc
@@ -1004,7 +1004,7 @@ std::string Value::DebugString() const {
 }
 
 #if BUILDFLAG(ENABLE_BASE_TRACING)
-void Value::WriteIntoTrace(perfetto::TracedValue context) const {
+void Value::WriteIntoTrace(perfetto::libchrome::TracedValue context) const {
   switch (type()) {
     case Type::BOOLEAN:
       std::move(context).WriteBoolean(GetBool());
@@ -1022,13 +1022,13 @@ void Value::WriteIntoTrace(perfetto::TracedValue context) const {
       std::move(context).WriteString("<binary data not supported>");
       return;
     case Type::DICTIONARY: {
-      perfetto::TracedDictionary dict = std::move(context).WriteDictionary();
+      perfetto::libchrome::TracedDictionary dict = std::move(context).WriteDictionary();
       for (auto kv : DictItems())
-        dict.Add(perfetto::DynamicString{kv.first}, kv.second);
+        dict.Add(perfetto::libchrome::DynamicString{kv.first}, kv.second);
       return;
     }
     case Type::LIST: {
-      perfetto::TracedArray array = std::move(context).WriteArray();
+      perfetto::libchrome::TracedArray array = std::move(context).WriteArray();
       for (const auto& item : GetList())
         array.Append(item);
       return;
diff --git a/base/values.h b/base/values.h
index 1621505528..82b9ce3527 100644
--- a/base/values.h
+++ b/base/values.h
@@ -581,7 +581,7 @@ class BASE_EXPORT Value {
 
 #if BUILDFLAG(ENABLE_BASE_TRACING)
   // Write this object into a trace.
-  void WriteIntoTrace(perfetto::TracedValue) const;
+  void WriteIntoTrace(perfetto::libchrome::TracedValue) const;
 #endif  // BUILDFLAG(ENABLE_BASE_TRACING)
 
  protected:
diff --git a/base/values_unittest.cc b/base/values_unittest.cc
index ef926bf479..56635dc0d1 100644
--- a/base/values_unittest.cc
+++ b/base/values_unittest.cc
@@ -2380,21 +2380,21 @@ TEST(ValuesTest, MutableGetString) {
 
 #if BUILDFLAG(ENABLE_BASE_TRACING)
 TEST(ValuesTest, TracingSupport) {
-  EXPECT_EQ(perfetto::TracedValueToString(Value(false)), "false");
-  EXPECT_EQ(perfetto::TracedValueToString(Value(1)), "1");
-  EXPECT_EQ(perfetto::TracedValueToString(Value(1.5)), "1.5");
-  EXPECT_EQ(perfetto::TracedValueToString(Value("value")), "value");
-  EXPECT_EQ(perfetto::TracedValueToString(Value(Value::Type::NONE)), "<none>");
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(Value(false)), "false");
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(Value(1)), "1");
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(Value(1.5)), "1.5");
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(Value("value")), "value");
+  EXPECT_EQ(perfetto::libchrome::TracedValueToString(Value(Value::Type::NONE)), "<none>");
   {
     Value::ListStorage list;
     list.emplace_back(2);
     list.emplace_back(3);
-    EXPECT_EQ(perfetto::TracedValueToString(Value(list)), "[2,3]");
+    EXPECT_EQ(perfetto::libchrome::TracedValueToString(Value(list)), "[2,3]");
   }
   {
     Value::DictStorage dict;
     dict["key"] = Value("value");
-    EXPECT_EQ(perfetto::TracedValueToString(Value(dict)), "{key:value}");
+    EXPECT_EQ(perfetto::libchrome::TracedValueToString(Value(dict)), "{key:value}");
   }
 }
 #endif  // BUILDFLAG(ENABLE_BASE_TRACING)
diff --git a/ipc/trace_ipc_message.cc b/ipc/trace_ipc_message.cc
index 80c1483574..135997a69a 100644
--- a/ipc/trace_ipc_message.cc
+++ b/ipc/trace_ipc_message.cc
@@ -12,7 +12,7 @@
 
 namespace IPC {
 
-using perfetto::protos::pbzero::ChromeLegacyIpc;
+using perfetto::libchrome::protos::pbzero::ChromeLegacyIpc;
 
 void WriteIpcMessageIdAsProtozero(uint32_t message_id,
                                   ChromeLegacyIpc* legacy_ipc) {
diff --git a/ipc/trace_ipc_message.h b/ipc/trace_ipc_message.h
index 44d4792cf9..5b5b4d8e7d 100644
--- a/ipc/trace_ipc_message.h
+++ b/ipc/trace_ipc_message.h
@@ -15,7 +15,7 @@
 // event name and typed arguments for the message's type (message class and line
 // number).
 #define TRACE_IPC_MESSAGE_SEND(category, name, msg)                          \
-  TRACE_EVENT(category, name, [msg](perfetto::EventContext ctx) {            \
+  TRACE_EVENT(category, name, [msg](perfetto::libchrome::EventContext ctx) {            \
     IPC::WriteIpcMessageIdAsProtozero(msg->type(),                           \
                                       ctx.event()->set_chrome_legacy_ipc()); \
   });
@@ -26,7 +26,7 @@ namespace IPC {
 // them to the protozero message |ChromeLegacyIpc| for trace events.
 void COMPONENT_EXPORT(IPC)
     WriteIpcMessageIdAsProtozero(uint32_t message_id,
-                                 perfetto::protos::pbzero::ChromeLegacyIpc*);
+                                 perfetto::libchrome::protos::pbzero::ChromeLegacyIpc*);
 
 }  // namespace IPC
 
diff --git a/mojo/public/cpp/bindings/generic_pending_receiver.cc b/mojo/public/cpp/bindings/generic_pending_receiver.cc
index 882f6f1cc1..7608239e68 100644
--- a/mojo/public/cpp/bindings/generic_pending_receiver.cc
+++ b/mojo/public/cpp/bindings/generic_pending_receiver.cc
@@ -44,7 +44,7 @@ mojo::ScopedMessagePipeHandle GenericPendingReceiver::PassPipeIfNameIs(
   return mojo::ScopedMessagePipeHandle();
 }
 
-void GenericPendingReceiver::WriteIntoTrace(perfetto::TracedValue ctx) const {
+void GenericPendingReceiver::WriteIntoTrace(perfetto::libchrome::TracedValue ctx) const {
   auto dict = std::move(ctx).WriteDictionary();
   dict.Add("interface_name", interface_name_);
 }
diff --git a/mojo/public/cpp/bindings/generic_pending_receiver.h b/mojo/public/cpp/bindings/generic_pending_receiver.h
index 5e8c535f6b..31991b95f3 100644
--- a/mojo/public/cpp/bindings/generic_pending_receiver.h
+++ b/mojo/public/cpp/bindings/generic_pending_receiver.h
@@ -69,7 +69,7 @@ class COMPONENT_EXPORT(MOJO_CPP_BINDINGS) GenericPendingReceiver {
     return mojo::PendingReceiver<Interface>(PassPipeIfNameIs(Interface::Name_));
   }
 
-  void WriteIntoTrace(perfetto::TracedValue ctx) const;
+  void WriteIntoTrace(perfetto::libchrome::TracedValue ctx) const;
 
  private:
   mojo::ScopedMessagePipeHandle PassPipeIfNameIs(const char* interface_name);
diff --git a/mojo/public/cpp/bindings/lib/connector.cc b/mojo/public/cpp/bindings/lib/connector.cc
index bdc6727d53..00fcc50982 100644
--- a/mojo/public/cpp/bindings/lib/connector.cc
+++ b/mojo/public/cpp/bindings/lib/connector.cc
@@ -537,7 +537,7 @@ bool Connector::DispatchMessage(Message message) {
 #if !BUILDFLAG(MOJO_TRACE_ENABLED)
   // This emits just full class name, and is inferior to mojo tracing.
   TRACE_EVENT("toplevel", "Connector::DispatchMessage",
-              [this](perfetto::EventContext ctx) {
+              [this](perfetto::libchrome::EventContext ctx) {
                 ctx.event()
                     ->set_chrome_mojo_event_info()
                     ->set_watcher_notify_interface_tag(interface_name_);
diff --git a/mojo/public/cpp/bindings/struct_ptr.h b/mojo/public/cpp/bindings/struct_ptr.h
index ca8d18309b..c803a910b4 100644
--- a/mojo/public/cpp/bindings/struct_ptr.h
+++ b/mojo/public/cpp/bindings/struct_ptr.h
@@ -114,9 +114,9 @@ class StructPtr {
   // If T is serialisable into trace, StructPtr<T> is also serialisable.
 #if 0
   template <class U = S>
-  typename perfetto::check_traced_value_support<U>::type WriteIntoTrace(
-      perfetto::TracedValue&& context) const {
-    perfetto::WriteIntoTracedValue(std::move(context), ptr_);
+  typename perfetto::libchrome::check_traced_value_support<U>::type WriteIntoTrace(
+      perfetto::libchrome::TracedValue&& context) const {
+    perfetto::libchrome::WriteIntoTracedValue(std::move(context), ptr_);
   }
 #endif
 
@@ -218,9 +218,9 @@ class InlinedStructPtr {
 #if 0
   // If T is serialisable into trace, StructPtr<T> is also serialisable.
   template <class U = S>
-  typename perfetto::check_traced_value_support<U>::type WriteIntoTrace(
-      perfetto::TracedValue&& context) const {
-    perfetto::WriteIntoTracedValue(std::move(context), get());
+  typename perfetto::libchrome::check_traced_value_support<U>::type WriteIntoTrace(
+      perfetto::libchrome::TracedValue&& context) const {
+    perfetto::libchrome::WriteIntoTracedValue(std::move(context), get());
   }
 #endif
 
diff --git a/mojo/public/cpp/system/simple_watcher.cc b/mojo/public/cpp/system/simple_watcher.cc
index 89b10724b7..e0d84eb09d 100644
--- a/mojo/public/cpp/system/simple_watcher.cc
+++ b/mojo/public/cpp/system/simple_watcher.cc
@@ -270,7 +270,7 @@ void SimpleWatcher::OnHandleReady(int watch_id,
     // helps identify the cause of janks. It is ok to pass |handler_tag_|
     // here since it is a string literal.
     TRACE_EVENT("toplevel", "SimpleWatcher::OnHandleReady",
-                [this](perfetto::EventContext ctx) {
+                [this](perfetto::libchrome::EventContext ctx) {
                   ctx.event()
                       ->set_chrome_mojo_event_info()
                       ->set_watcher_notify_interface_tag(handler_tag_);
diff --git a/mojo/public/tools/bindings/generators/cpp_templates/enum_macros.tmpl b/mojo/public/tools/bindings/generators/cpp_templates/enum_macros.tmpl
index 010e45b425..c28a9b49a3 100644
--- a/mojo/public/tools/bindings/generators/cpp_templates/enum_macros.tmpl
+++ b/mojo/public/tools/bindings/generators/cpp_templates/enum_macros.tmpl
@@ -179,12 +179,14 @@ struct HashTraits<{{enum_name}}>
 {%-   set enum_name = enum|get_qualified_name_for_kind(
           flatten_nested_kind=True) %}
 namespace perfetto {
+namespace libchrome {
 
 template <>
 struct {{export_attribute}} TraceFormatTraits<{{enum_name}}> {
- static void WriteIntoTrace(perfetto::TracedValue context, {{enum_name}} value);
+ static void WriteIntoTrace(perfetto::libchrome::TracedValue context, {{enum_name}} value);
 };
 
+} // namespace libchrome
 } // namespace perfetto
 {%- endmacro %}
 
@@ -192,12 +194,14 @@ struct {{export_attribute}} TraceFormatTraits<{{enum_name}}> {
 {%-   set enum_name = enum|get_qualified_name_for_kind(
           flatten_nested_kind=True) %}
 namespace perfetto {
+namespace libchrome {
 
 // static
 void TraceFormatTraits<{{enum_name}}>::WriteIntoTrace(
-   perfetto::TracedValue context, {{enum_name}} value) {
+   perfetto::libchrome::TracedValue context, {{enum_name}} value) {
   return std::move(context).WriteString({{enum_name}}ToString(value));
 }
 
+} // namespace libchrome
 } // namespace perfetto
 {%- endmacro %}endmacro 
diff --git a/mojo/public/tools/bindings/generators/cpp_templates/interface_macros.tmpl b/mojo/public/tools/bindings/generators/cpp_templates/interface_macros.tmpl
index f31d1c4f7e..2d8750438e 100644
--- a/mojo/public/tools/bindings/generators/cpp_templates/interface_macros.tmpl
+++ b/mojo/public/tools/bindings/generators/cpp_templates/interface_macros.tmpl
@@ -41,10 +41,10 @@ base::OnceCallback<void(
 {%-   if method_parameters -%}
   TRACE_EVENT{{trace_event_type}}1(
     "mojom", "{{method_name}}", "{{parameter_group}}",
-    [&](perfetto::TracedValue context){
+    [&](perfetto::libchrome::TracedValue context){
       auto dict = std::move(context).WriteDictionary();
 {%-     for param in method_parameters %}
-      perfetto::WriteIntoTracedValueWithFallback(
+      perfetto::libchrome::WriteIntoTracedValueWithFallback(
            dict.AddItem("{{param.name}}"), {{prefix+param.name}},
                         "<value of type {{param.kind|cpp_wrapper_param_type}}>");
 {%-     endfor %}
diff --git a/mojo/public/tools/bindings/generators/cpp_templates/wrapper_class_declaration.tmpl b/mojo/public/tools/bindings/generators/cpp_templates/wrapper_class_declaration.tmpl
index 1652da75ba..3bf23e85ab 100644
--- a/mojo/public/tools/bindings/generators/cpp_templates/wrapper_class_declaration.tmpl
+++ b/mojo/public/tools/bindings/generators/cpp_templates/wrapper_class_declaration.tmpl
@@ -141,7 +141,7 @@ class {{export_attribute}} {{struct.name}} {
 {%- endfor %}
 
   // Serialise this struct into a trace.
-  void WriteIntoTrace(perfetto::TracedValue traced_context) const;
+  void WriteIntoTrace(perfetto::libchrome::TracedValue traced_context) const;
 
  private:
   static bool Validate(const void* data,
diff --git a/mojo/public/tools/bindings/generators/cpp_templates/wrapper_class_definition.tmpl b/mojo/public/tools/bindings/generators/cpp_templates/wrapper_class_definition.tmpl
index 3bfe4759ed..721046de54 100644
--- a/mojo/public/tools/bindings/generators/cpp_templates/wrapper_class_definition.tmpl
+++ b/mojo/public/tools/bindings/generators/cpp_templates/wrapper_class_definition.tmpl
@@ -33,12 +33,12 @@ size_t {{struct.name}}::Hash(size_t seed) const {
 {%- endif %}
 
 void {{struct.name}}::WriteIntoTrace(
-    perfetto::TracedValue traced_context) const {
+    perfetto::libchrome::TracedValue traced_context) const {
 {%- if struct.fields %}
   auto dict = std::move(traced_context).WriteDictionary();
 {%- endif %}
 {%-  for field in struct.fields %}
-  perfetto::WriteIntoTracedValueWithFallback(
+  perfetto::libchrome::WriteIntoTracedValueWithFallback(
     dict.AddItem(
       "{{field.name}}"), {{'this->'+field.name}},
 #if BUILDFLAG(MOJO_TRACE_ENABLED)
-- 
2.34.1.173.g76aa8bc2d0-goog

