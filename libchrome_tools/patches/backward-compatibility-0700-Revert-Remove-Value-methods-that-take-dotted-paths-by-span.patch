diff --git a/base/values.cc b/base/values.cc
index 431df641be..f17ebcdb36 100644
--- a/base/values.cc
+++ b/base/values.cc
@@ -1213,6 +1213,52 @@ bool Value::RemovePath(StringPiece path) {
   return GetDict().RemoveByDottedPath(path);
 }
 
+// DEPRECATED METHODS
+Value* Value::FindPath(std::initializer_list<StringPiece> path) {
+  return const_cast<Value*>(std::as_const(*this).FindPath(path));
+}
+
+Value* Value::FindPath(span<const StringPiece> path) {
+  return const_cast<Value*>(std::as_const(*this).FindPath(path));
+}
+
+const Value* Value::FindPath(std::initializer_list<StringPiece> path) const {
+  DCHECK_GE(path.size(), 2u) << "Use FindKey() for a path of length 1.";
+  return FindPath(make_span(path.begin(), path.size()));
+}
+
+const Value* Value::FindPath(span<const StringPiece> path) const {
+  const Value* cur = this;
+  for (const StringPiece& component : path) {
+    if (!cur->is_dict() || (cur = cur->FindKey(component)) == nullptr)
+      return nullptr;
+  }
+  return cur;
+}
+
+Value* Value::FindPathOfType(std::initializer_list<StringPiece> path,
+                             Type type) {
+  return const_cast<Value*>(std::as_const(*this).FindPathOfType(path, type));
+}
+
+Value* Value::FindPathOfType(span<const StringPiece> path, Type type) {
+  return const_cast<Value*>(std::as_const(*this).FindPathOfType(path, type));
+}
+
+const Value* Value::FindPathOfType(std::initializer_list<StringPiece> path,
+                                   Type type) const {
+  DCHECK_GE(path.size(), 2u) << "Use FindKeyOfType() for a path of length 1.";
+  return FindPathOfType(make_span(path.begin(), path.size()), type);
+}
+
+const Value* Value::FindPathOfType(span<const StringPiece> path,
+                                   Type type) const {
+  const Value* result = FindPath(path);
+  if (!result || result->type() != type)
+    return nullptr;
+  return result;
+}
+
 Value* Value::SetPath(std::initializer_list<StringPiece> path, Value&& value) {
   DCHECK_GE(path.size(), 2u) << "Use SetKey() for a path of length 1.";
   return SetPath(make_span(path.begin(), path.size()), std::move(value));
diff --git a/base/values.h b/base/values.h
index 6362e0ad2b..80745f2352 100644
--- a/base/values.h
+++ b/base/values.h
@@ -766,6 +766,24 @@ class BASE_EXPORT GSL_OWNER Value {
   Value* FindPath(StringPiece path);
   const Value* FindPath(StringPiece path) const;
 
+  // There are also deprecated versions that take the path parameter
+  // as either a std::initializer_list<StringPiece> or a
+  // span<const StringPiece>. The latter is useful to use a
+  // std::vector<std::string> as a parameter but creates huge dynamic
+  // allocations and should be avoided!
+  // Note: If there is only one component in the path, use `FindKey()` instead.
+  //
+  // Example:
+  //   std::vector<StringPiece> components = ...
+  //   auto* found = FindPath(components);
+  //
+  // DEPRECATED: These are not common, and there is no currently planned
+  // replacement.
+  Value* FindPath(std::initializer_list<StringPiece> path);
+  Value* FindPath(span<const StringPiece> path);
+  const Value* FindPath(std::initializer_list<StringPiece> path) const;
+  const Value* FindPath(span<const StringPiece> path) const;
+
   // Like FindPath() but will only return the value if the leaf Value type
   // matches the given type. Will return nullptr otherwise.
   // Note: Prefer `Find<Type>Path()` for simple values.
@@ -808,6 +826,17 @@ class BASE_EXPORT GSL_OWNER Value {
   Value* FindListPath(StringPiece path);
   const Value* FindListPath(StringPiece path) const;
 
+  // The following forms are deprecated too, use the ones that take the path
+  // as a single StringPiece instead.
+  //
+  // DEPRECATED: These are not common, and there is no currently planned
+  // replacement.
+  Value* FindPathOfType(std::initializer_list<StringPiece> path, Type type);
+  Value* FindPathOfType(span<const StringPiece> path, Type type);
+  const Value* FindPathOfType(std::initializer_list<StringPiece> path,
+                              Type type) const;
+  const Value* FindPathOfType(span<const StringPiece> path, Type type) const;
+
   // Sets the given path, expanding and creating dictionary keys as necessary.
   //
   // If the current value is not a dictionary, the function returns nullptr. If
