Reverts
58c48c91d955cd635004793282f1ebf79e636078 (r979626) and
0ea8bf03afc12fe6500f4615fee7650df8133885 (r977729).

Breaks
CtsCameraTestCases - android.hardware.cts.CameraTest#testPreviewFpsRange
CtsCameraTestCases - android.hardware.cts.LegacyCameraPerformanceTest#testLegacyApiPerformance
on volteer.voema

Bug Details: b/239650106

diff --git a/mojo/core/entrypoints.cc b/mojo/core/entrypoints.cc
index ab4b5161aa..ba5781ea0b 100644
--- a/mojo/core/entrypoints.cc
+++ b/mojo/core/entrypoints.cc
@@ -359,52 +359,52 @@ MojoResult MojoSetDefaultProcessErrorHandlerImpl(
 
 }  // extern "C"
 
-MojoSystemThunks64 g_thunks = {sizeof(g_thunks),
-                               MojoInitializeImpl,
-                               MojoGetTimeTicksNowImpl,
-                               MojoCloseImpl,
-                               MojoQueryHandleSignalsStateImpl,
-                               MojoCreateMessagePipeImpl,
-                               MojoWriteMessageImpl,
-                               MojoReadMessageImpl,
-                               MojoFuseMessagePipesImpl,
-                               MojoCreateMessageImpl,
-                               MojoDestroyMessageImpl,
-                               MojoSerializeMessageImpl,
-                               MojoAppendMessageDataImpl,
-                               MojoGetMessageDataImpl,
-                               MojoSetMessageContextImpl,
-                               MojoGetMessageContextImpl,
-                               MojoNotifyBadMessageImpl,
-                               MojoCreateDataPipeImpl,
-                               MojoWriteDataImpl,
-                               MojoBeginWriteDataImpl,
-                               MojoEndWriteDataImpl,
-                               MojoReadDataImpl,
-                               MojoBeginReadDataImpl,
-                               MojoEndReadDataImpl,
-                               MojoCreateSharedBufferImpl,
-                               MojoDuplicateBufferHandleImpl,
-                               MojoMapBufferImpl,
-                               MojoUnmapBufferImpl,
-                               MojoGetBufferInfoImpl,
-                               MojoCreateTrapImpl,
-                               MojoAddTriggerImpl,
-                               MojoRemoveTriggerImpl,
-                               MojoArmTrapImpl,
-                               MojoWrapPlatformHandleImpl,
-                               MojoUnwrapPlatformHandleImpl,
-                               MojoWrapPlatformSharedMemoryRegionImpl,
-                               MojoUnwrapPlatformSharedMemoryRegionImpl,
-                               MojoCreateInvitationImpl,
-                               MojoAttachMessagePipeToInvitationImpl,
-                               MojoExtractMessagePipeFromInvitationImpl,
-                               MojoSendInvitationImpl,
-                               MojoAcceptInvitationImpl,
-                               MojoSetQuotaImpl,
-                               MojoQueryQuotaImpl,
-                               MojoShutdownImpl,
-                               MojoSetDefaultProcessErrorHandlerImpl};
+MojoSystemThunks g_thunks = {sizeof(MojoSystemThunks),
+                             MojoInitializeImpl,
+                             MojoGetTimeTicksNowImpl,
+                             MojoCloseImpl,
+                             MojoQueryHandleSignalsStateImpl,
+                             MojoCreateMessagePipeImpl,
+                             MojoWriteMessageImpl,
+                             MojoReadMessageImpl,
+                             MojoFuseMessagePipesImpl,
+                             MojoCreateMessageImpl,
+                             MojoDestroyMessageImpl,
+                             MojoSerializeMessageImpl,
+                             MojoAppendMessageDataImpl,
+                             MojoGetMessageDataImpl,
+                             MojoSetMessageContextImpl,
+                             MojoGetMessageContextImpl,
+                             MojoNotifyBadMessageImpl,
+                             MojoCreateDataPipeImpl,
+                             MojoWriteDataImpl,
+                             MojoBeginWriteDataImpl,
+                             MojoEndWriteDataImpl,
+                             MojoReadDataImpl,
+                             MojoBeginReadDataImpl,
+                             MojoEndReadDataImpl,
+                             MojoCreateSharedBufferImpl,
+                             MojoDuplicateBufferHandleImpl,
+                             MojoMapBufferImpl,
+                             MojoUnmapBufferImpl,
+                             MojoGetBufferInfoImpl,
+                             MojoCreateTrapImpl,
+                             MojoAddTriggerImpl,
+                             MojoRemoveTriggerImpl,
+                             MojoArmTrapImpl,
+                             MojoWrapPlatformHandleImpl,
+                             MojoUnwrapPlatformHandleImpl,
+                             MojoWrapPlatformSharedMemoryRegionImpl,
+                             MojoUnwrapPlatformSharedMemoryRegionImpl,
+                             MojoCreateInvitationImpl,
+                             MojoAttachMessagePipeToInvitationImpl,
+                             MojoExtractMessagePipeFromInvitationImpl,
+                             MojoSendInvitationImpl,
+                             MojoAcceptInvitationImpl,
+                             MojoSetQuotaImpl,
+                             MojoQueryQuotaImpl,
+                             MojoShutdownImpl,
+                             MojoSetDefaultProcessErrorHandlerImpl};
 
 }  // namespace
 
@@ -421,7 +421,7 @@ void InitializeCore() {
   g_core = core_instance.get();
 }
 
-const MojoSystemThunks64& GetSystemThunks() {
+const MojoSystemThunks& GetSystemThunks() {
   return g_thunks;
 }
 
diff --git a/mojo/core/entrypoints.h b/mojo/core/entrypoints.h
index 6ac59d0861..e18366b74d 100644
--- a/mojo/core/entrypoints.h
+++ b/mojo/core/entrypoints.h
@@ -14,10 +14,10 @@ namespace core {
 // Initializes the global Core object.
 MOJO_SYSTEM_IMPL_EXPORT void InitializeCore();
 
-// Returns a MojoSystemThunks64 struct populated with the EDK's implementation
-// of each function. This may be used by embedders to populate thunks for
+// Returns a MojoSystemThunks struct populated with the EDK's implementation of
+// each function. This may be used by embedders to populate thunks for
 // application loading.
-MOJO_SYSTEM_IMPL_EXPORT const MojoSystemThunks64& GetSystemThunks();
+MOJO_SYSTEM_IMPL_EXPORT const MojoSystemThunks& GetSystemThunks();
 
 }  // namespace core
 }  // namespace mojo
diff --git a/mojo/core/handle_table.cc b/mojo/core/handle_table.cc
index 1befb91c64..a044f1c8e3 100644
--- a/mojo/core/handle_table.cc
+++ b/mojo/core/handle_table.cc
@@ -73,8 +73,8 @@ bool HandleTable::AddDispatchersFromTransit(
   DCHECK_GE(next_available_handle_, 1u);
 
   // If this insertion would cause handle overflow, we're out of handles.
-  const uint64_t num_handles_available =
-      std::numeric_limits<uint64_t>::max() - next_available_handle_ + 1;
+  const uint32_t num_handles_available =
+      std::numeric_limits<uint32_t>::max() - next_available_handle_ + 1;
   if (num_handles_available < dispatchers.size()) {
     return false;
   }
diff --git a/mojo/core/handle_table.h b/mojo/core/handle_table.h
index 331008d637..0664ea500b 100644
--- a/mojo/core/handle_table.h
+++ b/mojo/core/handle_table.h
@@ -81,7 +81,7 @@ class MOJO_SYSTEM_IMPL_EXPORT HandleTable
   HandleMap handles_;
   base::Lock lock_;
 
-  uint64_t next_available_handle_ = 1;
+  uint32_t next_available_handle_ = 1;
 };
 
 }  // namespace core
diff --git a/mojo/core/mojo_core.cc b/mojo/core/mojo_core.cc
index f7866ff600..8a33ded36b 100644
--- a/mojo/core/mojo_core.cc
+++ b/mojo/core/mojo_core.cc
@@ -183,7 +183,7 @@ MojoResult ShutdownImpl(const struct MojoShutdownOptions* options) {
   return MOJO_RESULT_OK;
 }
 
-MojoSystemThunks64 g_thunks = {0};
+MojoSystemThunks g_thunks = {0};
 
 }  // namespace
 
@@ -193,7 +193,7 @@ MojoSystemThunks64 g_thunks = {0};
 #define EXPORT_FROM_MOJO_CORE __attribute__((visibility("default")))
 #endif
 
-EXPORT_FROM_MOJO_CORE void MojoGetSystemThunks(MojoSystemThunks64* thunks) {
+EXPORT_FROM_MOJO_CORE void MojoGetSystemThunks(MojoSystemThunks* thunks) {
   if (!g_thunks.size) {
     g_thunks = mojo::core::GetSystemThunks();
     g_thunks.Initialize = InitializeImpl;
@@ -202,7 +202,7 @@ EXPORT_FROM_MOJO_CORE void MojoGetSystemThunks(MojoSystemThunks64* thunks) {
 
   // Caller must provide a thunk structure at least large enough to hold Core
   // ABI version 0. SetQuota is the first function introduced in ABI version 1.
-  CHECK_GE(thunks->size, offsetof(MojoSystemThunks64, SetQuota));
+  CHECK_GE(thunks->size, offsetof(MojoSystemThunks, SetQuota));
 
   // NOTE: This also overrites |thunks->size| with the actual size of our own
   // thunks if smaller than the caller's. This informs the caller that we
diff --git a/mojo/public/c/system/thunks.cc b/mojo/public/c/system/thunks.cc
index 8cec68d504..b8f8ff43bb 100644
--- a/mojo/public/c/system/thunks.cc
+++ b/mojo/public/c/system/thunks.cc
@@ -7,7 +7,6 @@
 #include <cstddef>
 #include <cstdint>
 #include <cstring>
-#include <vector>
 
 #include "base/check_op.h"
 #include "base/compiler_specific.h"
@@ -18,10 +17,7 @@
 #include "base/strings/string_piece.h"
 #include "build/build_config.h"
 #include "mojo/public/c/system/core.h"
-#include "mojo/public/c/system/data_pipe.h"
-#include "mojo/public/c/system/invitation.h"
 #include "mojo/public/c/system/macros.h"
-#include "mojo/public/c/system/message_pipe.h"
 
 #if BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_WIN) || \
     BUILDFLAG(IS_FUCHSIA)
@@ -34,9 +30,9 @@
 
 namespace {
 
-typedef void (*MojoGetSystemThunksFunction)(MojoSystemThunks64* thunks);
+typedef void (*MojoGetSystemThunksFunction)(MojoSystemThunks* thunks);
 
-MojoSystemThunks64 g_thunks;
+MojoSystemThunks g_thunks;
 
 MojoResult NotImplemented(const char* name) {
   if (g_thunks.size > 0) {
@@ -54,9 +50,9 @@ MojoResult NotImplemented(const char* name) {
 
 }  // namespace
 
-#define INVOKE_THUNK(name, ...)                      \
-  offsetof(MojoSystemThunks64, name) < g_thunks.size \
-      ? g_thunks.name(__VA_ARGS__)                   \
+#define INVOKE_THUNK(name, ...)                    \
+  offsetof(MojoSystemThunks, name) < g_thunks.size \
+      ? g_thunks.name(__VA_ARGS__)                 \
       : NotImplemented(#name)
 
 namespace mojo {
@@ -501,377 +497,13 @@ MojoResult MojoSetDefaultProcessErrorHandler(
   return INVOKE_THUNK(SetDefaultProcessErrorHandler, handler, options);
 }
 
-MojoResult MojoClose32(MojoHandle32 handle) {
-  return MojoClose(handle);
-}
-
-MojoResult MojoQueryHandleSignalsState32(
-    MojoHandle32 handle,
-    struct MojoHandleSignalsState* signals_state) {
-  return MojoQueryHandleSignalsState(handle, signals_state);
-}
-
-MojoResult MojoCreateMessagePipe32(const MojoCreateMessagePipeOptions* options,
-                                   MojoHandle32* message_pipe_handle0,
-                                   MojoHandle32* message_pipe_handle1) {
-  MojoHandle handle0, handle1;
-  MojoResult result = MojoCreateMessagePipe(options, &handle0, &handle1);
-  *message_pipe_handle0 = static_cast<MojoHandle32>(handle0);
-  *message_pipe_handle1 = static_cast<MojoHandle32>(handle1);
-  return result;
-}
-
-MojoResult MojoWriteMessage32(MojoHandle32 message_pipe_handle,
-                              MojoMessageHandle message_handle,
-                              const MojoWriteMessageOptions* options) {
-  return MojoWriteMessage(message_pipe_handle, message_handle, options);
-}
-
-MojoResult MojoReadMessage32(MojoHandle32 message_pipe_handle,
-                             const MojoReadMessageOptions* options,
-                             MojoMessageHandle* message_handle) {
-  return MojoReadMessage(message_pipe_handle, options, message_handle);
-}
-
-MojoResult MojoFuseMessagePipes32(MojoHandle32 handle0,
-                                  MojoHandle32 handle1,
-                                  const MojoFuseMessagePipesOptions* options) {
-  return MojoFuseMessagePipes(handle0, handle1, options);
-}
-
-MojoResult MojoCreateDataPipe32(const MojoCreateDataPipeOptions* options,
-                                MojoHandle32* data_pipe_producer_handle,
-                                MojoHandle32* data_pipe_consumer_handle) {
-  MojoHandle producer, consumer;
-  MojoResult result = MojoCreateDataPipe(options, &producer, &consumer);
-  *data_pipe_producer_handle = static_cast<MojoHandle32>(producer);
-  *data_pipe_consumer_handle = static_cast<MojoHandle32>(consumer);
-  return result;
-}
-
-MojoResult MojoWriteData32(MojoHandle32 data_pipe_producer_handle,
-                           const void* elements,
-                           uint32_t* num_elements,
-                           const MojoWriteDataOptions* options) {
-  return MojoWriteData(data_pipe_producer_handle, elements, num_elements,
-                       options);
-}
-
-MojoResult MojoBeginWriteData32(MojoHandle32 data_pipe_producer_handle,
-                                const MojoBeginWriteDataOptions* options,
-                                void** buffer,
-                                uint32_t* buffer_num_elements) {
-  return MojoBeginWriteData(data_pipe_producer_handle, options, buffer,
-                            buffer_num_elements);
-}
-
-MojoResult MojoEndWriteData32(MojoHandle32 data_pipe_producer_handle,
-                              uint32_t num_elements_written,
-                              const MojoEndWriteDataOptions* options) {
-  return MojoEndWriteData(data_pipe_producer_handle, num_elements_written,
-                          options);
-}
-
-MojoResult MojoReadData32(MojoHandle32 data_pipe_consumer_handle,
-                          const MojoReadDataOptions* options,
-                          void* elements,
-                          uint32_t* num_elements) {
-  return MojoReadData(data_pipe_consumer_handle, options, elements,
-                      num_elements);
-}
-
-MojoResult MojoBeginReadData32(MojoHandle32 data_pipe_consumer_handle,
-                               const MojoBeginReadDataOptions* options,
-                               const void** buffer,
-                               uint32_t* buffer_num_elements) {
-  return MojoBeginReadData(data_pipe_consumer_handle, options, buffer,
-                           buffer_num_elements);
-}
-
-MojoResult MojoEndReadData32(MojoHandle32 data_pipe_consumer_handle,
-                             uint32_t num_elements_read,
-                             const MojoEndReadDataOptions* options) {
-  return MojoEndReadData(data_pipe_consumer_handle, num_elements_read, options);
-}
-
-MojoResult MojoCreateSharedBuffer32(
-    uint64_t num_bytes,
-    const MojoCreateSharedBufferOptions* options,
-    MojoHandle32* shared_buffer_handle) {
-  MojoHandle handle;
-  MojoResult result = MojoCreateSharedBuffer(num_bytes, options, &handle);
-  *shared_buffer_handle = static_cast<MojoHandle32>(handle);
-  return result;
-}
-
-MojoResult MojoDuplicateBufferHandle32(
-    MojoHandle32 buffer_handle,
-    const MojoDuplicateBufferHandleOptions* options,
-    MojoHandle32* new_buffer_handle) {
-  MojoHandle new_handle;
-  MojoResult result =
-      MojoDuplicateBufferHandle(buffer_handle, options, &new_handle);
-  *new_buffer_handle = static_cast<MojoHandle32>(new_handle);
-  return result;
-}
-
-MojoResult MojoMapBuffer32(MojoHandle32 buffer_handle,
-                           uint64_t offset,
-                           uint64_t num_bytes,
-                           const MojoMapBufferOptions* options,
-                           void** buffer) {
-  return MojoMapBuffer(buffer_handle, offset, num_bytes, options, buffer);
-}
-
-MojoResult MojoGetBufferInfo32(MojoHandle32 buffer_handle,
-                               const MojoGetBufferInfoOptions* options,
-                               MojoSharedBufferInfo* info) {
-  return MojoGetBufferInfo(buffer_handle, options, info);
-}
-
-MojoResult MojoCreateTrap32(MojoTrapEventHandler handler,
-                            const MojoCreateTrapOptions* options,
-                            MojoHandle32* trap_handle) {
-  MojoHandle handle;
-  MojoResult result = MojoCreateTrap(handler, options, &handle);
-  *trap_handle = static_cast<MojoHandle32>(handle);
-  return result;
-}
-
-MojoResult MojoAddTrigger32(MojoHandle32 trap_handle,
-                            MojoHandle32 handle,
-                            MojoHandleSignals signals,
-                            MojoTriggerCondition condition,
-                            uintptr_t context,
-                            const MojoAddTriggerOptions* options) {
-  return MojoAddTrigger(trap_handle, handle, signals, condition, context,
-                        options);
-}
-
-MojoResult MojoRemoveTrigger32(MojoHandle32 trap_handle,
-                               uintptr_t context,
-                               const MojoRemoveTriggerOptions* options) {
-  return MojoRemoveTrigger(trap_handle, context, options);
-}
-
-MojoResult MojoArmTrap32(MojoHandle32 trap_handle,
-                         const MojoArmTrapOptions* options,
-                         uint32_t* num_blocking_events,
-                         MojoTrapEvent* blocking_events) {
-  return MojoArmTrap(trap_handle, options, num_blocking_events,
-                     blocking_events);
-}
-
-MojoResult MojoAppendMessageData32(MojoMessageHandle message,
-                                   uint32_t payload_size,
-                                   const MojoHandle32* handles,
-                                   uint32_t num_handles,
-                                   const MojoAppendMessageDataOptions* options,
-                                   void** buffer,
-                                   uint32_t* buffer_size) {
-  std::vector<MojoHandle> handles64(num_handles);
-  for (size_t i = 0; i < num_handles; ++i) {
-    handles64[i] = handles[i];
-  }
-  return MojoAppendMessageData(message, payload_size, handles64.data(),
-                               num_handles, options, buffer, buffer_size);
-}
-
-MojoResult MojoGetMessageData32(MojoMessageHandle message,
-                                const MojoGetMessageDataOptions* options,
-                                void** buffer,
-                                uint32_t* num_bytes,
-                                MojoHandle32* handles,
-                                uint32_t* num_handles) {
-  std::vector<MojoHandle> handles64(num_handles ? *num_handles : 0);
-  MojoResult result = MojoGetMessageData(message, options, buffer, num_bytes,
-                                         handles64.data(), num_handles);
-  if (result == MOJO_RESULT_OK && num_handles) {
-    for (size_t i = 0; i < *num_handles; ++i) {
-      handles[i] = static_cast<MojoHandle32>(handles64[i]);
-    }
-  }
-  return result;
-}
-
-MojoResult MojoWrapPlatformHandle32(
-    const MojoPlatformHandle* platform_handle,
-    const MojoWrapPlatformHandleOptions* options,
-    MojoHandle32* mojo_handle) {
-  MojoHandle handle;
-  MojoResult result = MojoWrapPlatformHandle(platform_handle, options, &handle);
-  *mojo_handle = static_cast<MojoHandle32>(handle);
-  return result;
-}
-
-MojoResult MojoUnwrapPlatformHandle32(
-    MojoHandle32 mojo_handle,
-    const MojoUnwrapPlatformHandleOptions* options,
-    MojoPlatformHandle* platform_handle) {
-  return MojoUnwrapPlatformHandle(mojo_handle, options, platform_handle);
-}
-
-MojoResult MojoWrapPlatformSharedMemoryRegion32(
-    const struct MojoPlatformHandle* platform_handles,
-    uint32_t num_platform_handles,
-    uint64_t num_bytes,
-    const MojoSharedBufferGuid* guid,
-    MojoPlatformSharedMemoryRegionAccessMode access_mode,
-    const MojoWrapPlatformSharedMemoryRegionOptions* options,
-    MojoHandle32* mojo_handle) {
-  MojoHandle handle;
-  MojoResult result = MojoWrapPlatformSharedMemoryRegion(
-      platform_handles, num_platform_handles, num_bytes, guid, access_mode,
-      options, &handle);
-  *mojo_handle = static_cast<MojoHandle32>(handle);
-  return result;
-}
-
-MojoResult MojoUnwrapPlatformSharedMemoryRegion32(
-    MojoHandle32 mojo_handle,
-    const MojoUnwrapPlatformSharedMemoryRegionOptions* options,
-    struct MojoPlatformHandle* platform_handles,
-    uint32_t* num_platform_handles,
-    uint64_t* num_bytes,
-    struct MojoSharedBufferGuid* guid,
-    MojoPlatformSharedMemoryRegionAccessMode* access_mode) {
-  return MojoUnwrapPlatformSharedMemoryRegion(
-      mojo_handle, options, platform_handles, num_platform_handles, num_bytes,
-      guid, access_mode);
-}
-
-MojoResult MojoCreateInvitation32(const MojoCreateInvitationOptions* options,
-                                  MojoHandle32* invitation_handle) {
-  MojoHandle handle;
-  MojoResult result = MojoCreateInvitation(options, &handle);
-  *invitation_handle = static_cast<MojoHandle32>(handle);
-  return result;
-}
-
-MojoResult MojoAttachMessagePipeToInvitation32(
-    MojoHandle32 invitation_handle,
-    const void* name,
-    uint32_t name_num_bytes,
-    const MojoAttachMessagePipeToInvitationOptions* options,
-    MojoHandle32* message_pipe_handle) {
-  MojoHandle handle;
-  MojoResult result = MojoAttachMessagePipeToInvitation(
-      invitation_handle, name, name_num_bytes, options, &handle);
-  *message_pipe_handle = static_cast<MojoHandle32>(handle);
-  return result;
-}
-
-MojoResult MojoExtractMessagePipeFromInvitation32(
-    MojoHandle32 invitation_handle,
-    const void* name,
-    uint32_t name_num_bytes,
-    const MojoExtractMessagePipeFromInvitationOptions* options,
-    MojoHandle32* message_pipe_handle) {
-  MojoHandle handle;
-  MojoResult result = MojoExtractMessagePipeFromInvitation(
-      invitation_handle, name, name_num_bytes, options, &handle);
-  *message_pipe_handle = static_cast<MojoHandle32>(handle);
-  return result;
-}
-
-MojoResult MojoSendInvitation32(
-    MojoHandle32 invitation_handle,
-    const MojoPlatformProcessHandle* process_handle,
-    const MojoInvitationTransportEndpoint* transport_endpoint,
-    MojoProcessErrorHandler error_handler,
-    uintptr_t error_handler_context,
-    const MojoSendInvitationOptions* options) {
-  return MojoSendInvitation(invitation_handle, process_handle,
-                            transport_endpoint, error_handler,
-                            error_handler_context, options);
-}
-
-MojoResult MojoAcceptInvitation32(
-    const MojoInvitationTransportEndpoint* transport_endpoint,
-    const MojoAcceptInvitationOptions* options,
-    MojoHandle32* invitation_handle) {
-  MojoHandle handle;
-  MojoResult result =
-      MojoAcceptInvitation(transport_endpoint, options, &handle);
-  *invitation_handle = static_cast<MojoHandle32>(handle);
-  return result;
-}
-
-MojoResult MojoSetQuota32(MojoHandle32 handle,
-                          MojoQuotaType type,
-                          uint64_t limit,
-                          const MojoSetQuotaOptions* options) {
-  return MojoSetQuota(handle, type, limit, options);
-}
-
-MojoResult MojoQueryQuota32(MojoHandle32 handle,
-                            MojoQuotaType type,
-                            const MojoQueryQuotaOptions* options,
-                            uint64_t* limit,
-                            uint64_t* usage) {
-  return MojoQueryQuota(handle, type, options, limit, usage);
-}
-
-MojoSystemThunks32 g_thunks_32 = {
-    sizeof(g_thunks_32),
-    MojoInitialize,
-    MojoGetTimeTicksNow,
-    MojoClose32,
-    MojoQueryHandleSignalsState32,
-    MojoCreateMessagePipe32,
-    MojoWriteMessage32,
-    MojoReadMessage32,
-    MojoFuseMessagePipes32,
-    MojoCreateMessage,
-    MojoDestroyMessage,
-    MojoSerializeMessage,
-    MojoAppendMessageData32,
-    MojoGetMessageData32,
-    MojoSetMessageContext,
-    MojoGetMessageContext,
-    MojoNotifyBadMessage,
-    MojoCreateDataPipe32,
-    MojoWriteData32,
-    MojoBeginWriteData32,
-    MojoEndWriteData32,
-    MojoReadData32,
-    MojoBeginReadData32,
-    MojoEndReadData32,
-    MojoCreateSharedBuffer32,
-    MojoDuplicateBufferHandle32,
-    MojoMapBuffer32,
-    MojoUnmapBuffer,
-    MojoGetBufferInfo32,
-    MojoCreateTrap32,
-    MojoAddTrigger32,
-    MojoRemoveTrigger32,
-    MojoArmTrap32,
-    MojoWrapPlatformHandle32,
-    MojoUnwrapPlatformHandle32,
-    MojoWrapPlatformSharedMemoryRegion32,
-    MojoUnwrapPlatformSharedMemoryRegion32,
-    MojoCreateInvitation32,
-    MojoAttachMessagePipeToInvitation32,
-    MojoExtractMessagePipeFromInvitation32,
-    MojoSendInvitation32,
-    MojoAcceptInvitation32,
-    MojoSetQuota32,
-    MojoQueryQuota32,
-    MojoShutdown,
-    MojoSetDefaultProcessErrorHandler,
-};
-
 }  // extern "C"
 
-const MojoSystemThunks64* MojoEmbedderGetSystemThunks64() {
+const MojoSystemThunks* MojoEmbedderGetSystemThunks() {
   return &g_thunks;
 }
 
-const MojoSystemThunks32* MojoEmbedderGetSystemThunks32() {
-  return &g_thunks_32;
-}
-
-void MojoEmbedderSetSystemThunks(const MojoSystemThunks64* thunks) {
+void MojoEmbedderSetSystemThunks(const MojoSystemThunks* thunks) {
   // Assume embedders will always use matching versions of the Mojo Core and
   // public APIs.
   DCHECK_EQ(thunks->size, sizeof(g_thunks));
diff --git a/mojo/public/c/system/thunks.h b/mojo/public/c/system/thunks.h
index c7e3b14031..04e405282e 100644
--- a/mojo/public/c/system/thunks.h
+++ b/mojo/public/c/system/thunks.h
@@ -29,7 +29,7 @@
 //     (e.g. an optional "Options" structure as many functions here have).
 //
 #pragma pack(push, 8)
-struct MojoSystemThunks64 {
+struct MojoSystemThunks {
   uint32_t size;  // Should be set to sizeof(MojoSystemThunks).
 
   MojoResult (*Initialize)(const struct MojoInitializeOptions* options);
@@ -234,219 +234,13 @@ struct MojoSystemThunks64 {
       MojoDefaultProcessErrorHandler handler,
       const struct MojoSetDefaultProcessErrorHandlerOptions* options);
 };
-
-// Hacks: This is a copy of the ABI from before it was switched to 64-bit
-// MojoHandle values. It can be removed once the Chrome OS IME service is
-// longer consuming it.
-typedef uint32_t MojoHandle32;
-
-struct MojoSystemThunks {
-  uint32_t size;  // Should be set to sizeof(MojoSystemThunks32).
-
-  MojoResult (*Initialize)(const struct MojoInitializeOptions* options);
-
-  MojoTimeTicks (*GetTimeTicksNow)();
-
-  // Generic handle API.
-  MojoResult (*Close)(MojoHandle32 handle);
-  MojoResult (*QueryHandleSignalsState)(
-      MojoHandle32 handle,
-      struct MojoHandleSignalsState* signals_state);
-
-  // Message pipe API.
-  MojoResult (*CreateMessagePipe)(
-      const struct MojoCreateMessagePipeOptions* options,
-      MojoHandle32* message_pipe_handle0,
-      MojoHandle32* message_pipe_handle1);
-  MojoResult (*WriteMessage)(MojoHandle32 message_pipe_handle,
-                             MojoMessageHandle message_handle,
-                             const struct MojoWriteMessageOptions* options);
-  MojoResult (*ReadMessage)(MojoHandle32 message_pipe_handle,
-                            const struct MojoReadMessageOptions* options,
-                            MojoMessageHandle* message_handle);
-  MojoResult (*FuseMessagePipes)(
-      MojoHandle32 handle0,
-      MojoHandle32 handle1,
-      const struct MojoFuseMessagePipesOptions* options);
-
-  // Message object API.
-  MojoResult (*CreateMessage)(const struct MojoCreateMessageOptions* options,
-                              MojoMessageHandle* message);
-  MojoResult (*DestroyMessage)(MojoMessageHandle message);
-  MojoResult (*SerializeMessage)(
-      MojoMessageHandle message,
-      const struct MojoSerializeMessageOptions* options);
-  MojoResult (*AppendMessageData)(
-      MojoMessageHandle message,
-      uint32_t additional_payload_size,
-      const MojoHandle32* handles,
-      uint32_t num_handles,
-      const struct MojoAppendMessageDataOptions* options,
-      void** buffer,
-      uint32_t* buffer_size);
-  MojoResult (*GetMessageData)(MojoMessageHandle message,
-                               const struct MojoGetMessageDataOptions* options,
-                               void** buffer,
-                               uint32_t* num_bytes,
-                               MojoHandle32* handles,
-                               uint32_t* num_handles);
-  MojoResult (*SetMessageContext)(
-      MojoMessageHandle message,
-      uintptr_t context,
-      MojoMessageContextSerializer serializer,
-      MojoMessageContextDestructor destructor,
-      const struct MojoSetMessageContextOptions* options);
-  MojoResult (*GetMessageContext)(
-      MojoMessageHandle message,
-      const struct MojoGetMessageContextOptions* options,
-      uintptr_t* context);
-  MojoResult (*NotifyBadMessage)(
-      MojoMessageHandle message,
-      const char* error,
-      uint32_t error_num_bytes,
-      const struct MojoNotifyBadMessageOptions* options);
-
-  // Data pipe API.
-  MojoResult (*CreateDataPipe)(const struct MojoCreateDataPipeOptions* options,
-                               MojoHandle32* data_pipe_producer_handle,
-                               MojoHandle32* data_pipe_consumer_handle);
-  MojoResult (*WriteData)(MojoHandle32 data_pipe_producer_handle,
-                          const void* elements,
-                          uint32_t* num_elements,
-                          const struct MojoWriteDataOptions* options);
-  MojoResult (*BeginWriteData)(MojoHandle32 data_pipe_producer_handle,
-                               const struct MojoBeginWriteDataOptions* options,
-                               void** buffer,
-                               uint32_t* buffer_num_elements);
-  MojoResult (*EndWriteData)(MojoHandle32 data_pipe_producer_handle,
-                             uint32_t num_elements_written,
-                             const struct MojoEndWriteDataOptions* options);
-  MojoResult (*ReadData)(MojoHandle32 data_pipe_consumer_handle,
-                         const struct MojoReadDataOptions* options,
-                         void* elements,
-                         uint32_t* num_elements);
-  MojoResult (*BeginReadData)(MojoHandle32 data_pipe_consumer_handle,
-                              const struct MojoBeginReadDataOptions* options,
-                              const void** buffer,
-                              uint32_t* buffer_num_elements);
-  MojoResult (*EndReadData)(MojoHandle32 data_pipe_consumer_handle,
-                            uint32_t num_elements_read,
-                            const struct MojoEndReadDataOptions* options);
-
-  // Shared buffer API.
-  MojoResult (*CreateSharedBuffer)(
-      uint64_t num_bytes,
-      const struct MojoCreateSharedBufferOptions* options,
-      MojoHandle32* shared_buffer_handle);
-  MojoResult (*DuplicateBufferHandle)(
-      MojoHandle32 buffer_handle,
-      const struct MojoDuplicateBufferHandleOptions* options,
-      MojoHandle32* new_buffer_handle);
-  MojoResult (*MapBuffer)(MojoHandle32 buffer_handle,
-                          uint64_t offset,
-                          uint64_t num_bytes,
-                          const struct MojoMapBufferOptions* options,
-                          void** buffer);
-  MojoResult (*UnmapBuffer)(void* buffer);
-  MojoResult (*GetBufferInfo)(MojoHandle32 buffer_handle,
-                              const struct MojoGetBufferInfoOptions* options,
-                              struct MojoSharedBufferInfo* info);
-
-  // Traps API.
-  MojoResult (*CreateTrap)(MojoTrapEventHandler handler,
-                           const struct MojoCreateTrapOptions* options,
-                           MojoHandle32* trap_handle);
-  MojoResult (*AddTrigger)(MojoHandle32 trap_handle,
-                           MojoHandle32 handle,
-                           MojoHandleSignals signals,
-                           MojoTriggerCondition condition,
-                           uintptr_t context,
-                           const struct MojoAddTriggerOptions* options);
-  MojoResult (*RemoveTrigger)(MojoHandle32 trap_handle,
-                              uintptr_t context,
-                              const struct MojoRemoveTriggerOptions* options);
-  MojoResult (*ArmTrap)(MojoHandle32 trap_handle,
-                        const struct MojoArmTrapOptions* options,
-                        uint32_t* num_blocking_events,
-                        struct MojoTrapEvent* blocking_events);
-
-  // Platform handle API.
-  MojoResult (*WrapPlatformHandle)(
-      const struct MojoPlatformHandle* platform_handle,
-      const struct MojoWrapPlatformHandleOptions* options,
-      MojoHandle32* mojo_handle);
-  MojoResult (*UnwrapPlatformHandle)(
-      MojoHandle32 mojo_handle,
-      const struct MojoUnwrapPlatformHandleOptions* options,
-      struct MojoPlatformHandle* platform_handle);
-  MojoResult (*WrapPlatformSharedMemoryRegion)(
-      const struct MojoPlatformHandle* platform_handles,
-      uint32_t num_platform_handles,
-      uint64_t num_bytes,
-      const struct MojoSharedBufferGuid* guid,
-      MojoPlatformSharedMemoryRegionAccessMode access_mode,
-      const struct MojoWrapPlatformSharedMemoryRegionOptions* options,
-      MojoHandle32* mojo_handle);
-  MojoResult (*UnwrapPlatformSharedMemoryRegion)(
-      MojoHandle32 mojo_handle,
-      const struct MojoUnwrapPlatformSharedMemoryRegionOptions* options,
-      struct MojoPlatformHandle* platform_handles,
-      uint32_t* num_platform_handles,
-      uint64_t* num_bytes,
-      struct MojoSharedBufferGuid* guid,
-      MojoPlatformSharedMemoryRegionAccessMode* access_mode);
-
-  // Invitation API.
-  MojoResult (*CreateInvitation)(
-      const struct MojoCreateInvitationOptions* options,
-      MojoHandle32* invitation_handle);
-  MojoResult (*AttachMessagePipeToInvitation)(
-      MojoHandle32 invitation_handle,
-      const void* name,
-      uint32_t name_num_bytes,
-      const struct MojoAttachMessagePipeToInvitationOptions* options,
-      MojoHandle32* message_pipe_handle);
-  MojoResult (*ExtractMessagePipeFromInvitation)(
-      MojoHandle32 invitation_handle,
-      const void* name,
-      uint32_t name_num_bytes,
-      const struct MojoExtractMessagePipeFromInvitationOptions* options,
-      MojoHandle32* message_pipe_handle);
-  MojoResult (*SendInvitation)(
-      MojoHandle32 invitation_handle,
-      const struct MojoPlatformProcessHandle* process_handle,
-      const struct MojoInvitationTransportEndpoint* transport_endpoint,
-      MojoProcessErrorHandler error_handler,
-      uintptr_t error_handler_context,
-      const struct MojoSendInvitationOptions* options);
-  MojoResult (*AcceptInvitation)(
-      const struct MojoInvitationTransportEndpoint* transport_endpoint,
-      const struct MojoAcceptInvitationOptions* options,
-      MojoHandle32* invitation_handle);
-  MojoResult (*SetQuota)(MojoHandle32 handle,
-                         MojoQuotaType type,
-                         uint64_t limit,
-                         const struct MojoSetQuotaOptions* options);
-  MojoResult (*QueryQuota)(MojoHandle32 handle,
-                           MojoQuotaType type,
-                           const struct MojoQueryQuotaOptions* options,
-                           uint64_t* limit,
-                           uint64_t* usage);
-  MojoResult (*Shutdown)(const struct MojoShutdownOptions* options);
-  MojoResult (*SetDefaultProcessErrorHandler)(
-      MojoDefaultProcessErrorHandler handler,
-      const struct MojoSetDefaultProcessErrorHandlerOptions* options);
-};
 #pragma pack(pop)
 
-typedef struct MojoSystemThunks MojoSystemThunks32;
-
-MOJO_SYSTEM_EXPORT const struct MojoSystemThunks64*
-MojoEmbedderGetSystemThunks64();
-
-MOJO_SYSTEM_EXPORT const MojoSystemThunks32* MojoEmbedderGetSystemThunks32();
+MOJO_SYSTEM_EXPORT const struct MojoSystemThunks* MojoEmbedderGetSystemThunks();
 
+// A function for setting up the embedder's own system thunks. This should only
+// be called by Mojo embedder code.
 MOJO_SYSTEM_EXPORT void MojoEmbedderSetSystemThunks(
-    const struct MojoSystemThunks64* system_thunks);
+    const struct MojoSystemThunks* system_thunks);
 
 #endif  // MOJO_PUBLIC_C_SYSTEM_THUNKS_H_
diff --git a/mojo/public/c/system/types.h b/mojo/public/c/system/types.h
index 0e1d16ad76..56ffd78991 100644
--- a/mojo/public/c/system/types.h
+++ b/mojo/public/c/system/types.h
@@ -22,7 +22,7 @@ typedef int64_t MojoTimeTicks;
 // |MojoHandle|: Handles to Mojo objects.
 //   |MOJO_HANDLE_INVALID| - A value that is never a valid handle.
 
-typedef uint64_t MojoHandle;
+typedef uint32_t MojoHandle;
 
 #ifdef __cplusplus
 const MojoHandle MOJO_HANDLE_INVALID = 0;
diff --git a/mojo/public/java/system/core_impl.cc b/mojo/public/java/system/core_impl.cc
index 203323f5fd..0e00fbb0b4 100644
--- a/mojo/public/java/system/core_impl.cc
+++ b/mojo/public/java/system/core_impl.cc
@@ -82,19 +82,19 @@ static ScopedJavaLocalRef<jobject> JNI_CoreImpl_CreateSharedBuffer(
   }
   MojoHandle handle;
   MojoResult result = MojoCreateSharedBuffer(num_bytes, options, &handle);
-  return Java_CoreImpl_newResultAndLong(env, result, handle);
+  return Java_CoreImpl_newResultAndInteger(env, result, handle);
 }
 
 static jint JNI_CoreImpl_Close(JNIEnv* env,
                                const JavaParamRef<jobject>& jcaller,
-                               jlong mojo_handle) {
+                               jint mojo_handle) {
   return MojoClose(mojo_handle);
 }
 
 static jint JNI_CoreImpl_QueryHandleSignalsState(
     JNIEnv* env,
     const JavaParamRef<jobject>& jcaller,
-    jlong mojo_handle,
+    jint mojo_handle,
     const JavaParamRef<jobject>& buffer) {
   MojoHandleSignalsState* signals_state =
       static_cast<MojoHandleSignalsState*>(env->GetDirectBufferAddress(buffer));
@@ -107,7 +107,7 @@ static jint JNI_CoreImpl_QueryHandleSignalsState(
 static jint JNI_CoreImpl_WriteMessage(
     JNIEnv* env,
     const JavaParamRef<jobject>& jcaller,
-    jlong mojo_handle,
+    jint mojo_handle,
     const JavaParamRef<jobject>& bytes,
     jint num_bytes,
     const JavaParamRef<jobject>& handles_buffer,
@@ -125,8 +125,7 @@ static jint JNI_CoreImpl_WriteMessage(
   if (handles_buffer) {
     handles =
         static_cast<MojoHandle*>(env->GetDirectBufferAddress(handles_buffer));
-    num_handles =
-        env->GetDirectBufferCapacity(handles_buffer) / sizeof(MojoHandle);
+    num_handles = env->GetDirectBufferCapacity(handles_buffer) / 4;
   }
   // Java code will handle invalidating handles if the write succeeded.
   return WriteMessageRaw(
@@ -137,7 +136,7 @@ static jint JNI_CoreImpl_WriteMessage(
 static ScopedJavaLocalRef<jobject> JNI_CoreImpl_ReadMessage(
     JNIEnv* env,
     const JavaParamRef<jobject>& jcaller,
-    jlong mojo_handle,
+    jint mojo_handle,
     jint flags) {
   ScopedMessageHandle message;
   MojoResult result =
@@ -171,14 +170,14 @@ static ScopedJavaLocalRef<jobject> JNI_CoreImpl_ReadMessage(
       env, result,
       base::android::ToJavaByteArray(env, static_cast<uint8_t*>(buffer),
                                      num_bytes),
-      base::android::ToJavaLongArray(
-          env, reinterpret_cast<jlong*>(handles.data()), num_handles));
+      base::android::ToJavaIntArray(
+          env, reinterpret_cast<jint*>(handles.data()), num_handles));
 }
 
 static ScopedJavaLocalRef<jobject> JNI_CoreImpl_ReadData(
     JNIEnv* env,
     const JavaParamRef<jobject>& jcaller,
-    jlong mojo_handle,
+    jint mojo_handle,
     const JavaParamRef<jobject>& elements,
     jint elements_capacity,
     jint flags) {
@@ -201,7 +200,7 @@ static ScopedJavaLocalRef<jobject> JNI_CoreImpl_ReadData(
 static ScopedJavaLocalRef<jobject> JNI_CoreImpl_BeginReadData(
     JNIEnv* env,
     const JavaParamRef<jobject>& jcaller,
-    jlong mojo_handle,
+    jint mojo_handle,
     jint num_bytes,
     jint flags) {
   void const* buffer = 0;
@@ -224,7 +223,7 @@ static ScopedJavaLocalRef<jobject> JNI_CoreImpl_BeginReadData(
 
 static jint JNI_CoreImpl_EndReadData(JNIEnv* env,
                                      const JavaParamRef<jobject>& jcaller,
-                                     jlong mojo_handle,
+                                     jint mojo_handle,
                                      jint num_bytes_read) {
   return MojoEndReadData(mojo_handle, num_bytes_read, nullptr);
 }
@@ -232,7 +231,7 @@ static jint JNI_CoreImpl_EndReadData(JNIEnv* env,
 static ScopedJavaLocalRef<jobject> JNI_CoreImpl_WriteData(
     JNIEnv* env,
     const JavaParamRef<jobject>& jcaller,
-    jlong mojo_handle,
+    jint mojo_handle,
     const JavaParamRef<jobject>& elements,
     jint limit,
     jint flags) {
@@ -253,7 +252,7 @@ static ScopedJavaLocalRef<jobject> JNI_CoreImpl_WriteData(
 static ScopedJavaLocalRef<jobject> JNI_CoreImpl_BeginWriteData(
     JNIEnv* env,
     const JavaParamRef<jobject>& jcaller,
-    jlong mojo_handle,
+    jint mojo_handle,
     jint num_bytes,
     jint flags) {
   void* buffer = 0;
@@ -275,7 +274,7 @@ static ScopedJavaLocalRef<jobject> JNI_CoreImpl_BeginWriteData(
 
 static jint JNI_CoreImpl_EndWriteData(JNIEnv* env,
                                       const JavaParamRef<jobject>& jcaller,
-                                      jlong mojo_handle,
+                                      jint mojo_handle,
                                       jint num_bytes_written) {
   return MojoEndWriteData(mojo_handle, num_bytes_written, nullptr);
 }
@@ -283,7 +282,7 @@ static jint JNI_CoreImpl_EndWriteData(JNIEnv* env,
 static ScopedJavaLocalRef<jobject> JNI_CoreImpl_Duplicate(
     JNIEnv* env,
     const JavaParamRef<jobject>& jcaller,
-    jlong mojo_handle,
+    jint mojo_handle,
     const JavaParamRef<jobject>& options_buffer) {
   const MojoDuplicateBufferHandleOptions* options = 0;
   if (options_buffer) {
@@ -297,13 +296,13 @@ static ScopedJavaLocalRef<jobject> JNI_CoreImpl_Duplicate(
   }
   MojoHandle handle;
   MojoResult result = MojoDuplicateBufferHandle(mojo_handle, options, &handle);
-  return Java_CoreImpl_newResultAndLong(env, result, handle);
+  return Java_CoreImpl_newResultAndInteger(env, result, handle);
 }
 
 static ScopedJavaLocalRef<jobject> JNI_CoreImpl_Map(
     JNIEnv* env,
     const JavaParamRef<jobject>& jcaller,
-    jlong mojo_handle,
+    jint mojo_handle,
     jlong offset,
     jlong num_bytes,
     jint flags) {
@@ -344,7 +343,7 @@ static jint JNI_CoreImpl_GetNativeBufferOffset(
   return alignment - offset;
 }
 
-static jlong JNI_CoreImpl_CreatePlatformHandle(JNIEnv* env, jint fd) {
+static jint JNI_CoreImpl_CreatePlatformHandle(JNIEnv* env, jint fd) {
   mojo::ScopedHandle handle =
       mojo::WrapPlatformHandle(mojo::PlatformHandle(base::ScopedFD(fd)));
   return handle.release().value();
diff --git a/mojo/public/java/system/javatests/src/org/chromium/mojo/HandleMock.java b/mojo/public/java/system/javatests/src/org/chromium/mojo/HandleMock.java
index c0e48abc56..715e1e54b4 100644
--- a/mojo/public/java/system/javatests/src/org/chromium/mojo/HandleMock.java
+++ b/mojo/public/java/system/javatests/src/org/chromium/mojo/HandleMock.java
@@ -77,7 +77,7 @@ public class HandleMock implements UntypedHandle, MessagePipeHandle, ProducerHan
      * @see Handle#releaseNativeHandle()
      */
     @Override
-    public long releaseNativeHandle() {
+    public int releaseNativeHandle() {
         return 0;
     }
 
diff --git a/mojo/public/java/system/javatests/src/org/chromium/mojo/bindings/BindingsVersioningTest.java b/mojo/public/java/system/javatests/src/org/chromium/mojo/bindings/BindingsVersioningTest.java
index 61200836b9..762da41bc1 100644
--- a/mojo/public/java/system/javatests/src/org/chromium/mojo/bindings/BindingsVersioningTest.java
+++ b/mojo/public/java/system/javatests/src/org/chromium/mojo/bindings/BindingsVersioningTest.java
@@ -119,7 +119,7 @@ public class BindingsVersioningTest {
         }
 
         {
-            long expectedHandle = 42;
+            int expectedHandle = 42;
             MultiVersionStructV7 v7 = new MultiVersionStructV7();
             v7.fInt32 = 123;
             v7.fRect = newRect(5);
@@ -198,7 +198,7 @@ public class BindingsVersioningTest {
         }
 
         {
-            long expectedHandle = 42;
+            int expectedHandle = 42;
             MultiVersionStructV7 expected = new MultiVersionStructV7();
             expected.fInt32 = 123;
             expected.fRect = newRect(5);
diff --git a/mojo/public/java/system/src/org/chromium/mojo/system/Core.java b/mojo/public/java/system/src/org/chromium/mojo/system/Core.java
index f059ef3ec4..7b5684b35e 100644
--- a/mojo/public/java/system/src/org/chromium/mojo/system/Core.java
+++ b/mojo/public/java/system/src/org/chromium/mojo/system/Core.java
@@ -166,7 +166,7 @@ public interface Core {
      *
      * @return a new {@link UntypedHandle} representing the native handle.
      */
-    public UntypedHandle acquireNativeHandle(long handle);
+    public UntypedHandle acquireNativeHandle(int handle);
 
     /**
      * Creates and acquires a handle from the native side. The handle will be owned by the returned
diff --git a/mojo/public/java/system/src/org/chromium/mojo/system/Handle.java b/mojo/public/java/system/src/org/chromium/mojo/system/Handle.java
index 558ba5c66b..903f36d677 100644
--- a/mojo/public/java/system/src/org/chromium/mojo/system/Handle.java
+++ b/mojo/public/java/system/src/org/chromium/mojo/system/Handle.java
@@ -56,5 +56,6 @@ public interface Handle extends Closeable {
      * Releases the native handle backed by this {@link Handle}. The caller owns the handle and must
      * close it.
      */
-    public long releaseNativeHandle();
+    public int releaseNativeHandle();
+
 }
diff --git a/mojo/public/java/system/src/org/chromium/mojo/system/InvalidHandle.java b/mojo/public/java/system/src/org/chromium/mojo/system/InvalidHandle.java
index 2ea439786b..5292605588 100644
--- a/mojo/public/java/system/src/org/chromium/mojo/system/InvalidHandle.java
+++ b/mojo/public/java/system/src/org/chromium/mojo/system/InvalidHandle.java
@@ -80,7 +80,7 @@ public class InvalidHandle implements UntypedHandle, MessagePipeHandle, Consumer
      * @see Handle#releaseNativeHandle()
      */
     @Override
-    public long releaseNativeHandle() {
+    public int releaseNativeHandle() {
         return 0;
     }
 
diff --git a/mojo/public/java/system/src/org/chromium/mojo/system/MessagePipeHandle.java b/mojo/public/java/system/src/org/chromium/mojo/system/MessagePipeHandle.java
index f151cf295a..baa5a9549e 100644
--- a/mojo/public/java/system/src/org/chromium/mojo/system/MessagePipeHandle.java
+++ b/mojo/public/java/system/src/org/chromium/mojo/system/MessagePipeHandle.java
@@ -125,7 +125,7 @@ public interface MessagePipeHandle extends Handle {
         /**
          * If a message was read, this contains the raw handle values.
          */
-        public long[] mRawHandles;
+        public int[] mRawHandles;
         /**
          * If a message was read, the handles contained in the message, undefined otherwise.
          */
diff --git a/mojo/public/java/system/src/org/chromium/mojo/system/impl/CoreImpl.java b/mojo/public/java/system/src/org/chromium/mojo/system/impl/CoreImpl.java
index 42f79ac2bb..757636a68a 100644
--- a/mojo/public/java/system/src/org/chromium/mojo/system/impl/CoreImpl.java
+++ b/mojo/public/java/system/src/org/chromium/mojo/system/impl/CoreImpl.java
@@ -47,7 +47,7 @@ public class CoreImpl implements Core {
     /**
      * the size of a handle, in bytes.
      */
-    private static final int HANDLE_SIZE = 8;
+    private static final int HANDLE_SIZE = 4;
 
     /**
      * the size of a flag, in bytes.
@@ -57,7 +57,7 @@ public class CoreImpl implements Core {
     /**
      * The mojo handle for an invalid handle.
      */
-    static final long INVALID_HANDLE = 0;
+    static final int INVALID_HANDLE = 0;
 
     private static class LazyHolder { private static final Core INSTANCE = new CoreImpl(); }
 
@@ -106,7 +106,7 @@ public class CoreImpl implements Core {
             optionsBuffer.putInt(0, 8);
             optionsBuffer.putInt(4, options.getFlags().getFlags());
         }
-        ResultAnd<RawHandlePair> result =
+        ResultAnd<IntegerPair> result =
                 CoreImplJni.get().createMessagePipe(CoreImpl.this, optionsBuffer);
         if (result.getMojoResult() != MojoResult.OK) {
             throw new MojoException(result.getMojoResult());
@@ -129,7 +129,7 @@ public class CoreImpl implements Core {
             optionsBuffer.putInt(8, options.getElementNumBytes());
             optionsBuffer.putInt(12, options.getCapacityNumBytes());
         }
-        ResultAnd<RawHandlePair> result =
+        ResultAnd<IntegerPair> result =
                 CoreImplJni.get().createDataPipe(CoreImpl.this, optionsBuffer);
         if (result.getMojoResult() != MojoResult.OK) {
             throw new MojoException(result.getMojoResult());
@@ -151,7 +151,7 @@ public class CoreImpl implements Core {
             optionsBuffer.putInt(0, 8);
             optionsBuffer.putInt(4, options.getFlags().getFlags());
         }
-        ResultAnd<Long> result =
+        ResultAnd<Integer> result =
                 CoreImplJni.get().createSharedBuffer(CoreImpl.this, optionsBuffer, numBytes);
         if (result.getMojoResult() != MojoResult.OK) {
             throw new MojoException(result.getMojoResult());
@@ -160,10 +160,10 @@ public class CoreImpl implements Core {
     }
 
     /**
-     * @see org.chromium.mojo.system.Core#acquireNativeHandle(long)
+     * @see org.chromium.mojo.system.Core#acquireNativeHandle(int)
      */
     @Override
-    public UntypedHandle acquireNativeHandle(long handle) {
+    public UntypedHandle acquireNativeHandle(int handle) {
         return new UntypedHandleImpl(this, handle);
     }
 
@@ -172,7 +172,7 @@ public class CoreImpl implements Core {
      */
     @Override
     public UntypedHandle wrapFileDescriptor(ParcelFileDescriptor fd) {
-        long releasedHandle = CoreImplJni.get().createPlatformHandle(fd.detachFd());
+        int releasedHandle = CoreImplJni.get().createPlatformHandle(fd.detachFd());
         return acquireNativeHandle(releasedHandle);
     }
 
@@ -212,18 +212,18 @@ public class CoreImpl implements Core {
         mCurrentRunLoop.remove();
     }
 
-    int closeWithResult(long mojoHandle) {
+    int closeWithResult(int mojoHandle) {
         return CoreImplJni.get().close(CoreImpl.this, mojoHandle);
     }
 
-    void close(long mojoHandle) {
+    void close(int mojoHandle) {
         int mojoResult = CoreImplJni.get().close(CoreImpl.this, mojoHandle);
         if (mojoResult != MojoResult.OK) {
             throw new MojoException(mojoResult);
         }
     }
 
-    HandleSignalsState queryHandleSignalsState(long mojoHandle) {
+    HandleSignalsState queryHandleSignalsState(int mojoHandle) {
         ByteBuffer buffer = allocateDirectBuffer(8);
         int result = CoreImplJni.get().queryHandleSignalsState(CoreImpl.this, mojoHandle, buffer);
         if (result != MojoResult.OK) throw new MojoException(result);
@@ -240,7 +240,7 @@ public class CoreImpl implements Core {
         if (handles != null && !handles.isEmpty()) {
             handlesBuffer = allocateDirectBuffer(handles.size() * HANDLE_SIZE);
             for (Handle handle : handles) {
-                handlesBuffer.putLong(getMojoHandle(handle));
+                handlesBuffer.putInt(getMojoHandle(handle));
             }
             handlesBuffer.position(0);
         }
@@ -272,10 +272,10 @@ public class CoreImpl implements Core {
         }
 
         MessagePipeHandle.ReadMessageResult readResult = result.getValue();
-        long[] rawHandles = readResult.mRawHandles;
+        int[] rawHandles = readResult.mRawHandles;
         if (rawHandles != null && rawHandles.length != 0) {
             readResult.mHandles = new ArrayList<UntypedHandle>(rawHandles.length);
-            for (long rawHandle : rawHandles) {
+            for (int rawHandle : rawHandles) {
                 readResult.mHandles.add(new UntypedHandleImpl(this, rawHandle));
             }
         } else {
@@ -385,7 +385,7 @@ public class CoreImpl implements Core {
             optionsBuffer.putInt(0, 8);
             optionsBuffer.putInt(4, options.getFlags().getFlags());
         }
-        ResultAnd<Long> result =
+        ResultAnd<Integer> result =
                 CoreImplJni.get().duplicate(CoreImpl.this, handle.getMojoHandle(), optionsBuffer);
         if (result.getMojoResult() != MojoResult.OK) {
             throw new MojoException(result.getMojoResult());
@@ -418,7 +418,7 @@ public class CoreImpl implements Core {
     /**
      * @return the mojo handle associated to the given handle, considering invalid handles.
      */
-    private long getMojoHandle(Handle handle) {
+    private int getMojoHandle(Handle handle) {
         if (handle.isValid()) {
             return ((HandleBase) handle).getMojoHandle();
         }
@@ -459,18 +459,18 @@ public class CoreImpl implements Core {
     }
 
     /**
-     * Trivial alias for Pair<Long, Long>. This is needed because our jni generator is unable
+     * Trivial alias for Pair<Integer, Integer>. This is needed because our jni generator is unable
      * to handle class that contains space.
      */
-    static final class RawHandlePair extends Pair<Long, Long> {
-        public RawHandlePair(Long first, Long second) {
+    static final class IntegerPair extends Pair<Integer, Integer> {
+        public IntegerPair(Integer first, Integer second) {
             super(first, second);
         }
     }
 
     @CalledByNative
     private static ResultAnd<MessagePipeHandle.ReadMessageResult> newReadMessageResult(
-            int mojoResult, byte[] data, long[] rawHandles) {
+            int mojoResult, byte[] data, int[] rawHandles) {
         MessagePipeHandle.ReadMessageResult result = new MessagePipeHandle.ReadMessageResult();
         if (mojoResult == MojoResult.OK) {
             result.mData = data;
@@ -485,45 +485,39 @@ public class CoreImpl implements Core {
     }
 
     @CalledByNative
-    private static ResultAnd<Long> newResultAndLong(int mojoResult, long value) {
-        return new ResultAnd<>(mojoResult, value);
-    }
-
-    @CalledByNative
-    private static ResultAnd<RawHandlePair> newNativeCreationResult(
-            int mojoResult, long mojoHandle1, long mojoHandle2) {
-        return new ResultAnd<>(mojoResult, new RawHandlePair(mojoHandle1, mojoHandle2));
+    private static ResultAnd<IntegerPair> newNativeCreationResult(
+            int mojoResult, int mojoHandle1, int mojoHandle2) {
+        return new ResultAnd<>(mojoResult, new IntegerPair(mojoHandle1, mojoHandle2));
     }
 
     @NativeMethods
     interface Natives {
         long getTimeTicksNow(CoreImpl caller);
-        ResultAnd<RawHandlePair> createMessagePipe(CoreImpl caller, ByteBuffer optionsBuffer);
-        ResultAnd<RawHandlePair> createDataPipe(CoreImpl caller, ByteBuffer optionsBuffer);
-        ResultAnd<Long> createSharedBuffer(
+        ResultAnd<IntegerPair> createMessagePipe(CoreImpl caller, ByteBuffer optionsBuffer);
+        ResultAnd<IntegerPair> createDataPipe(CoreImpl caller, ByteBuffer optionsBuffer);
+        ResultAnd<Integer> createSharedBuffer(
                 CoreImpl caller, ByteBuffer optionsBuffer, long numBytes);
-        int close(CoreImpl caller, long mojoHandle);
-        int queryHandleSignalsState(
-                CoreImpl caller, long mojoHandle, ByteBuffer signalsStateBuffer);
-        int writeMessage(CoreImpl caller, long mojoHandle, ByteBuffer bytes, int numBytes,
+        int close(CoreImpl caller, int mojoHandle);
+        int queryHandleSignalsState(CoreImpl caller, int mojoHandle, ByteBuffer signalsStateBuffer);
+        int writeMessage(CoreImpl caller, int mojoHandle, ByteBuffer bytes, int numBytes,
                 ByteBuffer handlesBuffer, int flags);
         ResultAnd<MessagePipeHandle.ReadMessageResult> readMessage(
-                CoreImpl caller, long mojoHandle, int flags);
+                CoreImpl caller, int mojoHandle, int flags);
         ResultAnd<Integer> readData(
-                CoreImpl caller, long mojoHandle, ByteBuffer elements, int elementsSize, int flags);
+                CoreImpl caller, int mojoHandle, ByteBuffer elements, int elementsSize, int flags);
         ResultAnd<ByteBuffer> beginReadData(
-                CoreImpl caller, long mojoHandle, int numBytes, int flags);
-        int endReadData(CoreImpl caller, long mojoHandle, int numBytesRead);
+                CoreImpl caller, int mojoHandle, int numBytes, int flags);
+        int endReadData(CoreImpl caller, int mojoHandle, int numBytesRead);
         ResultAnd<Integer> writeData(
-                CoreImpl caller, long mojoHandle, ByteBuffer elements, int limit, int flags);
+                CoreImpl caller, int mojoHandle, ByteBuffer elements, int limit, int flags);
         ResultAnd<ByteBuffer> beginWriteData(
-                CoreImpl caller, long mojoHandle, int numBytes, int flags);
-        int endWriteData(CoreImpl caller, long mojoHandle, int numBytesWritten);
-        ResultAnd<Long> duplicate(CoreImpl caller, long mojoHandle, ByteBuffer optionsBuffer);
+                CoreImpl caller, int mojoHandle, int numBytes, int flags);
+        int endWriteData(CoreImpl caller, int mojoHandle, int numBytesWritten);
+        ResultAnd<Integer> duplicate(CoreImpl caller, int mojoHandle, ByteBuffer optionsBuffer);
         ResultAnd<ByteBuffer> map(
-                CoreImpl caller, long mojoHandle, long offset, long numBytes, int flags);
+                CoreImpl caller, int mojoHandle, long offset, long numBytes, int flags);
         int unmap(CoreImpl caller, ByteBuffer buffer);
         int getNativeBufferOffset(CoreImpl caller, ByteBuffer buffer, int alignment);
-        long createPlatformHandle(int fd);
+        int createPlatformHandle(int fd);
     }
 }
diff --git a/mojo/public/java/system/src/org/chromium/mojo/system/impl/DataPipeConsumerHandleImpl.java b/mojo/public/java/system/src/org/chromium/mojo/system/impl/DataPipeConsumerHandleImpl.java
index 587c14bbee..820a6f94f8 100644
--- a/mojo/public/java/system/src/org/chromium/mojo/system/impl/DataPipeConsumerHandleImpl.java
+++ b/mojo/public/java/system/src/org/chromium/mojo/system/impl/DataPipeConsumerHandleImpl.java
@@ -15,9 +15,9 @@ import java.nio.ByteBuffer;
  */
 class DataPipeConsumerHandleImpl extends HandleBase implements ConsumerHandle {
     /**
-     * @see HandleBase#HandleBase(CoreImpl, long)
+     * @see HandleBase#HandleBase(CoreImpl, int)
      */
-    DataPipeConsumerHandleImpl(CoreImpl core, long mojoHandle) {
+    DataPipeConsumerHandleImpl(CoreImpl core, int mojoHandle) {
         super(core, mojoHandle);
     }
 
diff --git a/mojo/public/java/system/src/org/chromium/mojo/system/impl/DataPipeProducerHandleImpl.java b/mojo/public/java/system/src/org/chromium/mojo/system/impl/DataPipeProducerHandleImpl.java
index 28d7a89ae5..cf4eebe056 100644
--- a/mojo/public/java/system/src/org/chromium/mojo/system/impl/DataPipeProducerHandleImpl.java
+++ b/mojo/public/java/system/src/org/chromium/mojo/system/impl/DataPipeProducerHandleImpl.java
@@ -15,9 +15,9 @@ import java.nio.ByteBuffer;
  */
 class DataPipeProducerHandleImpl extends HandleBase implements ProducerHandle {
     /**
-     * @see HandleBase#HandleBase(CoreImpl, long)
+     * @see HandleBase#HandleBase(CoreImpl, int)
      */
-    DataPipeProducerHandleImpl(CoreImpl core, long mojoHandle) {
+    DataPipeProducerHandleImpl(CoreImpl core, int mojoHandle) {
         super(core, mojoHandle);
     }
 
diff --git a/mojo/public/java/system/src/org/chromium/mojo/system/impl/HandleBase.java b/mojo/public/java/system/src/org/chromium/mojo/system/impl/HandleBase.java
index 5e7f787ac2..9b7f5de960 100644
--- a/mojo/public/java/system/src/org/chromium/mojo/system/impl/HandleBase.java
+++ b/mojo/public/java/system/src/org/chromium/mojo/system/impl/HandleBase.java
@@ -19,7 +19,7 @@ abstract class HandleBase implements Handle {
     /**
      * The pointer to the scoped handle owned by this object.
      */
-    private long mMojoHandle;
+    private int mMojoHandle;
 
     /**
      * The core implementation. Will be used to delegate all behavior.
@@ -29,7 +29,7 @@ abstract class HandleBase implements Handle {
     /**
      * Base constructor. Takes ownership of the passed handle.
      */
-    HandleBase(CoreImpl core, long mojoHandle) {
+    HandleBase(CoreImpl core, int mojoHandle) {
         mCore = core;
         mMojoHandle = mojoHandle;
     }
@@ -41,7 +41,7 @@ abstract class HandleBase implements Handle {
     protected HandleBase(HandleBase other) {
         mCore = other.mCore;
         HandleBase otherAsHandleImpl = other;
-        long mojoHandle = otherAsHandleImpl.mMojoHandle;
+        int mojoHandle = otherAsHandleImpl.mMojoHandle;
         otherAsHandleImpl.mMojoHandle = CoreImpl.INVALID_HANDLE;
         mMojoHandle = mojoHandle;
     }
@@ -53,7 +53,7 @@ abstract class HandleBase implements Handle {
     public void close() {
         if (mMojoHandle != CoreImpl.INVALID_HANDLE) {
             // After a close, the handle is invalid whether the close succeed or not.
-            long handle = mMojoHandle;
+            int handle = mMojoHandle;
             mMojoHandle = CoreImpl.INVALID_HANDLE;
             mCore.close(handle);
         }
@@ -95,8 +95,8 @@ abstract class HandleBase implements Handle {
      * @see Handle#releaseNativeHandle()
      */
     @Override
-    public long releaseNativeHandle() {
-        long result = mMojoHandle;
+    public int releaseNativeHandle() {
+        int result = mMojoHandle;
         mMojoHandle = CoreImpl.INVALID_HANDLE;
         return result;
     }
@@ -106,7 +106,7 @@ abstract class HandleBase implements Handle {
      *
      * @return the native scoped handle.
      */
-    long getMojoHandle() {
+    int getMojoHandle() {
         return mMojoHandle;
     }
 
diff --git a/mojo/public/java/system/src/org/chromium/mojo/system/impl/MessagePipeHandleImpl.java b/mojo/public/java/system/src/org/chromium/mojo/system/impl/MessagePipeHandleImpl.java
index db6a5b3b08..a2dd75d012 100644
--- a/mojo/public/java/system/src/org/chromium/mojo/system/impl/MessagePipeHandleImpl.java
+++ b/mojo/public/java/system/src/org/chromium/mojo/system/impl/MessagePipeHandleImpl.java
@@ -16,9 +16,9 @@ import java.util.List;
  */
 class MessagePipeHandleImpl extends HandleBase implements MessagePipeHandle {
     /**
-     * @see HandleBase#HandleBase(CoreImpl, long)
+     * @see HandleBase#HandleBase(CoreImpl, int)
      */
-    MessagePipeHandleImpl(CoreImpl core, long mojoHandle) {
+    MessagePipeHandleImpl(CoreImpl core, int mojoHandle) {
         super(core, mojoHandle);
     }
 
diff --git a/mojo/public/java/system/src/org/chromium/mojo/system/impl/SharedBufferHandleImpl.java b/mojo/public/java/system/src/org/chromium/mojo/system/impl/SharedBufferHandleImpl.java
index 560ed6ce31..cd28a48174 100644
--- a/mojo/public/java/system/src/org/chromium/mojo/system/impl/SharedBufferHandleImpl.java
+++ b/mojo/public/java/system/src/org/chromium/mojo/system/impl/SharedBufferHandleImpl.java
@@ -13,9 +13,9 @@ import java.nio.ByteBuffer;
  */
 class SharedBufferHandleImpl extends HandleBase implements SharedBufferHandle {
     /**
-     * @see HandleBase#HandleBase(CoreImpl, long)
+     * @see HandleBase#HandleBase(CoreImpl, int)
      */
-    SharedBufferHandleImpl(CoreImpl core, long mojoHandle) {
+    SharedBufferHandleImpl(CoreImpl core, int mojoHandle) {
         super(core, mojoHandle);
     }
 
diff --git a/mojo/public/java/system/src/org/chromium/mojo/system/impl/UntypedHandleImpl.java b/mojo/public/java/system/src/org/chromium/mojo/system/impl/UntypedHandleImpl.java
index 8ddf784de9..e365abf31d 100644
--- a/mojo/public/java/system/src/org/chromium/mojo/system/impl/UntypedHandleImpl.java
+++ b/mojo/public/java/system/src/org/chromium/mojo/system/impl/UntypedHandleImpl.java
@@ -15,9 +15,9 @@ import org.chromium.mojo.system.UntypedHandle;
  */
 class UntypedHandleImpl extends HandleBase implements UntypedHandle {
     /**
-     * @see HandleBase#HandleBase(CoreImpl, long)
+     * @see HandleBase#HandleBase(CoreImpl, int)
      */
-    UntypedHandleImpl(CoreImpl core, long mojoHandle) {
+    UntypedHandleImpl(CoreImpl core, int mojoHandle) {
         super(core, mojoHandle);
     }
 
diff --git a/mojo/public/java/system/src/org/chromium/mojo/system/impl/WatcherImpl.java b/mojo/public/java/system/src/org/chromium/mojo/system/impl/WatcherImpl.java
index 8aec8844ef..ed4d760617 100644
--- a/mojo/public/java/system/src/org/chromium/mojo/system/impl/WatcherImpl.java
+++ b/mojo/public/java/system/src/org/chromium/mojo/system/impl/WatcherImpl.java
@@ -59,7 +59,7 @@ class WatcherImpl implements Watcher {
     @NativeMethods
     interface Natives {
         long createWatcher(WatcherImpl caller);
-        int start(WatcherImpl caller, long implPtr, long mojoHandle, int flags);
+        int start(WatcherImpl caller, long implPtr, int mojoHandle, int flags);
         void cancel(WatcherImpl caller, long implPtr);
         void delete(WatcherImpl caller, long implPtr);
     }
diff --git a/mojo/public/java/system/watcher_impl.cc b/mojo/public/java/system/watcher_impl.cc
index eb2c9ce024..065677fa93 100644
--- a/mojo/public/java/system/watcher_impl.cc
+++ b/mojo/public/java/system/watcher_impl.cc
@@ -33,7 +33,7 @@ class WatcherImpl {
 
   jint Start(JNIEnv* env,
              const JavaParamRef<jobject>& jcaller,
-             jlong mojo_handle,
+             jint mojo_handle,
              jint signals) {
     java_watcher_.Reset(env, jcaller);
 
@@ -83,7 +83,7 @@ static jlong JNI_WatcherImpl_CreateWatcher(
 static jint JNI_WatcherImpl_Start(JNIEnv* env,
                                   const JavaParamRef<jobject>& jcaller,
                                   jlong watcher_ptr,
-                                  jlong mojo_handle,
+                                  jint mojo_handle,
                                   jint signals) {
   auto* watcher = reinterpret_cast<WatcherImpl*>(watcher_ptr);
   return watcher->Start(env, jcaller, mojo_handle, signals);
