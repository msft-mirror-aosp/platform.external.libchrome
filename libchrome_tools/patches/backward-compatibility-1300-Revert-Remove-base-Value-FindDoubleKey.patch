From 9d594efca00b50317654055725a01782dffb0680 Mon Sep 17 00:00:00 2001
From: Kevin Lin <kevinptt@chromium.org>
Date: Wed, 29 Mar 2023 02:42:15 +0800
Subject: [PATCH] Revert "Remove base::Value::FindDoubleKey()"

This reverts commit bb5e0b372bd03b257bd396b0c1861c46f996e726.

Change-Id: I76b66dbb017539586a0f520afdd47bd75352aefb
---
 base/values.cc          |  4 ++++
 base/values.h           |  6 ++++++
 base/values_unittest.cc | 21 +++++++++++++++++++++
 3 files changed, 31 insertions(+)

diff --git a/base/values.cc b/base/values.cc
index 909d93a9c6..ee77160c6e 100644
--- a/base/values.cc
+++ b/base/values.cc
@@ -1161,6 +1161,10 @@ absl::optional<int> Value::FindIntKey(StringPiece key) const {
   return GetDict().FindInt(key);
 }
 
+absl::optional<double> Value::FindDoubleKey(StringPiece key) const {
+  return GetDict().FindDouble(key);
+}
+
 const std::string* Value::FindStringKey(StringPiece key) const {
   return GetDict().FindString(key);
 }
diff --git a/base/values.h b/base/values.h
index 0ff64447dd..ca5253a63f 100644
--- a/base/values.h
+++ b/base/values.h
@@ -766,6 +766,12 @@ class BASE_EXPORT GSL_OWNER Value {
   absl::optional<bool> FindBoolKey(StringPiece key) const;
   // DEPRECATED: prefer `Value::Dict::FindInt()`.
   absl::optional<int> FindIntKey(StringPiece key) const;
+  // Returns a non-null value for both `Value::Type::DOUBLE` and
+  // `Value::Type::INT`, converting the latter to a double.
+  //
+  // DEPRECATED: prefer `Value::Dict::FindDouble()`.
+  [[deprecated("Use Value::Dict::FindDouble() instead.")]]
+  absl::optional<double> FindDoubleKey(StringPiece key) const;
   // DEPRECATED: prefer `Value::Dict::FindString()`.
   const std::string* FindStringKey(StringPiece key) const;
   std::string* FindStringKey(StringPiece key);
diff --git a/base/values_unittest.cc b/base/values_unittest.cc
index f2ae442d70..329d852325 100644
--- a/base/values_unittest.cc
+++ b/base/values_unittest.cc
@@ -859,6 +859,27 @@ TEST(ValuesTest, FindIntKey) {
   EXPECT_EQ(absl::nullopt, dict.FindInt("dict"));
 }
 
+TEST(ValuesTest, FindDoubleKey) {
+  Value::Dict dict;
+  dict.Set("null", Value());
+  dict.Set("bool", false);
+  dict.Set("int", 0);
+  dict.Set("double", 0.0);
+  dict.Set("string", std::string());
+  dict.Set("blob", Value(Value::BlobStorage()));
+  dict.Set("list", Value::List());
+  dict.Set("dict", Value::Dict());
+
+  EXPECT_EQ(absl::nullopt, dict.FindDouble("null"));
+  EXPECT_EQ(absl::nullopt, dict.FindDouble("bool"));
+  EXPECT_NE(absl::nullopt, dict.FindDouble("int"));
+  EXPECT_NE(absl::nullopt, dict.FindDouble("double"));
+  EXPECT_EQ(absl::nullopt, dict.FindDouble("string"));
+  EXPECT_EQ(absl::nullopt, dict.FindDouble("blob"));
+  EXPECT_EQ(absl::nullopt, dict.FindDouble("list"));
+  EXPECT_EQ(absl::nullopt, dict.FindDouble("dict"));
+}
+
 TEST(ValuesTest, FindStringKey) {
   Value::Dict dict;
   dict.Set("null", Value());
-- 
2.40.0.348.gf938b09366-goog

