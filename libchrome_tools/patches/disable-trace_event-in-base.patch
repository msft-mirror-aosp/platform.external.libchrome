From 83ef99fad0d789be40ae8db2a85ef23391f24035 Mon Sep 17 00:00:00 2001
From: hscham <hscham@chromium.org>
Date: Thu, 11 Nov 2021 16:12:20 +0900
Subject: [PATCH] Add mock implementations to
 base/trace_event/trace_event_stub.h

This is the first of a series of CLs which will fix the base, ipc, mojo
build with ENABLE_BASE_TRACING disabled.
(Splitted from crrev.com/c/3251806).

trace_event is not supported in libchrome, and local patches are
currently applied to replace trace_event headers by stub or commenting
out relevant lines manually, although there is a build flag
enable_base_tracing which could be used for disabling it.

Fix the build in libchrome components on chromium upstream when the flag
is set to false, so that libchrome does not need to maintain the
divergence.

Most of the compile errors are caused by redefinition of classes or
functions when both the stub and real headers are included, and can be
fixed by including the proxy header base/trace_event/base_tracing.h
instead.

This CL adds functions and classes to the trace_event_stub.{h,cc} which
will be used by the mojo or ipc files.

Bug: b:204714883
Test: autoninja -C out/Default chrome (ENABLE_BASE_TRACING=true)
Test: autoninja -C out/Default base (ENABLE_BASE_TRACING=false)
Change-Id: Ia862c5955aa3b5cf2ad61716cd2edb749408a07d
---
 base/trace_event/base_tracing.h         |   1 +
 base/trace_event/base_tracing_forward.h |   1 +
 base/trace_event/trace_event_stub.cc    |   9 +++
 base/trace_event/trace_event_stub.h     | 103 +++++++++++++++++++++++-
 4 files changed, 110 insertions(+), 4 deletions(-)

diff --git a/base/trace_event/base_tracing.h b/base/trace_event/base_tracing.h
index 6fe702e4b3eb..f20bff7d4977 100644
--- a/base/trace_event/base_tracing.h
+++ b/base/trace_event/base_tracing.h
@@ -23,6 +23,7 @@
 #include "base/trace_event/memory_dump_provider.h"        // nogncheck
 #include "base/trace_event/task_execution_macros.h"       // nogncheck
 #include "base/trace_event/trace_event.h"                 // nogncheck
+#include "base/trace_event/trace_id_helper.h"             // nogncheck
 #include "base/trace_event/traced_value.h"                // nogncheck
 #include "base/trace_event/typed_macros.h"                // nogncheck
 #include "third_party/perfetto/include/perfetto/tracing/traced_value.h"  // nogncheck
diff --git a/base/trace_event/base_tracing_forward.h b/base/trace_event/base_tracing_forward.h
index f72f9fde2f05..f10e0f3979fd 100644
--- a/base/trace_event/base_tracing_forward.h
+++ b/base/trace_event/base_tracing_forward.h
@@ -17,6 +17,7 @@
 namespace perfetto {
 
 class TracedValue;
+class EventContext;
 
 template <typename T>
 void WriteIntoTrace(TracedValue context, T&& value);
diff --git a/base/trace_event/trace_event_stub.cc b/base/trace_event/trace_event_stub.cc
index f227101ea4db..face091bf495 100644
--- a/base/trace_event/trace_event_stub.cc
+++ b/base/trace_event/trace_event_stub.cc
@@ -6,6 +6,8 @@
 
 #include <string>
 
+#include "base/memory/scoped_refptr.h"
+#include "base/task/single_thread_task_runner.h"
 #include "base/trace_event/trace_event_stub.h"
 
 namespace base {
@@ -16,6 +18,13 @@ ConvertableToTraceFormat::~ConvertableToTraceFormat() = default;
 void TracedValue::AppendAsTraceFormat(std::string* out) const {}
 
 MemoryDumpProvider::~MemoryDumpProvider() = default;
+void MemoryDumpManager::RegisterDumpProvider(
+    MemoryDumpProvider* mdp, const char* name,
+    scoped_refptr<SingleThreadTaskRunner> task_runner) {}
+void MemoryDumpManager::RegisterDumpProvider(
+    MemoryDumpProvider* mdp, const char* name,
+    scoped_refptr<SingleThreadTaskRunner> task_runner,
+    MemoryDumpProvider::Options options) {}
 
 // static
 constexpr const char* const MemoryDumpManager::kTraceCategory;
diff --git a/base/trace_event/trace_event_stub.h b/base/trace_event/trace_event_stub.h
index 500d6b53db31..fffbd6994310 100644
--- a/base/trace_event/trace_event_stub.h
+++ b/base/trace_event/trace_event_stub.h
@@ -75,9 +75,17 @@ struct IgnoredValue {
   INTERNAL_TRACE_IGNORE(category, name)
 #define PERFETTO_INTERNAL_ADD_EMPTY_EVENT() INTERNAL_TRACE_IGNORE()
 
+template <class T>
+class scoped_refptr;
+
 namespace base {
+
+class SingleThreadTaskRunner;
+
 namespace trace_event {
 
+BASE_EXPORT uint64_t GetNextGlobalTraceId();
+
 class BASE_EXPORT ConvertableToTraceFormat {
  public:
   ConvertableToTraceFormat() = default;
@@ -157,10 +165,55 @@ class BASE_EXPORT BlameContext {
 };
 
 struct MemoryDumpArgs;
-class ProcessMemoryDump;
+enum class MemoryDumpLevelOfDetail : uint32_t;
+
+class BASE_EXPORT MemoryAllocatorDump {
+ public:
+  struct BASE_EXPORT Entry {};
+  MemoryAllocatorDump(const std::string& absolute_name,
+                      MemoryDumpLevelOfDetail,
+                      const MemoryAllocatorDumpGuid&) {}
+  MemoryAllocatorDump(const MemoryAllocatorDump&) = delete;
+  MemoryAllocatorDump& operator=(const MemoryAllocatorDump&) = delete;
+  ~MemoryAllocatorDump();
+  static const char kNameSize[];
+  static const char kNameObjectCount[];
+  static const char kUnitsBytes[];
+  static const char kUnitsObjects[];
+  static const char kTypeScalar[];
+  static const char kTypeString[];
+  void AddScalar(const char* name, const char* units, uint64_t value) {}
+  void AddString(const char* name,
+                 const char* units,
+                 const std::string& value) {}
+  void AsValueInto(TracedValue* value) const {}
+  uint64_t GetSizeInternal() const { return 0; }
+  void set_flags(int flags) {}
+  void clear_flags(int flags) {}
+  int flags() const { return 0; }
+};
+
+class BASE_EXPORT ProcessMemoryDump {
+ public:
+  explicit ProcessMemoryDump(const MemoryDumpArgs& dump_args) {}
+  ProcessMemoryDump(ProcessMemoryDump&&) {}
+  ~ProcessMemoryDump() {}
+
+  ProcessMemoryDump& operator=(ProcessMemoryDump&&);
+
+  MemoryAllocatorDump* CreateAllocatorDump(const std::string& absolute_name) {
+    return nullptr;
+  }
+  MemoryAllocatorDump* CreateAllocatorDump(
+      const std::string& absolute_name,
+      const MemoryAllocatorDumpGuid& guid) {
+    return nullptr;
+  }
+};
 
 class BASE_EXPORT MemoryDumpProvider {
  public:
+  struct Options {};
   MemoryDumpProvider(const MemoryDumpProvider&) = delete;
   MemoryDumpProvider& operator=(const MemoryDumpProvider&) = delete;
   virtual ~MemoryDumpProvider();
@@ -176,6 +229,38 @@ class BASE_EXPORT MemoryDumpManager {
  public:
   static constexpr const char* const kTraceCategory =
       TRACE_DISABLED_BY_DEFAULT("memory-infra");
+  static MemoryDumpManager* GetInstance() { return nullptr; }
+
+  MemoryDumpManager(const MemoryDumpManager&) = delete;
+  MemoryDumpManager& operator=(const MemoryDumpManager&) = delete;
+
+  void RegisterDumpProvider(MemoryDumpProvider* mdp,
+                            const char* name,
+                            scoped_refptr<SingleThreadTaskRunner> task_runner);
+  void RegisterDumpProvider(MemoryDumpProvider* mdp,
+                            const char* name,
+                            scoped_refptr<SingleThreadTaskRunner> task_runner,
+                            MemoryDumpProvider::Options options);
+  void UnregisterDumpProvider(MemoryDumpProvider* mdp) {}
+  void UnregisterAndDeleteDumpProviderSoon(
+      std::unique_ptr<MemoryDumpProvider> mdp) {}
+
+ private:
+  MemoryDumpManager() {}
+  virtual ~MemoryDumpManager();
+};
+
+class BASE_EXPORT TraceLog : public MemoryDumpProvider {
+ public:
+  static TraceLog* GetInstance() { return nullptr; }
+
+  TraceLog(const TraceLog&) = delete;
+  TraceLog& operator=(const TraceLog&) = delete;
+
+  int process_id() const { return 0; }
+
+ private:
+  explicit TraceLog(int generation) {}
 };
 
 }  // namespace trace_event
@@ -185,6 +270,11 @@ class BASE_EXPORT MemoryDumpManager {
 // perfetto::StaticString/ThreadTrack/TracedValue/TracedDictionary/TracedArray.
 namespace perfetto {
 
+namespace internal {
+template <typename T>
+class has_traced_value_support {};
+}  // namespace internal
+
 class TracedArray;
 class TracedDictionary;
 class EventContext;
@@ -201,7 +291,7 @@ class DynamicString {
   explicit DynamicString(T) {}
 };
 
-class TracedValue {
+class BASE_EXPORT TracedValue {
  public:
   void WriteInt64(int64_t) && {}
   void WriteUInt64(uint64_t) && {}
@@ -216,7 +306,7 @@ class TracedValue {
   TracedArray WriteArray() &&;
 };
 
-class TracedDictionary {
+class BASE_EXPORT TracedDictionary {
  public:
   TracedValue AddItem(StaticString) { return TracedValue(); }
   TracedValue AddItem(DynamicString) { return TracedValue(); }
@@ -232,7 +322,7 @@ class TracedDictionary {
   TracedArray AddArray(DynamicString);
 };
 
-class TracedArray {
+class BASE_EXPORT TracedArray {
  public:
   TracedValue AppendItem() { return TracedValue(); }
 
@@ -246,6 +336,11 @@ class TracedArray {
 template <class T>
 void WriteIntoTracedValue(TracedValue, T&&) {}
 
+template <typename T>
+void WriteIntoTracedValueWithFallback(TracedValue context,
+                                      T&& value,
+                                      const std::string&) {}
+
 }  // namespace perfetto
 
 #endif  // BASE_TRACE_EVENT_TRACE_EVENT_STUB_H_
-- 
2.35.0.rc0.227.g00780c9af4-goog

