From 678fb1a7e277ec15e663b8c4fe521d59bc0249b0 Mon Sep 17 00:00:00 2001
From: hscham <hscham@chromium.org>
Date: Tue, 2 Nov 2021 14:04:39 +0900
Subject: [PATCH] Add mock object manager

Refer to crbug/1093642 on upstream or abandon these two patches.
Add MockObjectManager, which is removed upstream.

Change-Id: I9d40b2af0c2e03d9acbc4544fb4585aa3fee0777
---
 dbus/mock_object_manager.cc | 17 +++++++++++++++
 dbus/mock_object_manager.h  | 41 +++++++++++++++++++++++++++++++++++++
 dbus/object_manager.h       | 21 ++++++++++---------
 3 files changed, 69 insertions(+), 10 deletions(-)
 create mode 100644 dbus/mock_object_manager.cc
 create mode 100644 dbus/mock_object_manager.h

diff --git a/dbus/mock_object_manager.cc b/dbus/mock_object_manager.cc
new file mode 100644
index 0000000000..3f0c0a1744
--- /dev/null
+++ b/dbus/mock_object_manager.cc
@@ -0,0 +1,17 @@
+// Copyright 2013 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "dbus/mock_object_manager.h"
+
+namespace dbus {
+
+MockObjectManager::MockObjectManager(Bus* bus,
+                                     const std::string& service_name,
+                                     const ObjectPath& object_path)
+    : ObjectManager(bus, service_name, object_path) {
+}
+
+MockObjectManager::~MockObjectManager() = default;
+
+}  // namespace dbus
diff --git a/dbus/mock_object_manager.h b/dbus/mock_object_manager.h
new file mode 100644
index 0000000000..6eb95de9a4
--- /dev/null
+++ b/dbus/mock_object_manager.h
@@ -0,0 +1,41 @@
+// Copyright 2013 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef DBUS_MOCK_OBJECT_MANAGER_H_
+#define DBUS_MOCK_OBJECT_MANAGER_H_
+
+#include <string>
+
+#include "dbus/message.h"
+#include "dbus/object_manager.h"
+#include "dbus/object_path.h"
+#include "dbus/object_proxy.h"
+#include "testing/gmock/include/gmock/gmock.h"
+
+namespace dbus {
+
+// Mock for ObjectManager.
+class MockObjectManager : public ObjectManager {
+ public:
+  MockObjectManager(Bus* bus,
+                    const std::string& service_name,
+                    const ObjectPath& object_path);
+
+  MOCK_METHOD2(RegisterInterface, void(const std::string&,
+                                       Interface*));
+  MOCK_METHOD1(UnregisterInterface, void(const std::string&));
+  MOCK_METHOD0(GetObjects, std::vector<ObjectPath>());
+  MOCK_METHOD1(GetObjectsWithInterface,
+               std::vector<ObjectPath>(const std::string&));
+  MOCK_METHOD1(GetObjectProxy, ObjectProxy*(const ObjectPath&));
+  MOCK_METHOD2(GetProperties, PropertySet*(const ObjectPath&,
+                                           const std::string&));
+
+ protected:
+  ~MockObjectManager() override;
+};
+
+}  // namespace dbus
+
+#endif  // DBUS_MOCK_OBJECT_MANAGER_H_
diff --git a/dbus/object_manager.h b/dbus/object_manager.h
index ada1fd0a7a..dad5252226 100644
--- a/dbus/object_manager.h
+++ b/dbus/object_manager.h
@@ -136,7 +136,7 @@ class Signal;
 // ObjectManager implements both the D-Bus client components of the D-Bus
 // Object Manager interface, as internal methods, and a public API for
 // client classes to utilize.
-class CHROME_DBUS_EXPORT ObjectManager final
+class CHROME_DBUS_EXPORT ObjectManager
     : public base::RefCountedThreadSafe<ObjectManager> {
  public:
   // ObjectManager::Interface must be implemented by any class wishing to have
@@ -192,38 +192,38 @@ class CHROME_DBUS_EXPORT ObjectManager final
   // interface named in |interface_name|. That object's CreateProperties()
   // method will be used to create instances of dbus::PropertySet* when
   // required.
-  void RegisterInterface(const std::string& interface_name,
-                         Interface* interface);
+  virtual void RegisterInterface(const std::string& interface_name,
+                                 Interface* interface);
 
   // Unregister the implementation class for the D-Bus interface named in
   // |interface_name|, objects and properties of this interface will be
   // ignored.
-  void UnregisterInterface(const std::string& interface_name);
+  virtual void UnregisterInterface(const std::string& interface_name);
 
   // Checks whether an interface is registered.
   bool IsInterfaceRegisteredForTesting(const std::string& interface_name) const;
 
   // Returns a list of object paths, in an undefined order, of objects known
   // to this manager.
-  std::vector<ObjectPath> GetObjects();
+  virtual std::vector<ObjectPath> GetObjects();
 
   // Returns the list of object paths, in an undefined order, of objects
   // implementing the interface named in |interface_name| known to this manager.
-  std::vector<ObjectPath> GetObjectsWithInterface(
+  virtual std::vector<ObjectPath> GetObjectsWithInterface(
       const std::string& interface_name);
 
   // Returns a ObjectProxy pointer for the given |object_path|. Unlike
   // the equivalent method on Bus this will return NULL if the object
   // manager has not been informed of that object's existence.
-  ObjectProxy* GetObjectProxy(const ObjectPath& object_path);
+  virtual ObjectProxy* GetObjectProxy(const ObjectPath& object_path);
 
   // Returns a PropertySet* pointer for the given |object_path| and
   // |interface_name|, or NULL if the object manager has not been informed of
   // that object's existence or the interface's properties. The caller should
   // cast the returned pointer to the appropriate type, e.g.:
   //   static_cast<Properties*>(GetProperties(object_path, my_interface));
-  PropertySet* GetProperties(const ObjectPath& object_path,
-                             const std::string& interface_name);
+  virtual PropertySet* GetProperties(const ObjectPath& object_path,
+                                     const std::string& interface_name);
 
   // Instructs the object manager to refresh its list of managed objects;
   // automatically called by the D-Bus thread manager, there should never be
@@ -238,11 +238,12 @@ class CHROME_DBUS_EXPORT ObjectManager final
 
  private:
   friend class base::RefCountedThreadSafe<ObjectManager>;
+  friend class MockObjectManager;
 
   ObjectManager(Bus* bus,
                 const std::string& service_name,
                 const ObjectPath& object_path);
-  ~ObjectManager();
+  virtual ~ObjectManager();
 
   // Called from the constructor to add a match rule for PropertiesChanged
   // signals on the D-Bus thread and set up a corresponding filter function.
-- 
2.33.1.1089.g2158813163f-goog

