From c100dda28de6bfaa6a2d9720d72884f8602a2b9c Mon Sep 17 00:00:00 2001
From: Wei-Luan Wang <weiluanwang@google.com>
Date: Wed, 15 Mar 2023 02:43:25 +0000
Subject: [PATCH] Revert "Change from __attribute__(x) to [[clang::x]] for
 various attributes."

This reverts commit 5e8ed9e7ba46daf8920c9b39f4baa6c43cbced4b.

Change-Id: I75ae35c0bbb74a1a141bfb480feb529c081afedb
---
 base/compiler_specific.h | 23 ++++++++++++++++-------
 1 file changed, 16 insertions(+), 7 deletions(-)

diff --git a/base/compiler_specific.h b/base/compiler_specific.h
index d12c508ad7..9933e47315 100644
--- a/base/compiler_specific.h
+++ b/base/compiler_specific.h
@@ -87,14 +87,23 @@
 //
 // In most places you can use the C++11 keyword "alignas", which is preferred.
 //
-// Historically, compilers had trouble mixing __attribute__((...)) syntax with
-// alignas(...) syntax. However, at least Clang is very accepting nowadays. It
-// may be that this macro can be removed entirely.
-#if defined(__clang__)
-#define ALIGNAS(byte_alignment) alignas(byte_alignment)
-#elif defined(COMPILER_MSVC)
+// But compilers have trouble mixing __attribute__((...)) syntax with
+// alignas(...) syntax.
+//
+// Doesn't work in clang or gcc:
+//   struct alignas(16) __attribute__((packed)) S { char c; };
+// Works in clang but not gcc:
+//   struct __attribute__((packed)) alignas(16) S2 { char c; };
+// Works in clang and gcc:
+//   struct alignas(16) S3 { char c; } __attribute__((packed));
+//
+// There are also some attributes that must be specified *before* a class
+// definition: visibility (used for exporting functions/classes) is one of
+// these attributes. This means that it is not possible to use alignas() with a
+// class that is marked as exported.
+#if defined(COMPILER_MSVC)
 #define ALIGNAS(byte_alignment) __declspec(align(byte_alignment))
-#elif defined(COMPILER_GCC) && HAS_ATTRIBUTE(aligned)
+#elif defined(COMPILER_GCC)
 #define ALIGNAS(byte_alignment) __attribute__((aligned(byte_alignment)))
 #endif
 
-- 
2.40.0.rc1.284.g88254d51c5-goog

