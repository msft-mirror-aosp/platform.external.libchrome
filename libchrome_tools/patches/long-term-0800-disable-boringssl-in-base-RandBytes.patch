From 64194dc354c3d89aefc5038d375aa39aae0779c0 Mon Sep 17 00:00:00 2001
From: Jeff Lin <jeffulin@google.com>
Date: Mon, 1 Jul 2024 15:59:21 +0800
Subject: [PATCH] disable boringssl in base::RandBytes

Introduced in r1045239 (crrev.com/c/3880863).
Updated in r1321254 (crrev.com/c/5669584).

Change-Id: I2cdc2fe34a83b8debad12c0143e881a7a52c5bf5
---
 base/feature_list.cc    | 2 +-
 base/rand_util.h        | 2 +-
 base/rand_util_posix.cc | 6 +++---
 3 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/base/feature_list.cc b/base/feature_list.cc
index 895b710fdf..80b80df74c 100644
--- a/base/feature_list.cc
+++ b/base/feature_list.cc
@@ -614,7 +614,7 @@ void FeatureList::SetInstance(std::unique_ptr<FeatureList> instance) {
   // FeatureList instance, as the state of the involved Features might change
   // with the final FeatureList for this process.
   if (!g_feature_list_instance->IsEarlyAccessInstance()) {
-#if !BUILDFLAG(IS_NACL)
+#if !BUILDFLAG(IS_NACL) && 0
     // Configured first because it takes precedence over the getrandom() trial.
     internal::ConfigureBoringSSLBackedRandBytesFieldTrial();
 #endif
diff --git a/base/rand_util.h b/base/rand_util.h
index 746166bf75..5c9c3b1ad0 100644
--- a/base/rand_util.h
+++ b/base/rand_util.h
@@ -38,7 +38,7 @@ namespace internal {
 void ConfigureRandBytesFieldTrial();
 #endif
 
-#if !BUILDFLAG(IS_NACL)
+#if !BUILDFLAG(IS_NACL) && 0
 void ConfigureBoringSSLBackedRandBytesFieldTrial();
 #endif
 
diff --git a/base/rand_util_posix.cc b/base/rand_util_posix.cc
index 00fcb8547e..a388e9f2fc 100644
--- a/base/rand_util_posix.cc
+++ b/base/rand_util_posix.cc
@@ -36,7 +36,7 @@
 #include <sys/random.h>
 #endif
 
-#if !BUILDFLAG(IS_NACL)
+#if !BUILDFLAG(IS_NACL) && 0
 #include "third_party/boringssl/src/include/openssl/rand.h"
 #endif
 
@@ -153,9 +153,9 @@ void ConfigureRandBytesFieldTrial() {
 }
 #endif
 
+#if !BUILDFLAG(IS_NACL) && 0
 namespace {
 
-#if !BUILDFLAG(IS_NACL)
 // The BoringSSl helpers are duplicated in rand_util_fuchsia.cc and
 // rand_util_win.cc.
 std::atomic<bool> g_use_boringssl;
@@ -181,7 +181,7 @@ bool UseBoringSSLForRandBytes() {
 namespace {
 
 void RandBytesInternal(span<uint8_t> output, bool avoid_allocation) {
-#if !BUILDFLAG(IS_NACL)
+#if !BUILDFLAG(IS_NACL) && 0
   // The BoringSSL experiment takes priority over everything else.
   if (!avoid_allocation && internal::UseBoringSSLForRandBytes()) {
     // BoringSSL's RAND_bytes always returns 1. Any error aborts the program.
-- 
2.45.2.803.g4e1b14247a-goog

