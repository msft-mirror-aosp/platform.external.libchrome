From 7e0a77b4609e7bc8d49a3e5c40e101733ad31d76 Mon Sep 17 00:00:00 2001
From: Ren-Pei Zeng <kamesan@chromium.org>
Date: Mon, 17 Jul 2023 15:44:06 +0000
Subject: [PATCH] Revert "Merge
 ObjectProxy::CallMethodAndBlock{,WithErrorDetails}."

This introduces a temporary function to aid in migrating clients to the
new API.

Change-Id: I6a655b9357ba15d42f499179a21571a5cf2103e4
---
 dbus/mock_object_proxy.h |  7 +++++++
 dbus/object_proxy.cc     | 19 +++++++++++++++++++
 dbus/object_proxy.h      |  7 +++++++
 3 files changed, 33 insertions(+)

diff --git a/dbus/mock_object_proxy.h b/dbus/mock_object_proxy.h
index 9731ee502e..ce762bfc8e 100644
--- a/dbus/mock_object_proxy.h
+++ b/dbus/mock_object_proxy.h
@@ -28,6 +28,13 @@ class MockObjectProxy : public ObjectProxy {
       CallMethodAndBlock,
       base::expected<std::unique_ptr<Response>, Error>(MethodCall* method_call,
                                                        int timeout_ms));
+  MOCK_METHOD3(CallMethodAndBlockWithErrorDetails,
+               std::unique_ptr<Response>(MethodCall* method_call,
+                                         int timeout_ms,
+                                         Error* error));
+  MOCK_METHOD2(CallMethodAndBlockDeprecated,
+               std::unique_ptr<Response>(MethodCall* method_call,
+                                         int timeout_ms));
 
   // This method is not mockable because it takes a move-only argument. To work
   // around this, CallMethod() implementation here calls DoCallMethod() which is
diff --git a/dbus/object_proxy.cc b/dbus/object_proxy.cc
index 2e6798f0a2..5db21ee2d6 100644
--- a/dbus/object_proxy.cc
+++ b/dbus/object_proxy.cc
@@ -150,6 +150,25 @@ ObjectProxy::CallMethodAndBlock(MethodCall* method_call, int timeout_ms) {
   return result;
 }
 
+std::unique_ptr<Response> ObjectProxy::CallMethodAndBlockWithErrorDetails(
+    MethodCall* method_call,
+    int timeout_ms,
+    Error* error) {
+  auto result = CallMethodAndBlock(method_call, timeout_ms);
+  if (result.has_value()) {
+    return std::move(result.value());
+  } else {
+    *error = std::move(result.error());
+    return nullptr;
+  }
+}
+
+std::unique_ptr<Response> ObjectProxy::CallMethodAndBlockDeprecated(
+    MethodCall* method_call,
+    int timeout_ms) {
+  return CallMethodAndBlock(method_call, timeout_ms).value_or(nullptr);
+}
+
 void ObjectProxy::CallMethod(MethodCall* method_call,
                              int timeout_ms,
                              ResponseCallback callback) {
diff --git a/dbus/object_proxy.h b/dbus/object_proxy.h
index 10d384fe5a..c49be9c1eb 100644
--- a/dbus/object_proxy.h
+++ b/dbus/object_proxy.h
@@ -116,6 +116,13 @@ class CHROME_DBUS_EXPORT ObjectProxy
   virtual base::expected<std::unique_ptr<Response>, Error> CallMethodAndBlock(
       MethodCall* method_call,
       int timeout_ms);
+  virtual std::unique_ptr<Response> CallMethodAndBlockWithErrorDetails(
+      MethodCall* method_call,
+      int timeout_ms,
+      Error* error);
+  virtual std::unique_ptr<Response> CallMethodAndBlockDeprecated(
+      MethodCall* method_call,
+      int timeout_ms);
 
   // Requests to call the method of the remote object.
   //
-- 
2.41.0.694.ge786442a9b-goog

